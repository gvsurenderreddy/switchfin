--- attrafax-0.9/compile.sh	2010-02-10 16:15:07.000000000 +0200
+++ attrafax-0.9/compile.sh	2010-08-04 23:47:19.000000000 +0300
@@ -25,18 +25,21 @@
 	elif [ `uname -s` = "SunOS" ]; then
 		CC="/opt/sunstudio12.1/bin/cc"
 	fi
+else
+        CC="$CC"
 fi
 
 if [ -z "$CFLAGS" ]; then
-	CFLAGS="-g"
+	CFLAGS="-std=gnu99  -g -ffast-math -mfast-fp"
 fi
 
 if [ `uname -s` = "SunOS" ]; then
 	CFLAGS="${CFLAGS} -KPIC -D_FILE_OFFSET_BITS=64 -xc99=all"
 else
-	CFLAGS="${CFLAGS} -Wall -Werror -fPIC -D_FILE_OFFSET_BITS=64"
+#	CFLAGS="${CFLAGS} -Wall -Werror -fPIC -D_FILE_OFFSET_BITS=64"
+	CFLAGS="${CFLAGS} -Wall -fPIC -D_FILE_OFFSET_BITS=64"
 fi
-INCLUDE="-I../../include -I/usr/local/include $EXTINCLUDES"
+INCLUDE="-I../../include -I$1 $EXTINCLUDES"
 BLIBS="-lm -lz -lssl -lcrypto"
 
 
@@ -69,11 +72,11 @@
 	fi
 fi
 
-LIBS="-L../../bin -L/usr/local/lib -lt30"
+LIBS="-L../../bin -L$2 -lt30"
 
 BIN_COMMON="rev.o hdlc.o llist.o tlogger.o context.o"
 TONE_COMMON="dds.o goertzel.o cng.o ced.o"
-MODEM_COMMON="eq.o meter.o"
+MODEM_COMMON="eq.o meter.o fastmath.o"
 V21="v21tx.o v21rx.o"
 V27TER="v27tertx2400.o v27terrx2400.o v27tertx4800.o v27terrx4800.o"
 V29="v29tx.o v29rx.o"
@@ -109,11 +112,11 @@
 	${CC} ${CFLAGS} ${INCLUDE} -c "$i"
 done
 
-${CC} ${CFLAGS} -shared -Xlinker ${BLIBS} \
+${CC} ${CFLAGS} -shared -Xlinker ${BLIBS} ${LIBS} \
 	${BIN_COMMON} ${TONE_COMMON} ${MODEMS} ${FAX_COMMON} \
 	${TIFF} ${JPEG} -o ../../${BINDIR}/libt30.so
 
 
-ar rv ../../${BINDIR}/libt30.a ${BIN_COMMON} ${TONE_COMMON} ${MODEMS} ${FAX_COMMON}
-ranlib ../../${BINDIR}/libt30.a
+bfin-linux-uclibc-ar rv ../../${BINDIR}/libt30.a ${BIN_COMMON} ${TONE_COMMON} ${MODEMS} ${FAX_COMMON}
+bfin-linux-uclibc-ranlib ../../${BINDIR}/libt30.a
 
--- attrafax-0.9/include/internal/common/cval.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/common/cval.h	2010-08-04 23:42:22.000000000 +0300
@@ -36,6 +36,7 @@
 
 #ifdef _USE_CVAL_C0
 static complex _C0 = C0;
+static complexi _C0i = C0i;
 #endif
 
 #endif
--- attrafax-0.9/include/internal/common/dds.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/common/dds.h	2010-08-04 23:42:22.000000000 +0300
@@ -31,9 +31,9 @@
 #define TLEN            (1<<TBITS)
 
 void create_tables(void);
-complex csynth(int);
-float rsynthcos(int);
-float rsynthsin(int);
+complexi csynth(int);
+int rsynthcos(int);
+int rsynthsin(int);
 int getrate(int);
 float getunit(float);
 
diff -ur attrafax-0.9/include/internal/common/eq.h attrafax-0.9fxp/include/internal/common/eq.h
--- attrafax-0.9/include/internal/common/eq.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9fxp/include/internal/common/eq.h	2010-08-04 23:42:22.000000000 +0300
@@ -33,18 +33,19 @@
 #define EQ_NP_MAX 31
 
 typedef struct {
-	complex c[EQ_SIZE_MAX];
-	complex in[EQ_SIZE_MAX];
+	complexi c[EQ_SIZE_MAX];   //The equilizer coefficients, scale 1000 times for now.
+	complexi in[EQ_SIZE_MAX];  //Penev it was complex, mag les then 6 (match the constelation sample) 
+				   //now scaled 1000 times so fit in complexi
 	int size, np, next;
 	float d;
 } eq_state;
 
 void eq_init(eq_state *, int, int, float);
 void eq_setd(eq_state *, float);
-void eq_insert(eq_state *, complex);
-complex eq_get(eq_state *);
-void eq_update(eq_state *, complex);
-void eq_corr(eq_state *, complex);
+void eq_insert(eq_state *, complexi);
+complexi eq_get(eq_state *);
+void eq_update(eq_state *, complexi);
+//void eq_corr(eq_state *, complex); Penev not used
 void eq_setd(eq_state *, float);
 
 #endif
Only in attrafax-0.9fxp/include/internal/common: fastmath.h
diff -ur attrafax-0.9/include/internal/faxing/hdlc.h attrafax-0.9fxp/include/internal/faxing/hdlc.h
--- attrafax-0.9/include/internal/faxing/hdlc.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9fxp/include/internal/faxing/hdlc.h	2010-08-04 23:42:22.000000000 +0300
@@ -171,14 +171,14 @@
 int hdlc_deframe(int *, unsigned char *, int, unsigned char *, int);
 int hdlc_deframe_cp_bad(int *, unsigned char *, int, unsigned char *, int);
 
-void hdlc_rx_init(hdlc_rx_state *, int, int, unsigned char *, int,
+void hdlc_rx_init1(hdlc_rx_state *, int, int, unsigned char *, int,
 		void *, hdlc_rx_handler_f);
 int hdlc_rx_flags_received(hdlc_rx_state *);
 void hdlc_rx_set_octen_handler(hdlc_rx_state *, octet_proc_f);
 void hdlc_rx(void *, int);
 int hdlc_rx_end(hdlc_rx_state *);
 
-void hdlc_tx_init(hdlc_tx_state *, int, unsigned short *, int);
+void hdlc_tx_init1(hdlc_tx_state *, int, unsigned short *, int);
 int hdlc_tx(void *);
 
 void hdlc_dyntx_init(hdlc_tx_state *, int, unsigned short *, int *);
diff -ur attrafax-0.9/include/internal/faxing/t38.h attrafax-0.9fxp/include/internal/faxing/t38.h
--- attrafax-0.9/include/internal/faxing/t38.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9fxp/include/internal/faxing/t38.h	2010-08-04 23:42:22.000000000 +0300
@@ -75,7 +75,7 @@
 	hdlc_rx_state rxctrl;
 	hdlc_tx_state txctrl;
 /* hdlc control */
-	int hdlc_rx_init, hdlc_tx_init;
+	int hdlc_rx_init, hdlc_tx_init1;
 /* ifp */
 	t38_ifp *ifp;
 /*
@@ -168,7 +168,7 @@
 	modem_t rxtxcmd;
 	hdlc_rx_state rxctrl;
 	hdlc_tx_state txctrl;
-	int hdlc_rx_init, hdlc_tx_init;
+	int hdlc_rx_init, hdlc_tx_init1;
 	int flags_ind_tx;
 	int skip_frame, dis_detected, dis_counter;
 	int got_hdlc;
diff -ur attrafax-0.9/include/internal/modems/stage.h attrafax-0.9fxp/include/internal/modems/stage.h
--- attrafax-0.9/include/internal/modems/stage.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9fxp/include/internal/modems/stage.h	2010-08-04 23:42:22.000000000 +0300
@@ -29,7 +29,7 @@
 #include "internal/common/complex.h"
 
 typedef complex (*txstage_f)(void *);
-typedef int (*rxstage_f)(void *, complex);
+typedef int (*rxstage_f)(void *, complexi);
 
 static const rxstage_f FAILURE = (rxstage_f)-1;
 static const rxstage_f PARK = (rxstage_f)-2;
diff -ur attrafax-0.9/include/internal/modems/v17slicer.h attrafax-0.9fxp/include/internal/modems/v17slicer.h
--- attrafax-0.9/include/internal/modems/v17slicer.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9fxp/include/internal/modems/v17slicer.h	2010-08-04 23:42:22.000000000 +0300
@@ -27,6 +27,6 @@
 
 #include "internal/common/complex.h"
 
-int slicer(int, complex);
+int slicer(int, complexi);
 
 #endif
diff -ur attrafax-0.9/include/internal/modems/v17txrx.h attrafax-0.9fxp/include/internal/modems/v17txrx.h
--- attrafax-0.9/include/internal/modems/v17txrx.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9fxp/include/internal/modems/v17txrx.h	2010-08-04 23:42:22.000000000 +0300
@@ -81,13 +81,13 @@
 	v17_sstate scr, dscr;
 	v17_dstate diff;
 	int cons_state;
-	complex fbuf[_V17CONST_FLEN];
+	complexi fbuf[_V17CONST_FLEN]; //FxP buffer 2^10 scaled 
 	int p;
 	float Ki, Kp;
 	float gain, gain_save;
 	eq_state eq, eq_save;
 	putbit_f putbit;
-	complex tn0, tn1, tn2;
+	complexi tn0, tn1, tn2;
 	int sample;
 	float ang[_V17CONST_ALEN];
 	int step, integrator;
@@ -99,7 +99,7 @@
 	int carrier;
 	meter m, m_gain;
 	float level_on, level_off;
-	float err, erri;
+	int err, erri;
 } v17rx_state;
 
 int v17rx(v17rx_state *, const signed short *, int);
diff -ur attrafax-0.9/include/internal/modems/v17v29rxfilter.h attrafax-0.9fxp/include/internal/modems/v17v29rxfilter.h
--- attrafax-0.9/include/internal/modems/v17v29rxfilter.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9fxp/include/internal/modems/v17v29rxfilter.h	2010-08-04 23:42:22.000000000 +0300
@@ -1,9 +1,9 @@
 
 
 /*
- * Copyright (c) Joachim Vanheuverzwijn <jvhz@zoiper.com> 2007-2010 
+ * Copyright (c) Joachim Vanheuverzwijn <jvhz@zoiper.com> 2007-2010
  *
- * To obtain an exception on the GPL license, please contact the 
+ * To obtain an exception on the GPL license, please contact the
  * copyright owners at www.zoiper.com
  *
  * This program is free software; you can redistribute it and/or modify
@@ -18,5775 +18,5019 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
+ *
+ * The filter is 2^14 scaled 	
  */
 
 
 
 /* N*L+1 == 5761 */
 
-#define N	40
-#define L	144
+#define N       40
+#define L       144
 
+//FxP filter scaled to fit in 2^14
 static const float f[N*L+1] = {
-	4.2321883019e-03f,
-	4.2343942836e-03f,
-	4.2361916963e-03f,
-	4.2375796558e-03f,
-	4.2385573161e-03f,
-	4.2391238686e-03f,
-	4.2392785433e-03f,
-	4.2390206083e-03f,
-	4.2383493700e-03f,
-	4.2372641733e-03f,
-	4.2357644018e-03f,
-	4.2338494779e-03f,
-	4.2315188625e-03f,
-	4.2287720559e-03f,
-	4.2256085972e-03f,
-	4.2220280646e-03f,
-	4.2180300759e-03f,
-	4.2136142879e-03f,
-	4.2087803969e-03f,
-	4.2035281390e-03f,
-	4.1978572896e-03f,
-	4.1917676639e-03f,
-	4.1852591171e-03f,
-	4.1783315440e-03f,
-	4.1709848792e-03f,
-	4.1632190977e-03f,
-	4.1550342143e-03f,
-	4.1464302838e-03f,
-	4.1374074013e-03f,
-	4.1279657022e-03f,
-	4.1181053620e-03f,
-	4.1078265966e-03f,
-	4.0971296622e-03f,
-	4.0860148553e-03f,
-	4.0744825129e-03f,
-	4.0625330126e-03f,
-	4.0501667721e-03f,
-	4.0373842499e-03f,
-	4.0241859448e-03f,
-	4.0105723963e-03f,
-	3.9965441842e-03f,
-	3.9821019291e-03f,
-	3.9672462918e-03f,
-	3.9519779740e-03f,
-	3.9362977176e-03f,
-	3.9202063052e-03f,
-	3.9037045598e-03f,
-	3.8867933449e-03f,
-	3.8694735646e-03f,
-	3.8517461633e-03f,
-	3.8336121257e-03f,
-	3.8150724770e-03f,
-	3.7961282829e-03f,
-	3.7767806491e-03f,
-	3.7570307217e-03f,
-	3.7368796869e-03f,
-	3.7163287711e-03f,
-	3.6953792410e-03f,
-	3.6740324030e-03f,
-	3.6522896035e-03f,
-	3.6301522291e-03f,
-	3.6076217059e-03f,
-	3.5846995000e-03f,
-	3.5613871168e-03f,
-	3.5376861018e-03f,
-	3.5135980395e-03f,
-	3.4891245542e-03f,
-	3.4642673092e-03f,
-	3.4390280073e-03f,
-	3.4134083902e-03f,
-	3.3874102387e-03f,
-	3.3610353723e-03f,
-	3.3342856496e-03f,
-	3.3071629676e-03f,
-	3.2796692620e-03f,
-	3.2518065068e-03f,
-	3.2235767143e-03f,
-	3.1949819349e-03f,
-	3.1660242571e-03f,
-	3.1367058072e-03f,
-	3.1070287493e-03f,
-	3.0769952850e-03f,
-	3.0466076533e-03f,
-	3.0158681305e-03f,
-	2.9847790300e-03f,
-	2.9533427021e-03f,
-	2.9215615340e-03f,
-	2.8894379492e-03f,
-	2.8569744079e-03f,
-	2.8241734065e-03f,
-	2.7910374774e-03f,
-	2.7575691888e-03f,
-	2.7237711447e-03f,
-	2.6896459846e-03f,
-	2.6551963831e-03f,
-	2.6204250501e-03f,
-	2.5853347303e-03f,
-	2.5499282032e-03f,
-	2.5142082824e-03f,
-	2.4781778162e-03f,
-	2.4418396865e-03f,
-	2.4051968095e-03f,
-	2.3682521344e-03f,
-	2.3310086442e-03f,
-	2.2934693549e-03f,
-	2.2556373153e-03f,
-	2.2175156067e-03f,
-	2.1791073432e-03f,
-	2.1404156707e-03f,
-	2.1014437671e-03f,
-	2.0621948420e-03f,
-	2.0226721362e-03f,
-	1.9828789219e-03f,
-	1.9428185019e-03f,
-	1.9024942097e-03f,
-	1.8619094091e-03f,
-	1.8210674941e-03f,
-	1.7799718882e-03f,
-	1.7386260445e-03f,
-	1.6970334454e-03f,
-	1.6551976020e-03f,
-	1.6131220543e-03f,
-	1.5708103705e-03f,
-	1.5282661467e-03f,
-	1.4854930069e-03f,
-	1.4424946025e-03f,
-	1.3992746120e-03f,
-	1.3558367408e-03f,
-	1.3121847208e-03f,
-	1.2683223099e-03f,
-	1.2242532920e-03f,
-	1.1799814767e-03f,
-	1.1355106985e-03f,
-	1.0908448172e-03f,
-	1.0459877169e-03f,
-	1.0009433060e-03f,
-	9.5571551678e-04f,
-	9.1030830516e-04f,
-	8.6472565025e-04f,
-	8.1897155405e-04f,
-	7.7305004110e-04f,
-	7.2696515811e-04f,
-	6.8072097366e-04f,
-	6.3432157780e-04f,
-	5.8777108171e-04f,
-	5.4107361733e-04f,
-	4.9423333703e-04f,
-	4.4725441320e-04f,
-	4.0014103792e-04f,
-	3.5289742258e-04f,
-	3.0552779752e-04f,
-	2.5803641161e-04f,
-	2.1042753193e-04f,
-	1.6270544338e-04f,
-	1.1487444827e-04f,
-	6.6938865965e-05f,
-	1.8903032494e-05f,
-	-2.9228699843e-05f,
-	-7.7451962859e-05f,
-	-1.2576237287e-04f,
-	-1.7415553110e-04f,
-	-2.2262702405e-04f,
-	-2.7117242394e-04f,
-	-3.1978728905e-04f,
-	-3.6846716417e-04f,
-	-4.1720758098e-04f,
-	-4.6600405847e-04f,
-	-5.1485210333e-04f,
-	-5.6374721036e-04f,
-	-6.1268486290e-04f,
-	-6.6166053322e-04f,
-	-7.1066968293e-04f,
-	-7.5970776344e-04f,
-	-8.0877021632e-04f,
-	-8.5785247375e-04f,
-	-9.0694995892e-04f,
-	-9.5605808650e-04f,
-	-1.0051722630e-03f,
-	-1.0542878872e-03f,
-	-1.1034003506e-03f,
-	-1.1525050380e-03f,
-	-1.2015973276e-03f,
-	-1.2506725915e-03f,
-	-1.2997261966e-03f,
-	-1.3487535043e-03f,
-	-1.3977498715e-03f,
-	-1.4467106508e-03f,
-	-1.4956311910e-03f,
-	-1.5445068373e-03f,
-	-1.5933329323e-03f,
-	-1.6421048158e-03f,
-	-1.6908178257e-03f,
-	-1.7394672980e-03f,
-	-1.7880485678e-03f,
-	-1.8365569694e-03f,
-	-1.8849878365e-03f,
-	-1.9333365033e-03f,
-	-1.9815983045e-03f,
-	-2.0297685755e-03f,
-	-2.0778426536e-03f,
-	-2.1258158777e-03f,
-	-2.1736835892e-03f,
-	-2.2214411324e-03f,
-	-2.2690838546e-03f,
-	-2.3166071069e-03f,
-	-2.3640062447e-03f,
-	-2.4112766278e-03f,
-	-2.4584136212e-03f,
-	-2.5054125951e-03f,
-	-2.5522689261e-03f,
-	-2.5989779967e-03f,
-	-2.6455351967e-03f,
-	-2.6919359228e-03f,
-	-2.7381755796e-03f,
-	-2.7842495800e-03f,
-	-2.8301533454e-03f,
-	-2.8758823063e-03f,
-	-2.9214319026e-03f,
-	-2.9667975845e-03f,
-	-3.0119748123e-03f,
-	-3.0569590575e-03f,
-	-3.1017458026e-03f,
-	-3.1463305421e-03f,
-	-3.1907087826e-03f,
-	-3.2348760435e-03f,
-	-3.2788278571e-03f,
-	-3.3225597694e-03f,
-	-3.3660673404e-03f,
-	-3.4093461445e-03f,
-	-3.4523917710e-03f,
-	-3.4951998246e-03f,
-	-3.5377659256e-03f,
-	-3.5800857108e-03f,
-	-3.6221548333e-03f,
-	-3.6639689636e-03f,
-	-3.7055237895e-03f,
-	-3.7468150169e-03f,
-	-3.7878383701e-03f,
-	-3.8285895923e-03f,
-	-3.8690644457e-03f,
-	-3.9092587126e-03f,
-	-3.9491681951e-03f,
-	-3.9887887161e-03f,
-	-4.0281161193e-03f,
-	-4.0671462701e-03f,
-	-4.1058750555e-03f,
-	-4.1442983848e-03f,
-	-4.1824121902e-03f,
-	-4.2202124269e-03f,
-	-4.2576950736e-03f,
-	-4.2948561330e-03f,
-	-4.3316916322e-03f,
-	-4.3681976231e-03f,
-	-4.4043701829e-03f,
-	-4.4402054142e-03f,
-	-4.4756994458e-03f,
-	-4.5108484331e-03f,
-	-4.5456485579e-03f,
-	-4.5800960297e-03f,
-	-4.6141870855e-03f,
-	-4.6479179903e-03f,
-	-4.6812850376e-03f,
-	-4.7142845498e-03f,
-	-4.7469128785e-03f,
-	-4.7791664050e-03f,
-	-4.8110415406e-03f,
-	-4.8425347271e-03f,
-	-4.8736424370e-03f,
-	-4.9043611740e-03f,
-	-4.9346874735e-03f,
-	-4.9646179027e-03f,
-	-4.9941490612e-03f,
-	-5.0232775814e-03f,
-	-5.0520001287e-03f,
-	-5.0803134019e-03f,
-	-5.1082141336e-03f,
-	-5.1356990907e-03f,
-	-5.1627650746e-03f,
-	-5.1894089216e-03f,
-	-5.2156275031e-03f,
-	-5.2414177263e-03f,
-	-5.2667765343e-03f,
-	-5.2917009065e-03f,
-	-5.3161878589e-03f,
-	-5.3402344446e-03f,
-	-5.3638377540e-03f,
-	-5.3869949150e-03f,
-	-5.4097030937e-03f,
-	-5.4319594944e-03f,
-	-5.4537613602e-03f,
-	-5.4751059731e-03f,
-	-5.4959906543e-03f,
-	-5.5164127646e-03f,
-	-5.5363697051e-03f,
-	-5.5558589166e-03f,
-	-5.5748778809e-03f,
-	-5.5934241203e-03f,
-	-5.6114951984e-03f,
-	-5.6290887204e-03f,
-	-5.6462023330e-03f,
-	-5.6628337249e-03f,
-	-5.6789806275e-03f,
-	-5.6946408142e-03f,
-	-5.7098121019e-03f,
-	-5.7244923502e-03f,
-	-5.7386794622e-03f,
-	-5.7523713850e-03f,
-	-5.7655661093e-03f,
-	-5.7782616702e-03f,
-	-5.7904561472e-03f,
-	-5.8021476645e-03f,
-	-5.8133343915e-03f,
-	-5.8240145425e-03f,
-	-5.8341863776e-03f,
-	-5.8438482022e-03f,
-	-5.8529983680e-03f,
-	-5.8616352728e-03f,
-	-5.8697573607e-03f,
-	-5.8773631224e-03f,
-	-5.8844510954e-03f,
-	-5.8910198645e-03f,
-	-5.8970680615e-03f,
-	-5.9025943658e-03f,
-	-5.9075975044e-03f,
-	-5.9120762521e-03f,
-	-5.9160294318e-03f,
-	-5.9194559149e-03f,
-	-5.9223546207e-03f,
-	-5.9247245176e-03f,
-	-5.9265646226e-03f,
-	-5.9278740015e-03f,
-	-5.9286517694e-03f,
-	-5.9288970907e-03f,
-	-5.9286091792e-03f,
-	-5.9277872982e-03f,
-	-5.9264307609e-03f,
-	-5.9245389304e-03f,
-	-5.9221112196e-03f,
-	-5.9191470917e-03f,
-	-5.9156460604e-03f,
-	-5.9116076896e-03f,
-	-5.9070315937e-03f,
-	-5.9019174380e-03f,
-	-5.8962649383e-03f,
-	-5.8900738615e-03f,
-	-5.8833440254e-03f,
-	-5.8760752989e-03f,
-	-5.8682676022e-03f,
-	-5.8599209066e-03f,
-	-5.8510352349e-03f,
-	-5.8416106612e-03f,
-	-5.8316473112e-03f,
-	-5.8211453623e-03f,
-	-5.8101050433e-03f,
-	-5.7985266350e-03f,
-	-5.7864104697e-03f,
-	-5.7737569317e-03f,
-	-5.7605664571e-03f,
-	-5.7468395341e-03f,
-	-5.7325767025e-03f,
-	-5.7177785544e-03f,
-	-5.7024457337e-03f,
-	-5.6865789365e-03f,
-	-5.6701789108e-03f,
-	-5.6532464569e-03f,
-	-5.6357824268e-03f,
-	-5.6177877250e-03f,
-	-5.5992633077e-03f,
-	-5.5802101835e-03f,
-	-5.5606294127e-03f,
-	-5.5405221080e-03f,
-	-5.5198894339e-03f,
-	-5.4987326070e-03f,
-	-5.4770528957e-03f,
-	-5.4548516204e-03f,
-	-5.4321301536e-03f,
-	-5.4088899194e-03f,
-	-5.3851323936e-03f,
-	-5.3608591040e-03f,
-	-5.3360716299e-03f,
-	-5.3107716023e-03f,
-	-5.2849607035e-03f,
-	-5.2586406677e-03f,
-	-5.2318132799e-03f,
-	-5.2044803769e-03f,
-	-5.1766438464e-03f,
-	-5.1483056273e-03f,
-	-5.1194677095e-03f,
-	-5.0901321338e-03f,
-	-5.0603009917e-03f,
-	-5.0299764254e-03f,
-	-4.9991606278e-03f,
-	-4.9678558419e-03f,
-	-4.9360643614e-03f,
-	-4.9037885297e-03f,
-	-4.8710307406e-03f,
-	-4.8377934376e-03f,
-	-4.8040791138e-03f,
-	-4.7698903120e-03f,
-	-4.7352296245e-03f,
-	-4.7000996926e-03f,
-	-4.6645032068e-03f,
-	-4.6284429064e-03f,
-	-4.5919215796e-03f,
-	-4.5549420627e-03f,
-	-4.5175072409e-03f,
-	-4.4796200471e-03f,
-	-4.4412834622e-03f,
-	-4.4025005151e-03f,
-	-4.3632742818e-03f,
-	-4.3236078860e-03f,
-	-4.2835044983e-03f,
-	-4.2429673360e-03f,
-	-4.2019996634e-03f,
-	-4.1606047910e-03f,
-	-4.1187860754e-03f,
-	-4.0765469191e-03f,
-	-4.0338907705e-03f,
-	-3.9908211232e-03f,
-	-3.9473415161e-03f,
-	-3.9034555328e-03f,
-	-3.8591668017e-03f,
-	-3.8144789956e-03f,
-	-3.7693958312e-03f,
-	-3.7239210691e-03f,
-	-3.6780585135e-03f,
-	-3.6318120116e-03f,
-	-3.5851854537e-03f,
-	-3.5381827728e-03f,
-	-3.4908079440e-03f,
-	-3.4430649846e-03f,
-	-3.3949579536e-03f,
-	-3.3464909513e-03f,
-	-3.2976681191e-03f,
-	-3.2484936392e-03f,
-	-3.1989717341e-03f,
-	-3.1491066665e-03f,
-	-3.0989027388e-03f,
-	-3.0483642928e-03f,
-	-2.9974957093e-03f,
-	-2.9463014078e-03f,
-	-2.8947858462e-03f,
-	-2.8429535204e-03f,
-	-2.7908089637e-03f,
-	-2.7383567470e-03f,
-	-2.6856014777e-03f,
-	-2.6325478000e-03f,
-	-2.5792003941e-03f,
-	-2.5255639758e-03f,
-	-2.4716432965e-03f,
-	-2.4174431424e-03f,
-	-2.3629683341e-03f,
-	-2.3082237267e-03f,
-	-2.2532142088e-03f,
-	-2.1979447023e-03f,
-	-2.1424201622e-03f,
-	-2.0866455759e-03f,
-	-2.0306259629e-03f,
-	-1.9743663744e-03f,
-	-1.9178718928e-03f,
-	-1.8611476312e-03f,
-	-1.8041987333e-03f,
-	-1.7470303726e-03f,
-	-1.6896477520e-03f,
-	-1.6320561035e-03f,
-	-1.5742606879e-03f,
-	-1.5162667939e-03f,
-	-1.4580797379e-03f,
-	-1.3997048636e-03f,
-	-1.3411475414e-03f,
-	-1.2824131681e-03f,
-	-1.2235071662e-03f,
-	-1.1644349837e-03f,
-	-1.1052020932e-03f,
-	-1.0458139921e-03f,
-	-9.8627620138e-04f,
-	-9.2659426560e-04f,
-	-8.6677375224e-04f,
-	-8.0682025123e-04f,
-	-7.4673937445e-04f,
-	-6.8653675526e-04f,
-	-6.2621804796e-04f,
-	-5.6578892731e-04f,
-	-5.0525508804e-04f,
-	-4.4462224430e-04f,
-	-3.8389612920e-04f,
-	-3.2308249424e-04f,
-	-2.6218710883e-04f,
-	-2.0121575979e-04f,
-	-1.4017425077e-04f,
-	-7.9068401777e-05f,
-	-1.7904048620e-05f,
-	4.3312957602e-05f,
-	1.0457675104e-04f,
-	1.6588145162e-04f,
-	2.2722116560e-04f,
-	2.8858998608e-04f,
-	3.4998199355e-04f,
-	4.1139125645e-04f,
-	4.7281183169e-04f,
-	5.3423776521e-04f,
-	5.9566309253e-04f,
-	6.5708183930e-04f,
-	7.1848802183e-04f,
-	7.7987564766e-04f,
-	8.4123871615e-04f,
-	9.0257121897e-04f,
-	9.6386714070e-04f,
-	1.0251204594e-03f,
-	1.0863251471e-03f,
-	1.1474751706e-03f,
-	1.2085644915e-03f,
-	1.2695870675e-03f,
-	1.3305368525e-03f,
-	1.3914077970e-03f,
-	1.4521938492e-03f,
-	1.5128889552e-03f,
-	1.5734870598e-03f,
-	1.6339821067e-03f,
-	1.6943680396e-03f,
-	1.7546388024e-03f,
-	1.8147883397e-03f,
-	1.8748105978e-03f,
-	1.9346995249e-03f,
-	1.9944490719e-03f,
-	2.0540531928e-03f,
-	2.1135058455e-03f,
-	2.1728009922e-03f,
-	2.2319326000e-03f,
-	2.2908946416e-03f,
-	2.3496810957e-03f,
-	2.4082859478e-03f,
-	2.4667031907e-03f,
-	2.5249268249e-03f,
-	2.5829508595e-03f,
-	2.6407693126e-03f,
-	2.6983762119e-03f,
-	2.7557655953e-03f,
-	2.8129315115e-03f,
-	2.8698680205e-03f,
-	2.9265691945e-03f,
-	2.9830291180e-03f,
-	3.0392418887e-03f,
-	3.0952016180e-03f,
-	3.1509024318e-03f,
-	3.2063384705e-03f,
-	3.2615038903e-03f,
-	3.3163928634e-03f,
-	3.3709995785e-03f,
-	3.4253182416e-03f,
-	3.4793430766e-03f,
-	3.5330683257e-03f,
-	3.5864882500e-03f,
-	3.6395971302e-03f,
-	3.6923892672e-03f,
-	3.7448589824e-03f,
-	3.7970006188e-03f,
-	3.8488085410e-03f,
-	3.9002771361e-03f,
-	3.9514008142e-03f,
-	4.0021740090e-03f,
-	4.0525911784e-03f,
-	4.1026468049e-03f,
-	4.1523353964e-03f,
-	4.2016514866e-03f,
-	4.2505896357e-03f,
-	4.2991444307e-03f,
-	4.3473104865e-03f,
-	4.3950824457e-03f,
-	4.4424549800e-03f,
-	4.4894227899e-03f,
-	4.5359806061e-03f,
-	4.5821231894e-03f,
-	4.6278453315e-03f,
-	4.6731418557e-03f,
-	4.7180076172e-03f,
-	4.7624375038e-03f,
-	4.8064264362e-03f,
-	4.8499693691e-03f,
-	4.8930612911e-03f,
-	4.9356972255e-03f,
-	4.9778722310e-03f,
-	5.0195814021e-03f,
-	5.0608198694e-03f,
-	5.1015828005e-03f,
-	5.1418654005e-03f,
-	5.1816629121e-03f,
-	5.2209706167e-03f,
-	5.2597838344e-03f,
-	5.2980979249e-03f,
-	5.3359082878e-03f,
-	5.3732103632e-03f,
-	5.4099996322e-03f,
-	5.4462716173e-03f,
-	5.4820218831e-03f,
-	5.5172460366e-03f,
-	5.5519397279e-03f,
-	5.5860986504e-03f,
-	5.6197185416e-03f,
-	5.6527951833e-03f,
-	5.6853244025e-03f,
-	5.7173020712e-03f,
-	5.7487241077e-03f,
-	5.7795864764e-03f,
-	5.8098851886e-03f,
-	5.8396163029e-03f,
-	5.8687759256e-03f,
-	5.8973602112e-03f,
-	5.9253653630e-03f,
-	5.9527876332e-03f,
-	5.9796233238e-03f,
-	6.0058687865e-03f,
-	6.0315204238e-03f,
-	6.0565746888e-03f,
-	6.0810280859e-03f,
-	6.1048771714e-03f,
-	6.1281185537e-03f,
-	6.1507488936e-03f,
-	6.1727649052e-03f,
-	6.1941633558e-03f,
-	6.2149410664e-03f,
-	6.2350949124e-03f,
-	6.2546218238e-03f,
-	6.2735187854e-03f,
-	6.2917828375e-03f,
-	6.3094110763e-03f,
-	6.3264006539e-03f,
-	6.3427487790e-03f,
-	6.3584527173e-03f,
-	6.3735097916e-03f,
-	6.3879173825e-03f,
-	6.4016729283e-03f,
-	6.4147739258e-03f,
-	6.4272179305e-03f,
-	6.4390025568e-03f,
-	6.4501254784e-03f,
-	6.4605844290e-03f,
-	6.4703772018e-03f,
-	6.4795016508e-03f,
-	6.4879556902e-03f,
-	6.4957372956e-03f,
-	6.5028445035e-03f,
-	6.5092754121e-03f,
-	6.5150281814e-03f,
-	6.5201010337e-03f,
-	6.5244922535e-03f,
-	6.5282001881e-03f,
-	6.5312232479e-03f,
-	6.5335599063e-03f,
-	6.5352087005e-03f,
-	6.5361682312e-03f,
-	6.5364371634e-03f,
-	6.5360142261e-03f,
-	6.5348982129e-03f,
-	6.5330879823e-03f,
-	6.5305824576e-03f,
-	6.5273806274e-03f,
-	6.5234815455e-03f,
-	6.5188843317e-03f,
-	6.5135881714e-03f,
-	6.5075923161e-03f,
-	6.5008960834e-03f,
-	6.4934988576e-03f,
-	6.4854000894e-03f,
-	6.4765992964e-03f,
-	6.4670960630e-03f,
-	6.4568900409e-03f,
-	6.4459809491e-03f,
-	6.4343685738e-03f,
-	6.4220527690e-03f,
-	6.4090334564e-03f,
-	6.3953106255e-03f,
-	6.3808843338e-03f,
-	6.3657547071e-03f,
-	6.3499219391e-03f,
-	6.3333862921e-03f,
-	6.3161480968e-03f,
-	6.2982077524e-03f,
-	6.2795657268e-03f,
-	6.2602225565e-03f,
-	6.2401788470e-03f,
-	6.2194352726e-03f,
-	6.1979925764e-03f,
-	6.1758515707e-03f,
-	6.1530131369e-03f,
-	6.1294782253e-03f,
-	6.1052478556e-03f,
-	6.0803231164e-03f,
-	6.0547051657e-03f,
-	6.0283952308e-03f,
-	6.0013946081e-03f,
-	5.9737046634e-03f,
-	5.9453268317e-03f,
-	5.9162626172e-03f,
-	5.8865135934e-03f,
-	5.8560814033e-03f,
-	5.8249677586e-03f,
-	5.7931744406e-03f,
-	5.7607032997e-03f,
-	5.7275562551e-03f,
-	5.6937352955e-03f,
-	5.6592424784e-03f,
-	5.6240799300e-03f,
-	5.5882498459e-03f,
-	5.5517544899e-03f,
-	5.5145961951e-03f,
-	5.4767773628e-03f,
-	5.4383004630e-03f,
-	5.3991680340e-03f,
-	5.3593826827e-03f,
-	5.3189470840e-03f,
-	5.2778639808e-03f,
-	5.2361361842e-03f,
-	5.1937665729e-03f,
-	5.1507580934e-03f,
-	5.1071137598e-03f,
-	5.0628366533e-03f,
-	5.0179299227e-03f,
-	4.9723967835e-03f,
-	4.9262405183e-03f,
-	4.8794644763e-03f,
-	4.8320720732e-03f,
-	4.7840667910e-03f,
-	4.7354521780e-03f,
-	4.6862318481e-03f,
-	4.6364094810e-03f,
-	4.5859888220e-03f,
-	4.5349736816e-03f,
-	4.4833679351e-03f,
-	4.4311755229e-03f,
-	4.3784004496e-03f,
-	4.3250467842e-03f,
-	4.2711186598e-03f,
-	4.2166202732e-03f,
-	4.1615558846e-03f,
-	4.1059298174e-03f,
-	4.0497464579e-03f,
-	3.9930102551e-03f,
-	3.9357257202e-03f,
-	3.8778974266e-03f,
-	3.8195300091e-03f,
-	3.7606281642e-03f,
-	3.7011966493e-03f,
-	3.6412402824e-03f,
-	3.5807639422e-03f,
-	3.5197725673e-03f,
-	3.4582711558e-03f,
-	3.3962647654e-03f,
-	3.3337585128e-03f,
-	3.2707575732e-03f,
-	3.2072671800e-03f,
-	3.1432926246e-03f,
-	3.0788392557e-03f,
-	3.0139124793e-03f,
-	2.9485177580e-03f,
-	2.8826606105e-03f,
-	2.8163466117e-03f,
-	2.7495813916e-03f,
-	2.6823706356e-03f,
-	2.6147200834e-03f,
-	2.5466355290e-03f,
-	2.4781228200e-03f,
-	2.4091878576e-03f,
-	2.3398365955e-03f,
-	2.2700750398e-03f,
-	2.1999092488e-03f,
-	2.1293453319e-03f,
-	2.0583894496e-03f,
-	1.9870478129e-03f,
-	1.9153266828e-03f,
-	1.8432323698e-03f,
-	1.7707712333e-03f,
-	1.6979496814e-03f,
-	1.6247741700e-03f,
-	1.5512512026e-03f,
-	1.4773873297e-03f,
-	1.4031891480e-03f,
-	1.3286633004e-03f,
-	1.2538164751e-03f,
-	1.1786554049e-03f,
-	1.1031868671e-03f,
-	1.0274176828e-03f,
-	9.5135471612e-04f,
-	8.7500487378e-04f,
-	7.9837510462e-04f,
-	7.2147239897e-04f,
-	6.4430378800e-04f,
-	5.6687634325e-04f,
-	4.8919717595e-04f,
-	4.1127343650e-04f,
-	3.3311231383e-04f,
-	2.5472103479e-04f,
-	1.7610686362e-04f,
-	9.7277101231e-05f,
-	1.8239084681e-05f,
-	-6.0999813496e-05f,
-	-1.4043218589e-04f,
-	-2.2005059087e-04f,
-	-2.9984755316e-04f,
-	-3.7981556457e-04f,
-	-4.5994708453e-04f,
-	-5.4023454082e-04f,
-	-6.2067033018e-04f,
-	-7.0124681898e-04f,
-	-7.8195634386e-04f,
-	-8.6279121241e-04f,
-	-9.4374370384e-04f,
-	-1.0248060696e-03f,
-	-1.1059705342e-03f,
-	-1.1872292956e-03f,
-	-1.2685745263e-03f,
-	-1.3499983737e-03f,
-	-1.4314929607e-03f,
-	-1.5130503870e-03f,
-	-1.5946627289e-03f,
-	-1.6763220410e-03f,
-	-1.7580203559e-03f,
-	-1.8397496857e-03f,
-	-1.9215020223e-03f,
-	-2.0032693382e-03f,
-	-2.0850435873e-03f,
-	-2.1668167054e-03f,
-	-2.2485806113e-03f,
-	-2.3303272072e-03f,
-	-2.4120483794e-03f,
-	-2.4937359993e-03f,
-	-2.5753819241e-03f,
-	-2.6569779972e-03f,
-	-2.7385160493e-03f,
-	-2.8199878991e-03f,
-	-2.9013853538e-03f,
-	-2.9827002100e-03f,
-	-3.0639242547e-03f,
-	-3.1450492656e-03f,
-	-3.2260670122e-03f,
-	-3.3069692563e-03f,
-	-3.3877477530e-03f,
-	-3.4683942514e-03f,
-	-3.5489004950e-03f,
-	-3.6292582232e-03f,
-	-3.7094591714e-03f,
-	-3.7894950721e-03f,
-	-3.8693576556e-03f,
-	-3.9490386507e-03f,
-	-4.0285297856e-03f,
-	-4.1078227886e-03f,
-	-4.1869093889e-03f,
-	-4.2657813174e-03f,
-	-4.3444303074e-03f,
-	-4.4228480955e-03f,
-	-4.5010264223e-03f,
-	-4.5789570332e-03f,
-	-4.6566316792e-03f,
-	-4.7340421177e-03f,
-	-4.8111801133e-03f,
-	-4.8880374384e-03f,
-	-4.9646058744e-03f,
-	-5.0408772121e-03f,
-	-5.1168432525e-03f,
-	-5.1924958081e-03f,
-	-5.2678267029e-03f,
-	-5.3428277739e-03f,
-	-5.4174908715e-03f,
-	-5.4918078604e-03f,
-	-5.5657706203e-03f,
-	-5.6393710470e-03f,
-	-5.7126010529e-03f,
-	-5.7854525677e-03f,
-	-5.8579175396e-03f,
-	-5.9299879357e-03f,
-	-6.0016557432e-03f,
-	-6.0729129696e-03f,
-	-6.1437516442e-03f,
-	-6.2141638183e-03f,
-	-6.2841415663e-03f,
-	-6.3536769865e-03f,
-	-6.4227622018e-03f,
-	-6.4913893603e-03f,
-	-6.5595506366e-03f,
-	-6.6272382321e-03f,
-	-6.6944443760e-03f,
-	-6.7611613263e-03f,
-	-6.8273813699e-03f,
-	-6.8930968242e-03f,
-	-6.9583000375e-03f,
-	-7.0229833895e-03f,
-	-7.0871392928e-03f,
-	-7.1507601930e-03f,
-	-7.2138385698e-03f,
-	-7.2763669377e-03f,
-	-7.3383378469e-03f,
-	-7.3997438838e-03f,
-	-7.4605776722e-03f,
-	-7.5208318735e-03f,
-	-7.5804991880e-03f,
-	-7.6395723555e-03f,
-	-7.6980441557e-03f,
-	-7.7559074096e-03f,
-	-7.8131549798e-03f,
-	-7.8697797713e-03f,
-	-7.9257747325e-03f,
-	-7.9811328558e-03f,
-	-8.0358471781e-03f,
-	-8.0899107822e-03f,
-	-8.1433167968e-03f,
-	-8.1960583977e-03f,
-	-8.2481288084e-03f,
-	-8.2995213008e-03f,
-	-8.3502291963e-03f,
-	-8.4002458658e-03f,
-	-8.4495647310e-03f,
-	-8.4981792650e-03f,
-	-8.5460829931e-03f,
-	-8.5932694932e-03f,
-	-8.6397323968e-03f,
-	-8.6854653897e-03f,
-	-8.7304622125e-03f,
-	-8.7747166615e-03f,
-	-8.8182225895e-03f,
-	-8.8609739060e-03f,
-	-8.9029645786e-03f,
-	-8.9441886329e-03f,
-	-8.9846401540e-03f,
-	-9.0243132866e-03f,
-	-9.0632022357e-03f,
-	-9.1013012678e-03f,
-	-9.1386047108e-03f,
-	-9.1751069552e-03f,
-	-9.2108024547e-03f,
-	-9.2456857268e-03f,
-	-9.2797513531e-03f,
-	-9.3129939805e-03f,
-	-9.3454083218e-03f,
-	-9.3769891556e-03f,
-	-9.4077313279e-03f,
-	-9.4376297522e-03f,
-	-9.4666794100e-03f,
-	-9.4948753520e-03f,
-	-9.5222126979e-03f,
-	-9.5486866379e-03f,
-	-9.5742924324e-03f,
-	-9.5990254133e-03f,
-	-9.6228809843e-03f,
-	-9.6458546214e-03f,
-	-9.6679418737e-03f,
-	-9.6891383638e-03f,
-	-9.7094397885e-03f,
-	-9.7288419191e-03f,
-	-9.7473406023e-03f,
-	-9.7649317607e-03f,
-	-9.7816113930e-03f,
-	-9.7973755748e-03f,
-	-9.8122204593e-03f,
-	-9.8261422775e-03f,
-	-9.8391373389e-03f,
-	-9.8512020318e-03f,
-	-9.8623328243e-03f,
-	-9.8725262641e-03f,
-	-9.8817789797e-03f,
-	-9.8900876803e-03f,
-	-9.8974491568e-03f,
-	-9.9038602818e-03f,
-	-9.9093180104e-03f,
-	-9.9138193805e-03f,
-	-9.9173615134e-03f,
-	-9.9199416139e-03f,
-	-9.9215569713e-03f,
-	-9.9222049593e-03f,
-	-9.9218830369e-03f,
-	-9.9205887483e-03f,
-	-9.9183197239e-03f,
-	-9.9150736800e-03f,
-	-9.9108484201e-03f,
-	-9.9056418343e-03f,
-	-9.8994519006e-03f,
-	-9.8922766846e-03f,
-	-9.8841143402e-03f,
-	-9.8749631098e-03f,
-	-9.8648213251e-03f,
-	-9.8536874066e-03f,
-	-9.8415598649e-03f,
-	-9.8284373002e-03f,
-	-9.8143184032e-03f,
-	-9.7992019553e-03f,
-	-9.7830868285e-03f,
-	-9.7659719865e-03f,
-	-9.7478564842e-03f,
-	-9.7287394683e-03f,
-	-9.7086201779e-03f,
-	-9.6874979440e-03f,
-	-9.6653721907e-03f,
-	-9.6422424347e-03f,
-	-9.6181082860e-03f,
-	-9.5929694477e-03f,
-	-9.5668257170e-03f,
-	-9.5396769843e-03f,
-	-9.5115232347e-03f,
-	-9.4823645470e-03f,
-	-9.4522010948e-03f,
-	-9.4210331461e-03f,
-	-9.3888610640e-03f,
-	-9.3556853064e-03f,
-	-9.3215064264e-03f,
-	-9.2863250724e-03f,
-	-9.2501419883e-03f,
-	-9.2129580137e-03f,
-	-9.1747740837e-03f,
-	-9.1355912295e-03f,
-	-9.0954105782e-03f,
-	-9.0542333529e-03f,
-	-9.0120608730e-03f,
-	-8.9688945541e-03f,
-	-8.9247359082e-03f,
-	-8.8795865436e-03f,
-	-8.8334481653e-03f,
-	-8.7863225746e-03f,
-	-8.7382116695e-03f,
-	-8.6891174446e-03f,
-	-8.6390419911e-03f,
-	-8.5879874970e-03f,
-	-8.5359562468e-03f,
-	-8.4829506217e-03f,
-	-8.4289730997e-03f,
-	-8.3740262553e-03f,
-	-8.3181127597e-03f,
-	-8.2612353806e-03f,
-	-8.2033969822e-03f,
-	-8.1446005255e-03f,
-	-8.0848490675e-03f,
-	-8.0241457618e-03f,
-	-7.9624938582e-03f,
-	-7.8998967027e-03f,
-	-7.8363577375e-03f,
-	-7.7718805004e-03f,
-	-7.7064686256e-03f,
-	-7.6401258426e-03f,
-	-7.5728559766e-03f,
-	-7.5046629484e-03f,
-	-7.4355507740e-03f,
-	-7.3655235645e-03f,
-	-7.2945855260e-03f,
-	-7.2227409595e-03f,
-	-7.1499942603e-03f,
-	-7.0763499185e-03f,
-	-7.0018125181e-03f,
-	-6.9263867371e-03f,
-	-6.8500773475e-03f,
-	-6.7728892144e-03f,
-	-6.6948272966e-03f,
-	-6.6158966455e-03f,
-	-6.5361024056e-03f,
-	-6.4554498138e-03f,
-	-6.3739441991e-03f,
-	-6.2915909823e-03f,
-	-6.2083956763e-03f,
-	-6.1243638846e-03f,
-	-6.0395013024e-03f,
-	-5.9538137150e-03f,
-	-5.8673069984e-03f,
-	-5.7799871184e-03f,
-	-5.6918601304e-03f,
-	-5.6029321792e-03f,
-	-5.5132094984e-03f,
-	-5.4226984101e-03f,
-	-5.3314053246e-03f,
-	-5.2393367399e-03f,
-	-5.1464992414e-03f,
-	-5.0528995012e-03f,
-	-4.9585442780e-03f,
-	-4.8634404166e-03f,
-	-4.7675948473e-03f,
-	-4.6710145856e-03f,
-	-4.5737067317e-03f,
-	-4.4756784700e-03f,
-	-4.3769370687e-03f,
-	-4.2774898791e-03f,
-	-4.1773443354e-03f,
-	-4.0765079540e-03f,
-	-3.9749883332e-03f,
-	-3.8727931522e-03f,
-	-3.7699301711e-03f,
-	-3.6664072303e-03f,
-	-3.5622322494e-03f,
-	-3.4574132274e-03f,
-	-3.3519582417e-03f,
-	-3.2458754475e-03f,
-	-3.1391730774e-03f,
-	-3.0318594408e-03f,
-	-2.9239429232e-03f,
-	-2.8154319856e-03f,
-	-2.7063351640e-03f,
-	-2.5966610685e-03f,
-	-2.4864183831e-03f,
-	-2.3756158648e-03f,
-	-2.2642623429e-03f,
-	-2.1523667184e-03f,
-	-2.0399379635e-03f,
-	-1.9269851205e-03f,
-	-1.8135173019e-03f,
-	-1.6995436887e-03f,
-	-1.5850735306e-03f,
-	-1.4701161447e-03f,
-	-1.3546809151e-03f,
-	-1.2387772921e-03f,
-	-1.1224147916e-03f,
-	-1.0056029939e-03f,
-	-8.8835154366e-04f,
-	-7.7067014849e-04f,
-	-6.5256857866e-04f,
-	-5.3405666610e-04f,
-	-4.1514430372e-04f,
-	-2.9584144458e-04f,
-	-1.7615810113e-04f,
-	-5.6104344430e-05f,
-	6.4309696692e-05f,
-	1.8507383641e-04f,
-	3.0617783272e-04f,
-	4.2761138828e-04f,
-	5.4936415122e-04f,
-	6.7142571600e-04f,
-	7.9378562422e-04f,
-	9.1643336549e-04f,
-	1.0393583783e-03f,
-	1.1625500508e-03f,
-	1.2859977218e-03f,
-	1.4096906817e-03f,
-	1.5336181728e-03f,
-	1.6577693913e-03f,
-	1.7821334869e-03f,
-	1.9066995647e-03f,
-	2.0314566857e-03f,
-	2.1563938677e-03f,
-	2.2815000863e-03f,
-	2.4067642756e-03f,
-	2.5321753297e-03f,
-	2.6577221029e-03f,
-	2.7833934114e-03f,
-	2.9091780334e-03f,
-	3.0350647108e-03f,
-	3.1610421498e-03f,
-	3.2870990220e-03f,
-	3.4132239651e-03f,
-	3.5394055844e-03f,
-	3.6656324531e-03f,
-	3.7918931138e-03f,
-	3.9181760795e-03f,
-	4.0444698342e-03f,
-	4.1707628342e-03f,
-	4.2970435090e-03f,
-	4.4233002624e-03f,
-	4.5495214735e-03f,
-	4.6756954977e-03f,
-	4.8018106674e-03f,
-	4.9278552938e-03f,
-	5.0538176672e-03f,
-	5.1796860582e-03f,
-	5.3054487190e-03f,
-	5.4310938844e-03f,
-	5.5566097726e-03f,
-	5.6819845863e-03f,
-	5.8072065139e-03f,
-	5.9322637307e-03f,
-	6.0571443996e-03f,
-	6.1818366724e-03f,
-	6.3063286907e-03f,
-	6.4306085873e-03f,
-	6.5546644868e-03f,
-	6.6784845073e-03f,
-	6.8020567607e-03f,
-	6.9253693546e-03f,
-	7.0484103928e-03f,
-	7.1711679767e-03f,
-	7.2936302063e-03f,
-	7.4157851812e-03f,
-	7.5376210020e-03f,
-	7.6591257709e-03f,
-	7.7802875934e-03f,
-	7.9010945790e-03f,
-	8.0215348424e-03f,
-	8.1415965048e-03f,
-	8.2612676947e-03f,
-	8.3805365491e-03f,
-	8.4993912150e-03f,
-	8.6178198500e-03f,
-	8.7358106236e-03f,
-	8.8533517185e-03f,
-	8.9704313315e-03f,
-	9.0870376747e-03f,
-	9.2031589768e-03f,
-	9.3187834838e-03f,
-	9.4338994606e-03f,
-	9.5484951920e-03f,
-	9.6625589835e-03f,
-	9.7760791628e-03f,
-	9.8890440810e-03f,
-	1.0001442113e-02f,
-	1.0113261661e-02f,
-	1.0224491150e-02f,
-	1.0335119037e-02f,
-	1.0445133806e-02f,
-	1.0554523971e-02f,
-	1.0663278077e-02f,
-	1.0771384702e-02f,
-	1.0878832456e-02f,
-	1.0985609986e-02f,
-	1.1091705973e-02f,
-	1.1197109134e-02f,
-	1.1301808227e-02f,
-	1.1405792045e-02f,
-	1.1509049426e-02f,
-	1.1611569244e-02f,
-	1.1713340420e-02f,
-	1.1814351917e-02f,
-	1.1914592742e-02f,
-	1.2014051949e-02f,
-	1.2112718638e-02f,
-	1.2210581958e-02f,
-	1.2307631107e-02f,
-	1.2403855332e-02f,
-	1.2499243934e-02f,
-	1.2593786264e-02f,
-	1.2687471729e-02f,
-	1.2780289790e-02f,
-	1.2872229961e-02f,
-	1.2963281819e-02f,
-	1.3053434993e-02f,
-	1.3142679176e-02f,
-	1.3231004117e-02f,
-	1.3318399631e-02f,
-	1.3404855591e-02f,
-	1.3490361937e-02f,
-	1.3574908672e-02f,
-	1.3658485865e-02f,
-	1.3741083652e-02f,
-	1.3822692237e-02f,
-	1.3903301892e-02f,
-	1.3982902960e-02f,
-	1.4061485856e-02f,
-	1.4139041065e-02f,
-	1.4215559146e-02f,
-	1.4291030733e-02f,
-	1.4365446535e-02f,
-	1.4438797337e-02f,
-	1.4511074001e-02f,
-	1.4582267468e-02f,
-	1.4652368760e-02f,
-	1.4721368976e-02f,
-	1.4789259300e-02f,
-	1.4856030995e-02f,
-	1.4921675411e-02f,
-	1.4986183981e-02f,
-	1.5049548222e-02f,
-	1.5111759740e-02f,
-	1.5172810227e-02f,
-	1.5232691464e-02f,
-	1.5291395322e-02f,
-	1.5348913762e-02f,
-	1.5405238835e-02f,
-	1.5460362687e-02f,
-	1.5514277554e-02f,
-	1.5566975770e-02f,
-	1.5618449762e-02f,
-	1.5668692053e-02f,
-	1.5717695263e-02f,
-	1.5765452112e-02f,
-	1.5811955417e-02f,
-	1.5857198094e-02f,
-	1.5901173162e-02f,
-	1.5943873741e-02f,
-	1.5985293051e-02f,
-	1.6025424420e-02f,
-	1.6064261276e-02f,
-	1.6101797154e-02f,
-	1.6138025694e-02f,
-	1.6172940645e-02f,
-	1.6206535861e-02f,
-	1.6238805307e-02f,
-	1.6269743054e-02f,
-	1.6299343286e-02f,
-	1.6327600297e-02f,
-	1.6354508493e-02f,
-	1.6380062393e-02f,
-	1.6404256627e-02f,
-	1.6427085941e-02f,
-	1.6448545197e-02f,
-	1.6468629371e-02f,
-	1.6487333555e-02f,
-	1.6504652959e-02f,
-	1.6520582911e-02f,
-	1.6535118858e-02f,
-	1.6548256364e-02f,
-	1.6559991115e-02f,
-	1.6570318919e-02f,
-	1.6579235703e-02f,
-	1.6586737516e-02f,
-	1.6592820532e-02f,
-	1.6597481046e-02f,
-	1.6600715479e-02f,
-	1.6602520376e-02f,
-	1.6602892407e-02f,
-	1.6601828369e-02f,
-	1.6599325184e-02f,
-	1.6595379903e-02f,
-	1.6589989703e-02f,
-	1.6583151891e-02f,
-	1.6574863902e-02f,
-	1.6565123301e-02f,
-	1.6553927782e-02f,
-	1.6541275172e-02f,
-	1.6527163427e-02f,
-	1.6511590634e-02f,
-	1.6494555016e-02f,
-	1.6476054924e-02f,
-	1.6456088846e-02f,
-	1.6434655400e-02f,
-	1.6411753342e-02f,
-	1.6387381560e-02f,
-	1.6361539077e-02f,
-	1.6334225053e-02f,
-	1.6305438783e-02f,
-	1.6275179698e-02f,
-	1.6243447366e-02f,
-	1.6210241493e-02f,
-	1.6175561920e-02f,
-	1.6139408628e-02f,
-	1.6101781736e-02f,
-	1.6062681501e-02f,
-	1.6022108319e-02f,
-	1.5980062724e-02f,
-	1.5936545392e-02f,
-	1.5891557136e-02f,
-	1.5845098912e-02f,
-	1.5797171814e-02f,
-	1.5747777078e-02f,
-	1.5696916079e-02f,
-	1.5644590335e-02f,
-	1.5590801504e-02f,
-	1.5535551388e-02f,
-	1.5478841927e-02f,
-	1.5420675205e-02f,
-	1.5361053449e-02f,
-	1.5299979026e-02f,
-	1.5237454447e-02f,
-	1.5173482365e-02f,
-	1.5108065576e-02f,
-	1.5041207018e-02f,
-	1.4972909772e-02f,
-	1.4903177064e-02f,
-	1.4832012259e-02f,
-	1.4759418870e-02f,
-	1.4685400548e-02f,
-	1.4609961092e-02f,
-	1.4533104441e-02f,
-	1.4454834679e-02f,
-	1.4375156031e-02f,
-	1.4294072868e-02f,
-	1.4211589702e-02f,
-	1.4127711190e-02f,
-	1.4042442130e-02f,
-	1.3955787465e-02f,
-	1.3867752280e-02f,
-	1.3778341802e-02f,
-	1.3687561402e-02f,
-	1.3595416593e-02f,
-	1.3501913032e-02f,
-	1.3407056516e-02f,
-	1.3310852985e-02f,
-	1.3213308522e-02f,
-	1.3114429350e-02f,
-	1.3014221836e-02f,
-	1.2912692487e-02f,
-	1.2809847951e-02f,
-	1.2705695016e-02f,
-	1.2600240615e-02f,
-	1.2493491815e-02f,
-	1.2385455829e-02f,
-	1.2276140007e-02f,
-	1.2165551838e-02f,
-	1.2053698952e-02f,
-	1.1940589117e-02f,
-	1.1826230240e-02f,
-	1.1710630366e-02f,
-	1.1593797677e-02f,
-	1.1475740494e-02f,
-	1.1356467274e-02f,
-	1.1235986611e-02f,
-	1.1114307235e-02f,
-	1.0991438012e-02f,
-	1.0867387943e-02f,
-	1.0742166164e-02f,
-	1.0615781946e-02f,
-	1.0488244692e-02f,
-	1.0359563942e-02f,
-	1.0229749365e-02f,
-	1.0098810764e-02f,
-	9.9667580742e-03f,
-	9.8336013611e-03f,
-	9.6993508215e-03f,
-	9.5640167820e-03f,
-	9.4276096988e-03f,
-	9.2901401566e-03f,
-	9.1516188689e-03f,
-	9.0120566763e-03f,
-	8.8714645466e-03f,
-	8.7298535738e-03f,
-	8.5872349775e-03f,
-	8.4436201022e-03f,
-	8.2990204167e-03f,
-	8.1534475132e-03f,
-	8.0069131065e-03f,
-	7.8594290338e-03f,
-	7.7110072533e-03f,
-	7.5616598436e-03f,
-	7.4113990032e-03f,
-	7.2602370494e-03f,
-	7.1081864178e-03f,
-	6.9552596611e-03f,
-	6.8014694484e-03f,
-	6.6468285646e-03f,
-	6.4913499091e-03f,
-	6.3350464956e-03f,
-	6.1779314502e-03f,
-	6.0200180117e-03f,
-	5.8613195297e-03f,
-	5.7018494643e-03f,
-	5.5416213846e-03f,
-	5.3806489685e-03f,
-	5.2189460011e-03f,
-	5.0565263740e-03f,
-	4.8934040843e-03f,
-	4.7295932336e-03f,
-	4.5651080270e-03f,
-	4.3999627719e-03f,
-	4.2341718774e-03f,
-	4.0677498528e-03f,
-	3.9007113069e-03f,
-	3.7330709464e-03f,
-	3.5648435757e-03f,
-	3.3960440949e-03f,
-	3.2266874994e-03f,
-	3.0567888782e-03f,
-	2.8863634133e-03f,
-	2.7154263782e-03f,
-	2.5439931370e-03f,
-	2.3720791430e-03f,
-	2.1996999377e-03f,
-	2.0268711497e-03f,
-	1.8536084932e-03f,
-	1.6799277671e-03f,
-	1.5058448537e-03f,
-	1.3313757172e-03f,
-	1.1565364032e-03f,
-	9.8134303640e-04f,
-	8.0581182036e-04f,
-	6.2995903558e-04f,
-	4.5380103848e-04f,
-	2.7735426005e-04f,
-	1.0063520458e-04f,
-	-7.6339551662e-05f,
-	-2.5355336174e-04f,
-	-4.3098950939e-04f,
-	-6.0863121034e-04f,
-	-7.8646161366e-04f,
-	-9.6446380315e-04f,
-	-1.1426207986e-03f,
-	-1.3209155575e-03f,
-	-1.4993309757e-03f,
-	-1.6778498898e-03f,
-	-1.8564550776e-03f,
-	-2.0351292602e-03f,
-	-2.2138551031e-03f,
-	-2.3926152177e-03f,
-	-2.5713921627e-03f,
-	-2.7501684456e-03f,
-	-2.9289265242e-03f,
-	-3.1076488078e-03f,
-	-3.2863176591e-03f,
-	-3.4649153955e-03f,
-	-3.6434242903e-03f,
-	-3.8218265746e-03f,
-	-4.0001044387e-03f,
-	-4.1782400335e-03f,
-	-4.3562154721e-03f,
-	-4.5340128314e-03f,
-	-4.7116141535e-03f,
-	-4.8890014472e-03f,
-	-5.0661566899e-03f,
-	-5.2430618288e-03f,
-	-5.4196987825e-03f,
-	-5.5960494428e-03f,
-	-5.7720956760e-03f,
-	-5.9478193248e-03f,
-	-6.1232022096e-03f,
-	-6.2982261303e-03f,
-	-6.4728728677e-03f,
-	-6.6471241853e-03f,
-	-6.8209618311e-03f,
-	-6.9943675386e-03f,
-	-7.1673230291e-03f,
-	-7.3398100129e-03f,
-	-7.5118101911e-03f,
-	-7.6833052575e-03f,
-	-7.8542768997e-03f,
-	-8.0247068011e-03f,
-	-8.1945766428e-03f,
-	-8.3638681046e-03f,
-	-8.5325628674e-03f,
-	-8.7006426143e-03f,
-	-8.8680890328e-03f,
-	-9.0348838159e-03f,
-	-9.2010086644e-03f,
-	-9.3664452882e-03f,
-	-9.5311754080e-03f,
-	-9.6951807574e-03f,
-	-9.8584430839e-03f,
-	-1.0020944151e-02f,
-	-1.0182665742e-02f,
-	-1.0343589655e-02f,
-	-1.0503697715e-02f,
-	-1.0662971765e-02f,
-	-1.0821393676e-02f,
-	-1.0978945343e-02f,
-	-1.1135608692e-02f,
-	-1.1291365676e-02f,
-	-1.1446198281e-02f,
-	-1.1600088526e-02f,
-	-1.1753018465e-02f,
-	-1.1904970189e-02f,
-	-1.2055925827e-02f,
-	-1.2205867550e-02f,
-	-1.2354777569e-02f,
-	-1.2502638141e-02f,
-	-1.2649431566e-02f,
-	-1.2795140192e-02f,
-	-1.2939746419e-02f,
-	-1.3083232694e-02f,
-	-1.3225581519e-02f,
-	-1.3366775449e-02f,
-	-1.3506797096e-02f,
-	-1.3645629130e-02f,
-	-1.3783254279e-02f,
-	-1.3919655335e-02f,
-	-1.4054815151e-02f,
-	-1.4188716646e-02f,
-	-1.4321342805e-02f,
-	-1.4452676683e-02f,
-	-1.4582701402e-02f,
-	-1.4711400159e-02f,
-	-1.4838756225e-02f,
-	-1.4964752943e-02f,
-	-1.5089373736e-02f,
-	-1.5212602106e-02f,
-	-1.5334421634e-02f,
-	-1.5454815985e-02f,
-	-1.5573768908e-02f,
-	-1.5691264236e-02f,
-	-1.5807285894e-02f,
-	-1.5921817891e-02f,
-	-1.6034844332e-02f,
-	-1.6146349411e-02f,
-	-1.6256317419e-02f,
-	-1.6364732743e-02f,
-	-1.6471579868e-02f,
-	-1.6576843377e-02f,
-	-1.6680507958e-02f,
-	-1.6782558400e-02f,
-	-1.6882979596e-02f,
-	-1.6981756548e-02f,
-	-1.7078874365e-02f,
-	-1.7174318266e-02f,
-	-1.7268073582e-02f,
-	-1.7360125758e-02f,
-	-1.7450460352e-02f,
-	-1.7539063042e-02f,
-	-1.7625919621e-02f,
-	-1.7711016005e-02f,
-	-1.7794338230e-02f,
-	-1.7875872457e-02f,
-	-1.7955604970e-02f,
-	-1.8033522181e-02f,
-	-1.8109610630e-02f,
-	-1.8183856988e-02f,
-	-1.8256248057e-02f,
-	-1.8326770770e-02f,
-	-1.8395412200e-02f,
-	-1.8462159551e-02f,
-	-1.8527000168e-02f,
-	-1.8589921536e-02f,
-	-1.8650911280e-02f,
-	-1.8709957167e-02f,
-	-1.8767047111e-02f,
-	-1.8822169171e-02f,
-	-1.8875311552e-02f,
-	-1.8926462608e-02f,
-	-1.8975610848e-02f,
-	-1.9022744926e-02f,
-	-1.9067853657e-02f,
-	-1.9110926005e-02f,
-	-1.9151951095e-02f,
-	-1.9190918208e-02f,
-	-1.9227816785e-02f,
-	-1.9262636428e-02f,
-	-1.9295366903e-02f,
-	-1.9325998137e-02f,
-	-1.9354520226e-02f,
-	-1.9380923431e-02f,
-	-1.9405198182e-02f,
-	-1.9427335078e-02f,
-	-1.9447324889e-02f,
-	-1.9465158560e-02f,
-	-1.9480827208e-02f,
-	-1.9494322124e-02f,
-	-1.9505634779e-02f,
-	-1.9514756820e-02f,
-	-1.9521680074e-02f,
-	-1.9526396549e-02f,
-	-1.9528898434e-02f,
-	-1.9529178102e-02f,
-	-1.9527228112e-02f,
-	-1.9523041206e-02f,
-	-1.9516610317e-02f,
-	-1.9507928563e-02f,
-	-1.9496989254e-02f,
-	-1.9483785890e-02f,
-	-1.9468312164e-02f,
-	-1.9450561961e-02f,
-	-1.9430529363e-02f,
-	-1.9408208645e-02f,
-	-1.9383594281e-02f,
-	-1.9356680943e-02f,
-	-1.9327463501e-02f,
-	-1.9295937027e-02f,
-	-1.9262096793e-02f,
-	-1.9225938275e-02f,
-	-1.9187457153e-02f,
-	-1.9146649310e-02f,
-	-1.9103510836e-02f,
-	-1.9058038029e-02f,
-	-1.9010227392e-02f,
-	-1.8960075641e-02f,
-	-1.8907579698e-02f,
-	-1.8852736699e-02f,
-	-1.8795543991e-02f,
-	-1.8735999133e-02f,
-	-1.8674099899e-02f,
-	-1.8609844277e-02f,
-	-1.8543230473e-02f,
-	-1.8474256906e-02f,
-	-1.8402922215e-02f,
-	-1.8329225256e-02f,
-	-1.8253165106e-02f,
-	-1.8174741061e-02f,
-	-1.8093952638e-02f,
-	-1.8010799574e-02f,
-	-1.7925281832e-02f,
-	-1.7837399595e-02f,
-	-1.7747153273e-02f,
-	-1.7654543497e-02f,
-	-1.7559571128e-02f,
-	-1.7462237248e-02f,
-	-1.7362543171e-02f,
-	-1.7260490435e-02f,
-	-1.7156080807e-02f,
-	-1.7049316285e-02f,
-	-1.6940199092e-02f,
-	-1.6828731686e-02f,
-	-1.6714916752e-02f,
-	-1.6598757208e-02f,
-	-1.6480256202e-02f,
-	-1.6359417118e-02f,
-	-1.6236243568e-02f,
-	-1.6110739401e-02f,
-	-1.5982908698e-02f,
-	-1.5852755775e-02f,
-	-1.5720285181e-02f,
-	-1.5585501702e-02f,
-	-1.5448410359e-02f,
-	-1.5309016408e-02f,
-	-1.5167325344e-02f,
-	-1.5023342894e-02f,
-	-1.4877075025e-02f,
-	-1.4728527942e-02f,
-	-1.4577708084e-02f,
-	-1.4424622132e-02f,
-	-1.4269277002e-02f,
-	-1.4111679849e-02f,
-	-1.3951838068e-02f,
-	-1.3789759290e-02f,
-	-1.3625451386e-02f,
-	-1.3458922468e-02f,
-	-1.3290180884e-02f,
-	-1.3119235223e-02f,
-	-1.2946094313e-02f,
-	-1.2770767222e-02f,
-	-1.2593263256e-02f,
-	-1.2413591962e-02f,
-	-1.2231763126e-02f,
-	-1.2047786773e-02f,
-	-1.1861673169e-02f,
-	-1.1673432818e-02f,
-	-1.1483076464e-02f,
-	-1.1290615091e-02f,
-	-1.1096059920e-02f,
-	-1.0899422413e-02f,
-	-1.0700714271e-02f,
-	-1.0499947434e-02f,
-	-1.0297134078e-02f,
-	-1.0092286621e-02f,
-	-9.8854177161e-03f,
-	-9.6765402568e-03f,
-	-9.4656673727e-03f,
-	-9.2528124313e-03f,
-	-9.0379890369e-03f,
-	-8.8212110307e-03f,
-	-8.6024924902e-03f,
-	-8.3818477290e-03f,
-	-8.1592912962e-03f,
-	-7.9348379761e-03f,
-	-7.7085027878e-03f,
-	-7.4803009845e-03f,
-	-7.2502480536e-03f,
-	-7.0183597155e-03f,
-	-6.7846519234e-03f,
-	-6.5491408631e-03f,
-	-6.3118429516e-03f,
-	-6.0727748375e-03f,
-	-5.8319533996e-03f,
-	-5.5893957468e-03f,
-	-5.3451192170e-03f,
-	-5.0991413768e-03f,
-	-4.8514800209e-03f,
-	-4.6021531709e-03f,
-	-4.3511790749e-03f,
-	-4.0985762068e-03f,
-	-3.8443632653e-03f,
-	-3.5885591735e-03f,
-	-3.3311830774e-03f,
-	-3.0722543459e-03f,
-	-2.8117925692e-03f,
-	-2.5498175586e-03f,
-	-2.2863493448e-03f,
-	-2.0214081779e-03f,
-	-1.7550145256e-03f,
-	-1.4871890729e-03f,
-	-1.2179527207e-03f,
-	-9.4732658499e-04f,
-	-6.7533199574e-04f,
-	-4.0199049591e-04f,
-	-1.2732384036e-04f,
-	1.4864600525e-04f,
-	4.2589686556e-04f,
-	7.0440635664e-04f,
-	9.8415188714e-04f,
-	1.2651106595e-03f,
-	1.5472596709e-03f,
-	1.8305757151e-03f,
-	2.1150353829e-03f,
-	2.4006150638e-03f,
-	2.6872909473e-03f,
-	2.9750390242e-03f,
-	3.2638350877e-03f,
-	3.5536547349e-03f,
-	3.8444733682e-03f,
-	4.1362661966e-03f,
-	4.4290082371e-03f,
-	4.7226743160e-03f,
-	5.0172390708e-03f,
-	5.3126769510e-03f,
-	5.6089622201e-03f,
-	5.9060689569e-03f,
-	6.2039710570e-03f,
-	6.5026422344e-03f,
-	6.8020560229e-03f,
-	7.1021857781e-03f,
-	7.4030046785e-03f,
-	7.7044857273e-03f,
-	8.0066017543e-03f,
-	8.3093254171e-03f,
-	8.6126292032e-03f,
-	8.9164854314e-03f,
-	9.2208662537e-03f,
-	9.5257436569e-03f,
-	9.8310894644e-03f,
-	1.0136875338e-02f,
-	1.0443072780e-02f,
-	1.0749653134e-02f,
-	1.1056587589e-02f,
-	1.1363847177e-02f,
-	1.1671402780e-02f,
-	1.1979225129e-02f,
-	1.2287284805e-02f,
-	1.2595552244e-02f,
-	1.2903997736e-02f,
-	1.3212591429e-02f,
-	1.3521303329e-02f,
-	1.3830103305e-02f,
-	1.4138961088e-02f,
-	1.4447846274e-02f,
-	1.4756728326e-02f,
-	1.5065576578e-02f,
-	1.5374360234e-02f,
-	1.5683048372e-02f,
-	1.5991609946e-02f,
-	1.6300013786e-02f,
-	1.6608228604e-02f,
-	1.6916222994e-02f,
-	1.7223965433e-02f,
-	1.7531424285e-02f,
-	1.7838567804e-02f,
-	1.8145364133e-02f,
-	1.8451781309e-02f,
-	1.8757787265e-02f,
-	1.9063349831e-02f,
-	1.9368436739e-02f,
-	1.9673015620e-02f,
-	1.9977054012e-02f,
-	2.0280519361e-02f,
-	2.0583379019e-02f,
-	2.0885600255e-02f,
-	2.1187150246e-02f,
-	2.1487996092e-02f,
-	2.1788104806e-02f,
-	2.2087443328e-02f,
-	2.2385978519e-02f,
-	2.2683677165e-02f,
-	2.2980505985e-02f,
-	2.3276431626e-02f,
-	2.3571420671e-02f,
-	2.3865439638e-02f,
-	2.4158454985e-02f,
-	2.4450433111e-02f,
-	2.4741340359e-02f,
-	2.5031143020e-02f,
-	2.5319807333e-02f,
-	2.5607299488e-02f,
-	2.5893585631e-02f,
-	2.6178631866e-02f,
-	2.6462404255e-02f,
-	2.6744868823e-02f,
-	2.7025991559e-02f,
-	2.7305738423e-02f,
-	2.7584075342e-02f,
-	2.7860968219e-02f,
-	2.8136382930e-02f,
-	2.8410285331e-02f,
-	2.8682641260e-02f,
-	2.8953416540e-02f,
-	2.9222576977e-02f,
-	2.9490088370e-02f,
-	2.9755916509e-02f,
-	3.0020027180e-02f,
-	3.0282386167e-02f,
-	3.0542959254e-02f,
-	3.0801712229e-02f,
-	3.1058610886e-02f,
-	3.1313621030e-02f,
-	3.1566708475e-02f,
-	3.1817839052e-02f,
-	3.2066978611e-02f,
-	3.2314093021e-02f,
-	3.2559148174e-02f,
-	3.2802109989e-02f,
-	3.3042944416e-02f,
-	3.3281617435e-02f,
-	3.3518095063e-02f,
-	3.3752343353e-02f,
-	3.3984328402e-02f,
-	3.4214016347e-02f,
-	3.4441373376e-02f,
-	3.4666365724e-02f,
-	3.4888959679e-02f,
-	3.5109121586e-02f,
-	3.5326817848e-02f,
-	3.5542014930e-02f,
-	3.5754679361e-02f,
-	3.5964777737e-02f,
-	3.6172276728e-02f,
-	3.6377143072e-02f,
-	3.6579343589e-02f,
-	3.6778845175e-02f,
-	3.6975614811e-02f,
-	3.7169619561e-02f,
-	3.7360826579e-02f,
-	3.7549203111e-02f,
-	3.7734716497e-02f,
-	3.7917334174e-02f,
-	3.8097023682e-02f,
-	3.8273752662e-02f,
-	3.8447488862e-02f,
-	3.8618200142e-02f,
-	3.8785854471e-02f,
-	3.8950419938e-02f,
-	3.9111864748e-02f,
-	3.9270157229e-02f,
-	3.9425265832e-02f,
-	3.9577159139e-02f,
-	3.9725805860e-02f,
-	3.9871174841e-02f,
-	4.0013235065e-02f,
-	4.0151955653e-02f,
-	4.0287305872e-02f,
-	4.0419255132e-02f,
-	4.0547772996e-02f,
-	4.0672829174e-02f,
-	4.0794393537e-02f,
-	4.0912436111e-02f,
-	4.1026927082e-02f,
-	4.1137836804e-02f,
-	4.1245135797e-02f,
-	4.1348794749e-02f,
-	4.1448784524e-02f,
-	4.1545076162e-02f,
-	4.1637640883e-02f,
-	4.1726450087e-02f,
-	4.1811475363e-02f,
-	4.1892688485e-02f,
-	4.1970061420e-02f,
-	4.2043566330e-02f,
-	4.2113175575e-02f,
-	4.2178861713e-02f,
-	4.2240597507e-02f,
-	4.2298355927e-02f,
-	4.2352110150e-02f,
-	4.2401833569e-02f,
-	4.2447499790e-02f,
-	4.2489082636e-02f,
-	4.2526556154e-02f,
-	4.2559894614e-02f,
-	4.2589072513e-02f,
-	4.2614064577e-02f,
-	4.2634845767e-02f,
-	4.2651391279e-02f,
-	4.2663676547e-02f,
-	4.2671677247e-02f,
-	4.2675369301e-02f,
-	4.2674728877e-02f,
-	4.2669732393e-02f,
-	4.2660356521e-02f,
-	4.2646578188e-02f,
-	4.2628374582e-02f,
-	4.2605723151e-02f,
-	4.2578601607e-02f,
-	4.2546987932e-02f,
-	4.2510860375e-02f,
-	4.2470197459e-02f,
-	4.2424977984e-02f,
-	4.2375181028e-02f,
-	4.2320785950e-02f,
-	4.2261772392e-02f,
-	4.2198120283e-02f,
-	4.2129809844e-02f,
-	4.2056821586e-02f,
-	4.1979136315e-02f,
-	4.1896735135e-02f,
-	4.1809599450e-02f,
-	4.1717710968e-02f,
-	4.1621051700e-02f,
-	4.1519603969e-02f,
-	4.1413350406e-02f,
-	4.1302273957e-02f,
-	4.1186357882e-02f,
-	4.1065585763e-02f,
-	4.0939941499e-02f,
-	4.0809409317e-02f,
-	4.0673973768e-02f,
-	4.0533619732e-02f,
-	4.0388332420e-02f,
-	4.0238097378e-02f,
-	4.0082900488e-02f,
-	3.9922727970e-02f,
-	3.9757566385e-02f,
-	3.9587402640e-02f,
-	3.9412223984e-02f,
-	3.9232018019e-02f,
-	3.9046772694e-02f,
-	3.8856476313e-02f,
-	3.8661117536e-02f,
-	3.8460685379e-02f,
-	3.8255169220e-02f,
-	3.8044558798e-02f,
-	3.7828844216e-02f,
-	3.7608015948e-02f,
-	3.7382064831e-02f,
-	3.7150982079e-02f,
-	3.6914759277e-02f,
-	3.6673388384e-02f,
-	3.6426861741e-02f,
-	3.6175172064e-02f,
-	3.5918312457e-02f,
-	3.5656276402e-02f,
-	3.5389057772e-02f,
-	3.5116650827e-02f,
-	3.4839050215e-02f,
-	3.4556250979e-02f,
-	3.4268248556e-02f,
-	3.3975038778e-02f,
-	3.3676617876e-02f,
-	3.3372982482e-02f,
-	3.3064129628e-02f,
-	3.2750056752e-02f,
-	3.2430761697e-02f,
-	3.2106242711e-02f,
-	3.1776498457e-02f,
-	3.1441528003e-02f,
-	3.1101330835e-02f,
-	3.0755906850e-02f,
-	3.0405256364e-02f,
-	3.0049380108e-02f,
-	2.9688279236e-02f,
-	2.9321955322e-02f,
-	2.8950410362e-02f,
-	2.8573646778e-02f,
-	2.8191667417e-02f,
-	2.7804475554e-02f,
-	2.7412074894e-02f,
-	2.7014469572e-02f,
-	2.6611664154e-02f,
-	2.6203663641e-02f,
-	2.5790473469e-02f,
-	2.5372099509e-02f,
-	2.4948548071e-02f,
-	2.4519825903e-02f,
-	2.4085940195e-02f,
-	2.3646898577e-02f,
-	2.3202709122e-02f,
-	2.2753380347e-02f,
-	2.2298921216e-02f,
-	2.1839341136e-02f,
-	2.1374649966e-02f,
-	2.0904858010e-02f,
-	2.0429976023e-02f,
-	1.9950015212e-02f,
-	1.9464987234e-02f,
-	1.8974904200e-02f,
-	1.8479778675e-02f,
-	1.7979623677e-02f,
-	1.7474452682e-02f,
-	1.6964279622e-02f,
-	1.6449118885e-02f,
-	1.5928985320e-02f,
-	1.5403894231e-02f,
-	1.4873861386e-02f,
-	1.4338903012e-02f,
-	1.3799035796e-02f,
-	1.3254276889e-02f,
-	1.2704643903e-02f,
-	1.2150154914e-02f,
-	1.1590828462e-02f,
-	1.1026683552e-02f,
-	1.0457739651e-02f,
-	9.8840166959e-03f,
-	9.3055350856e-03f,
-	8.7223156872e-03f,
-	8.1343798343e-03f,
-	7.5417493272e-03f,
-	6.9444464342e-03f,
-	6.3424938910e-03f,
-	5.7359149015e-03f,
-	5.1247331377e-03f,
-	4.5089727405e-03f,
-	3.8886583191e-03f,
-	3.2638149519e-03f,
-	2.6344681861e-03f,
-	2.0006440380e-03f,
-	1.3623689931e-03f,
-	7.1967000609e-04f,
-	7.2574500785e-05f,
-	-5.7888962984e-04f,
-	-1.2346940238e-03f,
-	-1.8948098500e-03f,
-	-2.5592078086e-03f,
-	-3.2278581311e-03f,
-	-3.9007305806e-03f,
-	-4.5777944517e-03f,
-	-5.2590185713e-03f,
-	-5.9443712984e-03f,
-	-6.6338205248e-03f,
-	-7.3273336752e-03f,
-	-8.0248777077e-03f,
-	-8.7264191143e-03f,
-	-9.4319239212e-03f,
-	-1.0141357689e-02f,
-	-1.0854685515e-02f,
-	-1.1571872031e-02f,
-	-1.2292881404e-02f,
-	-1.3017677342e-02f,
-	-1.3746223088e-02f,
-	-1.4478481423e-02f,
-	-1.5214414668e-02f,
-	-1.5953984684e-02f,
-	-1.6697152874e-02f,
-	-1.7443880179e-02f,
-	-1.8194127086e-02f,
-	-1.8947853624e-02f,
-	-1.9705019366e-02f,
-	-2.0465583429e-02f,
-	-2.1229504478e-02f,
-	-2.1996740725e-02f,
-	-2.2767249930e-02f,
-	-2.3540989402e-02f,
-	-2.4317916001e-02f,
-	-2.5097986137e-02f,
-	-2.5881155776e-02f,
-	-2.6667380435e-02f,
-	-2.7456615187e-02f,
-	-2.8248814664e-02f,
-	-2.9043933053e-02f,
-	-2.9841924102e-02f,
-	-3.0642741119e-02f,
-	-3.1446336973e-02f,
-	-3.2252664100e-02f,
-	-3.3061674498e-02f,
-	-3.3873319733e-02f,
-	-3.4687550939e-02f,
-	-3.5504318819e-02f,
-	-3.6323573649e-02f,
-	-3.7145265277e-02f,
-	-3.7969343125e-02f,
-	-3.8795756194e-02f,
-	-3.9624453062e-02f,
-	-4.0455381885e-02f,
-	-4.1288490406e-02f,
-	-4.2123725946e-02f,
-	-4.2961035415e-02f,
-	-4.3800365311e-02f,
-	-4.4641661720e-02f,
-	-4.5484870320e-02f,
-	-4.6329936384e-02f,
-	-4.7176804778e-02f,
-	-4.8025419968e-02f,
-	-4.8875726019e-02f,
-	-4.9727666599e-02f,
-	-5.0581184979e-02f,
-	-5.1436224037e-02f,
-	-5.2292726260e-02f,
-	-5.3150633745e-02f,
-	-5.4009888205e-02f,
-	-5.4870430966e-02f,
-	-5.5732202973e-02f,
-	-5.6595144791e-02f,
-	-5.7459196610e-02f,
-	-5.8324298243e-02f,
-	-5.9190389132e-02f,
-	-6.0057408351e-02f,
-	-6.0925294604e-02f,
-	-6.1793986234e-02f,
-	-6.2663421219e-02f,
-	-6.3533537182e-02f,
-	-6.4404271386e-02f,
-	-6.5275560743e-02f,
-	-6.6147341814e-02f,
-	-6.7019550810e-02f,
-	-6.7892123599e-02f,
-	-6.8764995706e-02f,
-	-6.9638102317e-02f,
-	-7.0511378281e-02f,
-	-7.1384758115e-02f,
-	-7.2258176003e-02f,
-	-7.3131565803e-02f,
-	-7.4004861049e-02f,
-	-7.4877994952e-02f,
-	-7.5750900407e-02f,
-	-7.6623509991e-02f,
-	-7.7495755972e-02f,
-	-7.8367570308e-02f,
-	-7.9238884650e-02f,
-	-8.0109630348e-02f,
-	-8.0979738454e-02f,
-	-8.1849139722e-02f,
-	-8.2717764615e-02f,
-	-8.3585543307e-02f,
-	-8.4452405685e-02f,
-	-8.5318281355e-02f,
-	-8.6183099645e-02f,
-	-8.7046789605e-02f,
-	-8.7909280016e-02f,
-	-8.8770499388e-02f,
-	-8.9630375969e-02f,
-	-9.0488837744e-02f,
-	-9.1345812440e-02f,
-	-9.2201227533e-02f,
-	-9.3055010245e-02f,
-	-9.3907087555e-02f,
-	-9.4757386195e-02f,
-	-9.5605832662e-02f,
-	-9.6452353216e-02f,
-	-9.7296873884e-02f,
-	-9.8139320468e-02f,
-	-9.8979618543e-02f,
-	-9.9817693468e-02f,
-	-1.0065347038e-01f,
-	-1.0148687421e-01f,
-	-1.0231782968e-01f,
-	-1.0314626130e-01f,
-	-1.0397209339e-01f,
-	-1.0479525007e-01f,
-	-1.0561565526e-01f,
-	-1.0643323271e-01f,
-	-1.0724790596e-01f,
-	-1.0805959839e-01f,
-	-1.0886823321e-01f,
-	-1.0967373343e-01f,
-	-1.1047602192e-01f,
-	-1.1127502137e-01f,
-	-1.1207065431e-01f,
-	-1.1286284314e-01f,
-	-1.1365151008e-01f,
-	-1.1443657721e-01f,
-	-1.1521796648e-01f,
-	-1.1599559970e-01f,
-	-1.1676939853e-01f,
-	-1.1753928451e-01f,
-	-1.1830517907e-01f,
-	-1.1906700350e-01f,
-	-1.1982467898e-01f,
-	-1.2057812658e-01f,
-	-1.2132726727e-01f,
-	-1.2207202190e-01f,
-	-1.2281231124e-01f,
-	-1.2354805596e-01f,
-	-1.2427917663e-01f,
-	-1.2500559376e-01f,
-	-1.2572722775e-01f,
-	-1.2644399895e-01f,
-	-1.2715582763e-01f,
-	-1.2786263400e-01f,
-	-1.2856433819e-01f,
-	-1.2926086029e-01f,
-	-1.2995212033e-01f,
-	-1.3063803830e-01f,
-	-1.3131853415e-01f,
-	-1.3199352777e-01f,
-	-1.3266293905e-01f,
-	-1.3332668782e-01f,
-	-1.3398469391e-01f,
-	-1.3463687711e-01f,
-	-1.3528315721e-01f,
-	-1.3592345400e-01f,
-	-1.3655768723e-01f,
-	-1.3718577669e-01f,
-	-1.3780764215e-01f,
-	-1.3842320340e-01f,
-	-1.3903238025e-01f,
-	-1.3963509251e-01f,
-	-1.4023126003e-01f,
-	-1.4082080268e-01f,
-	-1.4140364038e-01f,
-	-1.4197969308e-01f,
-	-1.4254888077e-01f,
-	-1.4311112349e-01f,
-	-1.4366634133e-01f,
-	-1.4421445446e-01f,
-	-1.4475538309e-01f,
-	-1.4528904751e-01f,
-	-1.4581536808e-01f,
-	-1.4633426524e-01f,
-	-1.4684565952e-01f,
-	-1.4734947153e-01f,
-	-1.4784562197e-01f,
-	-1.4833403166e-01f,
-	-1.4881462150e-01f,
-	-1.4928731251e-01f,
-	-1.4975202582e-01f,
-	-1.5020868268e-01f,
-	-1.5065720448e-01f,
-	-1.5109751270e-01f,
-	-1.5152952900e-01f,
-	-1.5195317515e-01f,
-	-1.5236837307e-01f,
-	-1.5277504483e-01f,
-	-1.5317311265e-01f,
-	-1.5356249893e-01f,
-	-1.5394312620e-01f,
-	-1.5431491720e-01f,
-	-1.5467779480e-01f,
-	-1.5503168209e-01f,
-	-1.5537650232e-01f,
-	-1.5571217894e-01f,
-	-1.5603863560e-01f,
-	-1.5635579612e-01f,
-	-1.5666358457e-01f,
-	-1.5696192519e-01f,
-	-1.5725074247e-01f,
-	-1.5752996109e-01f,
-	-1.5779950598e-01f,
-	-1.5805930228e-01f,
-	-1.5830927537e-01f,
-	-1.5854935089e-01f,
-	-1.5877945470e-01f,
-	-1.5899951293e-01f,
-	-1.5920945194e-01f,
-	-1.5940919839e-01f,
-	-1.5959867918e-01f,
-	-1.5977782147e-01f,
-	-1.5994655273e-01f,
-	-1.6010480068e-01f,
-	-1.6025249335e-01f,
-	-1.6038955904e-01f,
-	-1.6051592636e-01f,
-	-1.6063152422e-01f,
-	-1.6073628182e-01f,
-	-1.6083012871e-01f,
-	-1.6091299471e-01f,
-	-1.6098480999e-01f,
-	-1.6104550504e-01f,
-	-1.6109501068e-01f,
-	-1.6113325806e-01f,
-	-1.6116017868e-01f,
-	-1.6117570439e-01f,
-	-1.6117976738e-01f,
-	-1.6117230020e-01f,
-	-1.6115323575e-01f,
-	-1.6112250733e-01f,
-	-1.6108004857e-01f,
-	-1.6102579350e-01f,
-	-1.6095967652e-01f,
-	-1.6088163242e-01f,
-	-1.6079159638e-01f,
-	-1.6068950398e-01f,
-	-1.6057529119e-01f,
-	-1.6044889439e-01f,
-	-1.6031025037e-01f,
-	-1.6015929632e-01f,
-	-1.5999596988e-01f,
-	-1.5982020908e-01f,
-	-1.5963195240e-01f,
-	-1.5943113876e-01f,
-	-1.5921770749e-01f,
-	-1.5899159838e-01f,
-	-1.5875275167e-01f,
-	-1.5850110804e-01f,
-	-1.5823660865e-01f,
-	-1.5795919509e-01f,
-	-1.5766880943e-01f,
-	-1.5736539423e-01f,
-	-1.5704889250e-01f,
-	-1.5671924773e-01f,
-	-1.5637640390e-01f,
-	-1.5602030549e-01f,
-	-1.5565089746e-01f,
-	-1.5526812527e-01f,
-	-1.5487193489e-01f,
-	-1.5446227278e-01f,
-	-1.5403908592e-01f,
-	-1.5360232182e-01f,
-	-1.5315192848e-01f,
-	-1.5268785446e-01f,
-	-1.5221004881e-01f,
-	-1.5171846114e-01f,
-	-1.5121304160e-01f,
-	-1.5069374086e-01f,
-	-1.5016051015e-01f,
-	-1.4961330124e-01f,
-	-1.4905206647e-01f,
-	-1.4847675873e-01f,
-	-1.4788733147e-01f,
-	-1.4728373870e-01f,
-	-1.4666593502e-01f,
-	-1.4603387560e-01f,
-	-1.4538751616e-01f,
-	-1.4472681305e-01f,
-	-1.4405172317e-01f,
-	-1.4336220402e-01f,
-	-1.4265821371e-01f,
-	-1.4193971094e-01f,
-	-1.4120665500e-01f,
-	-1.4045900579e-01f,
-	-1.3969672385e-01f,
-	-1.3891977029e-01f,
-	-1.3812810687e-01f,
-	-1.3732169596e-01f,
-	-1.3650050055e-01f,
-	-1.3566448428e-01f,
-	-1.3481361139e-01f,
-	-1.3394784679e-01f,
-	-1.3306715601e-01f,
-	-1.3217150522e-01f,
-	-1.3126086126e-01f,
-	-1.3033519161e-01f,
-	-1.2939446438e-01f,
-	-1.2843864838e-01f,
-	-1.2746771304e-01f,
-	-1.2648162849e-01f,
-	-1.2548036551e-01f,
-	-1.2446389555e-01f,
-	-1.2343219074e-01f,
-	-1.2238522388e-01f,
-	-1.2132296846e-01f,
-	-1.2024539866e-01f,
-	-1.1915248932e-01f,
-	-1.1804421600e-01f,
-	-1.1692055495e-01f,
-	-1.1578148309e-01f,
-	-1.1462697807e-01f,
-	-1.1345701823e-01f,
-	-1.1227158261e-01f,
-	-1.1107065097e-01f,
-	-1.0985420379e-01f,
-	-1.0862222223e-01f,
-	-1.0737468819e-01f,
-	-1.0611158430e-01f,
-	-1.0483289389e-01f,
-	-1.0353860103e-01f,
-	-1.0222869051e-01f,
-	-1.0090314786e-01f,
-	-9.9561959337e-02f,
-	-9.8205111927e-02f,
-	-9.6832593363e-02f,
-	-9.5444392119e-02f,
-	-9.4040497408e-02f,
-	-9.2620899192e-02f,
-	-9.1185588178e-02f,
-	-8.9734555825e-02f,
-	-8.8267794344e-02f,
-	-8.6785296700e-02f,
-	-8.5287056616e-02f,
-	-8.3773068574e-02f,
-	-8.2243327817e-02f,
-	-8.0697830350e-02f,
-	-7.9136572946e-02f,
-	-7.7559553144e-02f,
-	-7.5966769251e-02f,
-	-7.4358220346e-02f,
-	-7.2733906284e-02f,
-	-7.1093827690e-02f,
-	-6.9437985970e-02f,
-	-6.7766383306e-02f,
-	-6.6079022660e-02f,
-	-6.4375907779e-02f,
-	-6.2657043190e-02f,
-	-6.0922434206e-02f,
-	-5.9172086928e-02f,
-	-5.7406008244e-02f,
-	-5.5624205831e-02f,
-	-5.3826688159e-02f,
-	-5.2013464489e-02f,
-	-5.0184544876e-02f,
-	-4.8339940169e-02f,
-	-4.6479662016e-02f,
-	-4.4603722858e-02f,
-	-4.2712135940e-02f,
-	-4.0804915303e-02f,
-	-3.8882075789e-02f,
-	-3.6943633043e-02f,
-	-3.4989603512e-02f,
-	-3.3020004448e-02f,
-	-3.1034853907e-02f,
-	-2.9034170748e-02f,
-	-2.7017974640e-02f,
-	-2.4986286057e-02f,
-	-2.2939126281e-02f,
-	-2.0876517402e-02f,
-	-1.8798482320e-02f,
-	-1.6705044744e-02f,
-	-1.4596229193e-02f,
-	-1.2472060997e-02f,
-	-1.0332566296e-02f,
-	-8.1777720432e-03f,
-	-6.0077060013e-03f,
-	-3.8223967468e-03f,
-	-1.6218736678e-03f,
-	5.9383303475e-04f,
-	2.8246923475e-03f,
-	5.0706724443e-03f,
-	7.3317406858e-03f,
-	9.6078636203e-03f,
-	1.1899006983e-02f,
-	1.4205135696e-02f,
-	1.6526213869e-02f,
-	1.8862204799e-02f,
-	2.1213070971e-02f,
-	2.3578774058e-02f,
-	2.5959274922e-02f,
-	2.8354533611e-02f,
-	3.0764509365e-02f,
-	3.3189160611e-02f,
-	3.5628444968e-02f,
-	3.8082319245e-02f,
-	4.0550739440e-02f,
-	4.3033660746e-02f,
-	4.5531037547e-02f,
-	4.8042823419e-02f,
-	5.0568971132e-02f,
-	5.3109432653e-02f,
-	5.5664159143e-02f,
-	5.8233100959e-02f,
-	6.0816207655e-02f,
-	6.3413427987e-02f,
-	6.6024709906e-02f,
-	6.8650000566e-02f,
-	7.1289246322e-02f,
-	7.3942392734e-02f,
-	7.6609384563e-02f,
-	7.9290165778e-02f,
-	8.1984679554e-02f,
-	8.4692868274e-02f,
-	8.7414673530e-02f,
-	9.0150036128e-02f,
-	9.2898896083e-02f,
-	9.5661192628e-02f,
-	9.8436864207e-02f,
-	1.0122584849e-01f,
-	1.0402808235e-01f,
-	1.0684350190e-01f,
-	1.0967204247e-01f,
-	1.1251363861e-01f,
-	1.1536822410e-01f,
-	1.1823573194e-01f,
-	1.2111609437e-01f,
-	1.2400924287e-01f,
-	1.2691510814e-01f,
-	1.2983362012e-01f,
-	1.3276470800e-01f,
-	1.3570830019e-01f,
-	1.3866432436e-01f,
-	1.4163270742e-01f,
-	1.4461337554e-01f,
-	1.4760625412e-01f,
-	1.5061126783e-01f,
-	1.5362834059e-01f,
-	1.5665739557e-01f,
-	1.5969835522e-01f,
-	1.6275114123e-01f,
-	1.6581567457e-01f,
-	1.6889187548e-01f,
-	1.7197966347e-01f,
-	1.7507895732e-01f,
-	1.7818967509e-01f,
-	1.8131173411e-01f,
-	1.8444505102e-01f,
-	1.8758954172e-01f,
-	1.9074512141e-01f,
-	1.9391170458e-01f,
-	1.9708920502e-01f,
-	2.0027753580e-01f,
-	2.0347660933e-01f,
-	2.0668633728e-01f,
-	2.0990663066e-01f,
-	2.1313739979e-01f,
-	2.1637855428e-01f,
-	2.1963000308e-01f,
-	2.2289165447e-01f,
-	2.2616341603e-01f,
-	2.2944519468e-01f,
-	2.3273689669e-01f,
-	2.3603842763e-01f,
-	2.3934969246e-01f,
-	2.4267059543e-01f,
-	2.4600104017e-01f,
-	2.4934092966e-01f,
-	2.5269016623e-01f,
-	2.5604865156e-01f,
-	2.5941628672e-01f,
-	2.6279297211e-01f,
-	2.6617860752e-01f,
-	2.6957309214e-01f,
-	2.7297632449e-01f,
-	2.7638820251e-01f,
-	2.7980862352e-01f,
-	2.8323748423e-01f,
-	2.8667468073e-01f,
-	2.9012010853e-01f,
-	2.9357366255e-01f,
-	2.9703523710e-01f,
-	3.0050472592e-01f,
-	3.0398202216e-01f,
-	3.0746701839e-01f,
-	3.1095960661e-01f,
-	3.1445967825e-01f,
-	3.1796712419e-01f,
-	3.2148183474e-01f,
-	3.2500369965e-01f,
-	3.2853260812e-01f,
-	3.3206844882e-01f,
-	3.3561110987e-01f,
-	3.3916047886e-01f,
-	3.4271644283e-01f,
-	3.4627888834e-01f,
-	3.4984770137e-01f,
-	3.5342276743e-01f,
-	3.5700397151e-01f,
-	3.6059119807e-01f,
-	3.6418433111e-01f,
-	3.6778325409e-01f,
-	3.7138785003e-01f,
-	3.7499800141e-01f,
-	3.7861359028e-01f,
-	3.8223449819e-01f,
-	3.8586060622e-01f,
-	3.8949179500e-01f,
-	3.9312794468e-01f,
-	3.9676893497e-01f,
-	4.0041464515e-01f,
-	4.0406495402e-01f,
-	4.0771973997e-01f,
-	4.1137888096e-01f,
-	4.1504225451e-01f,
-	4.1870973772e-01f,
-	4.2238120728e-01f,
-	4.2605653948e-01f,
-	4.2973561020e-01f,
-	4.3341829492e-01f,
-	4.3710446873e-01f,
-	4.4079400632e-01f,
-	4.4448678203e-01f,
-	4.4818266980e-01f,
-	4.5188154321e-01f,
-	4.5558327548e-01f,
-	4.5928773946e-01f,
-	4.6299480766e-01f,
-	4.6670435226e-01f,
-	4.7041624506e-01f,
-	4.7413035756e-01f,
-	4.7784656093e-01f,
-	4.8156472600e-01f,
-	4.8528472330e-01f,
-	4.8900642304e-01f,
-	4.9272969515e-01f,
-	4.9645440924e-01f,
-	5.0018043463e-01f,
-	5.0390764036e-01f,
-	5.0763589521e-01f,
-	5.1136506765e-01f,
-	5.1509502592e-01f,
-	5.1882563797e-01f,
-	5.2255677153e-01f,
-	5.2628829405e-01f,
-	5.3002007275e-01f,
-	5.3375197464e-01f,
-	5.3748386646e-01f,
-	5.4121561476e-01f,
-	5.4494708586e-01f,
-	5.4867814587e-01f,
-	5.5240866071e-01f,
-	5.5613849610e-01f,
-	5.5986751755e-01f,
-	5.6359559041e-01f,
-	5.6732257985e-01f,
-	5.7104835087e-01f,
-	5.7477276829e-01f,
-	5.7849569680e-01f,
-	5.8221700091e-01f,
-	5.8593654502e-01f,
-	5.8965419336e-01f,
-	5.9336981004e-01f,
-	5.9708325906e-01f,
-	6.0079440429e-01f,
-	6.0450310949e-01f,
-	6.0820923831e-01f,
-	6.1191265431e-01f,
-	6.1561322097e-01f,
-	6.1931080167e-01f,
-	6.2300525971e-01f,
-	6.2669645833e-01f,
-	6.3038426070e-01f,
-	6.3406852994e-01f,
-	6.3774912912e-01f,
-	6.4142592125e-01f,
-	6.4509876931e-01f,
-	6.4876753627e-01f,
-	6.5243208504e-01f,
-	6.5609227856e-01f,
-	6.5974797971e-01f,
-	6.6339905141e-01f,
-	6.6704535655e-01f,
-	6.7068675805e-01f,
-	6.7432311884e-01f,
-	6.7795430188e-01f,
-	6.8158017017e-01f,
-	6.8520058672e-01f,
-	6.8881541460e-01f,
-	6.9242451695e-01f,
-	6.9602775693e-01f,
-	6.9962499780e-01f,
-	7.0321610287e-01f,
-	7.0680093554e-01f,
-	7.1037935930e-01f,
-	7.1395123772e-01f,
-	7.1751643447e-01f,
-	7.2107481334e-01f,
-	7.2462623823e-01f,
-	7.2817057314e-01f,
-	7.3170768222e-01f,
-	7.3523742975e-01f,
-	7.3875968014e-01f,
-	7.4227429796e-01f,
-	7.4578114792e-01f,
-	7.4928009491e-01f,
-	7.5277100398e-01f,
-	7.5625374034e-01f,
-	7.5972816940e-01f,
-	7.6319415675e-01f,
-	7.6665156819e-01f,
-	7.7010026970e-01f,
-	7.7354012748e-01f,
-	7.7697100796e-01f,
-	7.8039277776e-01f,
-	7.8380530375e-01f,
-	7.8720845305e-01f,
-	7.9060209299e-01f,
-	7.9398609117e-01f,
-	7.9736031544e-01f,
-	8.0072463393e-01f,
-	8.0407891502e-01f,
-	8.0742302736e-01f,
-	8.1075683992e-01f,
-	8.1408022192e-01f,
-	8.1739304290e-01f,
-	8.2069517269e-01f,
-	8.2398648145e-01f,
-	8.2726683964e-01f,
-	8.3053611804e-01f,
-	8.3379418778e-01f,
-	8.3704092031e-01f,
-	8.4027618743e-01f,
-	8.4349986129e-01f,
-	8.4671181439e-01f,
-	8.4991191960e-01f,
-	8.5310005017e-01f,
-	8.5627607970e-01f,
-	8.5943988220e-01f,
-	8.6259133204e-01f,
-	8.6573030403e-01f,
-	8.6885667333e-01f,
-	8.7197031555e-01f,
-	8.7507110669e-01f,
-	8.7815892319e-01f,
-	8.8123364191e-01f,
-	8.8429514014e-01f,
-	8.8734329561e-01f,
-	8.9037798651e-01f,
-	8.9339909146e-01f,
-	8.9640648958e-01f,
-	8.9940006042e-01f,
-	9.0237968401e-01f,
-	9.0534524086e-01f,
-	9.0829661198e-01f,
-	9.1123367885e-01f,
-	9.1415632346e-01f,
-	9.1706442829e-01f,
-	9.1995787635e-01f,
-	9.2283655114e-01f,
-	9.2570033671e-01f,
-	9.2854911761e-01f,
-	9.3138277895e-01f,
-	9.3420120637e-01f,
-	9.3700428603e-01f,
-	9.3979190468e-01f,
-	9.4256394962e-01f,
-	9.4532030869e-01f,
-	9.4806087032e-01f,
-	9.5078552351e-01f,
-	9.5349415784e-01f,
-	9.5618666349e-01f,
-	9.5886293120e-01f,
-	9.6152285234e-01f,
-	9.6416631888e-01f,
-	9.6679322338e-01f,
-	9.6940345903e-01f,
-	9.7199691965e-01f,
-	9.7457349966e-01f,
-	9.7713309414e-01f,
-	9.7967559878e-01f,
-	9.8220090995e-01f,
-	9.8470892463e-01f,
-	9.8719954048e-01f,
-	9.8967265580e-01f,
-	9.9212816957e-01f,
-	9.9456598144e-01f,
-	9.9698599173e-01f,
-	9.9938810143e-01f,
-	1.0017722122e+00f,
-	1.0041382265e+00f,
-	1.0064860474e+00f,
-	1.0088155785e+00f,
-	1.0111267245e+00f,
-	1.0134193905e+00f,
-	1.0156934824e+00f,
-	1.0179489069e+00f,
-	1.0201855712e+00f,
-	1.0224033835e+00f,
-	1.0246022527e+00f,
-	1.0267820882e+00f,
-	1.0289428004e+00f,
-	1.0310843004e+00f,
-	1.0332064999e+00f,
-	1.0353093116e+00f,
-	1.0373926488e+00f,
-	1.0394564255e+00f,
-	1.0415005568e+00f,
-	1.0435249582e+00f,
-	1.0455295461e+00f,
-	1.0475142379e+00f,
-	1.0494789515e+00f,
-	1.0514236058e+00f,
-	1.0533481203e+00f,
-	1.0552524156e+00f,
-	1.0571364127e+00f,
-	1.0590000339e+00f,
-	1.0608432019e+00f,
-	1.0626658404e+00f,
-	1.0644678739e+00f,
-	1.0662492278e+00f,
-	1.0680098282e+00f,
-	1.0697496021e+00f,
-	1.0714684775e+00f,
-	1.0731663829e+00f,
-	1.0748432479e+00f,
-	1.0764990029e+00f,
-	1.0781335792e+00f,
-	1.0797469089e+00f,
-	1.0813389249e+00f,
-	1.0829095611e+00f,
-	1.0844587521e+00f,
-	1.0859864337e+00f,
-	1.0874925421e+00f,
-	1.0889770149e+00f,
-	1.0904397901e+00f,
-	1.0918808069e+00f,
-	1.0933000054e+00f,
-	1.0946973263e+00f,
-	1.0960727116e+00f,
-	1.0974261038e+00f,
-	1.0987574466e+00f,
-	1.1000666846e+00f,
-	1.1013537630e+00f,
-	1.1026186282e+00f,
-	1.1038612276e+00f,
-	1.1050815091e+00f,
-	1.1062794219e+00f,
-	1.1074549161e+00f,
-	1.1086079424e+00f,
-	1.1097384528e+00f,
-	1.1108464001e+00f,
-	1.1119317380e+00f,
-	1.1129944211e+00f,
-	1.1140344050e+00f,
-	1.1150516463e+00f,
-	1.1160461024e+00f,
-	1.1170177318e+00f,
-	1.1179664938e+00f,
-	1.1188923487e+00f,
-	1.1197952579e+00f,
-	1.1206751835e+00f,
-	1.1215320888e+00f,
-	1.1223659378e+00f,
-	1.1231766957e+00f,
-	1.1239643285e+00f,
-	1.1247288033e+00f,
-	1.1254700880e+00f,
-	1.1261881516e+00f,
-	1.1268829640e+00f,
-	1.1275544962e+00f,
-	1.1282027199e+00f,
-	1.1288276081e+00f,
-	1.1294291345e+00f,
-	1.1300072740e+00f,
-	1.1305620023e+00f,
-	1.1310932962e+00f,
-	1.1316011334e+00f,
-	1.1320854925e+00f,
-	1.1325463534e+00f,
-	1.1329836966e+00f,
-	1.1333975039e+00f,
-	1.1337877579e+00f,
-	1.1341544422e+00f,
-	1.1344975415e+00f,
-	1.1348170413e+00f,
-	1.1351129282e+00f,
-	1.1353851899e+00f,
-	1.1356338150e+00f,
-	1.1358587929e+00f,
-	1.1360601143e+00f,
-	1.1362377707e+00f,
-	1.1363917546e+00f,
-	1.1365220597e+00f,
-	1.1366286803e+00f,
-	1.1367116122e+00f,
-	1.1367708517e+00f,
-	1.1368063964e+00f,
-	1.1368182448e+00f,
-	1.1368063964e+00f,
-	1.1367708517e+00f,
-	1.1367116122e+00f,
-	1.1366286803e+00f,
-	1.1365220597e+00f,
-	1.1363917546e+00f,
-	1.1362377707e+00f,
-	1.1360601143e+00f,
-	1.1358587929e+00f,
-	1.1356338150e+00f,
-	1.1353851899e+00f,
-	1.1351129282e+00f,
-	1.1348170413e+00f,
-	1.1344975415e+00f,
-	1.1341544422e+00f,
-	1.1337877579e+00f,
-	1.1333975039e+00f,
-	1.1329836966e+00f,
-	1.1325463534e+00f,
-	1.1320854925e+00f,
-	1.1316011334e+00f,
-	1.1310932962e+00f,
-	1.1305620023e+00f,
-	1.1300072740e+00f,
-	1.1294291345e+00f,
-	1.1288276081e+00f,
-	1.1282027199e+00f,
-	1.1275544962e+00f,
-	1.1268829640e+00f,
-	1.1261881516e+00f,
-	1.1254700880e+00f,
-	1.1247288033e+00f,
-	1.1239643285e+00f,
-	1.1231766957e+00f,
-	1.1223659378e+00f,
-	1.1215320888e+00f,
-	1.1206751835e+00f,
-	1.1197952579e+00f,
-	1.1188923487e+00f,
-	1.1179664938e+00f,
-	1.1170177318e+00f,
-	1.1160461024e+00f,
-	1.1150516463e+00f,
-	1.1140344050e+00f,
-	1.1129944211e+00f,
-	1.1119317380e+00f,
-	1.1108464001e+00f,
-	1.1097384528e+00f,
-	1.1086079424e+00f,
-	1.1074549161e+00f,
-	1.1062794219e+00f,
-	1.1050815091e+00f,
-	1.1038612276e+00f,
-	1.1026186282e+00f,
-	1.1013537630e+00f,
-	1.1000666846e+00f,
-	1.0987574466e+00f,
-	1.0974261038e+00f,
-	1.0960727116e+00f,
-	1.0946973263e+00f,
-	1.0933000054e+00f,
-	1.0918808069e+00f,
-	1.0904397901e+00f,
-	1.0889770149e+00f,
-	1.0874925421e+00f,
-	1.0859864337e+00f,
-	1.0844587521e+00f,
-	1.0829095611e+00f,
-	1.0813389249e+00f,
-	1.0797469089e+00f,
-	1.0781335792e+00f,
-	1.0764990029e+00f,
-	1.0748432479e+00f,
-	1.0731663829e+00f,
-	1.0714684775e+00f,
-	1.0697496021e+00f,
-	1.0680098282e+00f,
-	1.0662492278e+00f,
-	1.0644678739e+00f,
-	1.0626658404e+00f,
-	1.0608432019e+00f,
-	1.0590000339e+00f,
-	1.0571364127e+00f,
-	1.0552524156e+00f,
-	1.0533481203e+00f,
-	1.0514236058e+00f,
-	1.0494789515e+00f,
-	1.0475142379e+00f,
-	1.0455295461e+00f,
-	1.0435249582e+00f,
-	1.0415005568e+00f,
-	1.0394564255e+00f,
-	1.0373926488e+00f,
-	1.0353093116e+00f,
-	1.0332064999e+00f,
-	1.0310843004e+00f,
-	1.0289428004e+00f,
-	1.0267820882e+00f,
-	1.0246022527e+00f,
-	1.0224033835e+00f,
-	1.0201855712e+00f,
-	1.0179489069e+00f,
-	1.0156934824e+00f,
-	1.0134193905e+00f,
-	1.0111267245e+00f,
-	1.0088155785e+00f,
-	1.0064860474e+00f,
-	1.0041382265e+00f,
-	1.0017722122e+00f,
-	9.9938810143e-01f,
-	9.9698599173e-01f,
-	9.9456598144e-01f,
-	9.9212816957e-01f,
-	9.8967265580e-01f,
-	9.8719954048e-01f,
-	9.8470892463e-01f,
-	9.8220090995e-01f,
-	9.7967559878e-01f,
-	9.7713309414e-01f,
-	9.7457349966e-01f,
-	9.7199691965e-01f,
-	9.6940345903e-01f,
-	9.6679322338e-01f,
-	9.6416631888e-01f,
-	9.6152285234e-01f,
-	9.5886293120e-01f,
-	9.5618666349e-01f,
-	9.5349415784e-01f,
-	9.5078552351e-01f,
-	9.4806087032e-01f,
-	9.4532030869e-01f,
-	9.4256394962e-01f,
-	9.3979190468e-01f,
-	9.3700428603e-01f,
-	9.3420120637e-01f,
-	9.3138277895e-01f,
-	9.2854911761e-01f,
-	9.2570033671e-01f,
-	9.2283655114e-01f,
-	9.1995787635e-01f,
-	9.1706442829e-01f,
-	9.1415632346e-01f,
-	9.1123367885e-01f,
-	9.0829661198e-01f,
-	9.0534524086e-01f,
-	9.0237968401e-01f,
-	8.9940006042e-01f,
-	8.9640648958e-01f,
-	8.9339909146e-01f,
-	8.9037798651e-01f,
-	8.8734329561e-01f,
-	8.8429514014e-01f,
-	8.8123364191e-01f,
-	8.7815892319e-01f,
-	8.7507110669e-01f,
-	8.7197031555e-01f,
-	8.6885667333e-01f,
-	8.6573030403e-01f,
-	8.6259133204e-01f,
-	8.5943988220e-01f,
-	8.5627607970e-01f,
-	8.5310005017e-01f,
-	8.4991191960e-01f,
-	8.4671181439e-01f,
-	8.4349986129e-01f,
-	8.4027618743e-01f,
-	8.3704092031e-01f,
-	8.3379418778e-01f,
-	8.3053611804e-01f,
-	8.2726683964e-01f,
-	8.2398648145e-01f,
-	8.2069517269e-01f,
-	8.1739304290e-01f,
-	8.1408022192e-01f,
-	8.1075683992e-01f,
-	8.0742302736e-01f,
-	8.0407891502e-01f,
-	8.0072463393e-01f,
-	7.9736031544e-01f,
-	7.9398609117e-01f,
-	7.9060209299e-01f,
-	7.8720845305e-01f,
-	7.8380530375e-01f,
-	7.8039277776e-01f,
-	7.7697100796e-01f,
-	7.7354012748e-01f,
-	7.7010026970e-01f,
-	7.6665156819e-01f,
-	7.6319415675e-01f,
-	7.5972816940e-01f,
-	7.5625374034e-01f,
-	7.5277100398e-01f,
-	7.4928009491e-01f,
-	7.4578114792e-01f,
-	7.4227429796e-01f,
-	7.3875968014e-01f,
-	7.3523742975e-01f,
-	7.3170768222e-01f,
-	7.2817057314e-01f,
-	7.2462623823e-01f,
-	7.2107481334e-01f,
-	7.1751643447e-01f,
-	7.1395123772e-01f,
-	7.1037935930e-01f,
-	7.0680093554e-01f,
-	7.0321610287e-01f,
-	6.9962499780e-01f,
-	6.9602775693e-01f,
-	6.9242451695e-01f,
-	6.8881541460e-01f,
-	6.8520058672e-01f,
-	6.8158017017e-01f,
-	6.7795430188e-01f,
-	6.7432311884e-01f,
-	6.7068675805e-01f,
-	6.6704535655e-01f,
-	6.6339905141e-01f,
-	6.5974797971e-01f,
-	6.5609227856e-01f,
-	6.5243208504e-01f,
-	6.4876753627e-01f,
-	6.4509876931e-01f,
-	6.4142592125e-01f,
-	6.3774912912e-01f,
-	6.3406852994e-01f,
-	6.3038426070e-01f,
-	6.2669645833e-01f,
-	6.2300525971e-01f,
-	6.1931080167e-01f,
-	6.1561322097e-01f,
-	6.1191265431e-01f,
-	6.0820923831e-01f,
-	6.0450310949e-01f,
-	6.0079440429e-01f,
-	5.9708325906e-01f,
-	5.9336981004e-01f,
-	5.8965419336e-01f,
-	5.8593654502e-01f,
-	5.8221700091e-01f,
-	5.7849569680e-01f,
-	5.7477276829e-01f,
-	5.7104835087e-01f,
-	5.6732257985e-01f,
-	5.6359559041e-01f,
-	5.5986751755e-01f,
-	5.5613849610e-01f,
-	5.5240866071e-01f,
-	5.4867814587e-01f,
-	5.4494708586e-01f,
-	5.4121561476e-01f,
-	5.3748386646e-01f,
-	5.3375197464e-01f,
-	5.3002007275e-01f,
-	5.2628829405e-01f,
-	5.2255677153e-01f,
-	5.1882563797e-01f,
-	5.1509502592e-01f,
-	5.1136506765e-01f,
-	5.0763589521e-01f,
-	5.0390764036e-01f,
-	5.0018043463e-01f,
-	4.9645440924e-01f,
-	4.9272969515e-01f,
-	4.8900642304e-01f,
-	4.8528472330e-01f,
-	4.8156472600e-01f,
-	4.7784656093e-01f,
-	4.7413035756e-01f,
-	4.7041624506e-01f,
-	4.6670435226e-01f,
-	4.6299480766e-01f,
-	4.5928773946e-01f,
-	4.5558327548e-01f,
-	4.5188154321e-01f,
-	4.4818266980e-01f,
-	4.4448678203e-01f,
-	4.4079400632e-01f,
-	4.3710446873e-01f,
-	4.3341829492e-01f,
-	4.2973561020e-01f,
-	4.2605653948e-01f,
-	4.2238120728e-01f,
-	4.1870973772e-01f,
-	4.1504225451e-01f,
-	4.1137888096e-01f,
-	4.0771973997e-01f,
-	4.0406495402e-01f,
-	4.0041464515e-01f,
-	3.9676893497e-01f,
-	3.9312794468e-01f,
-	3.8949179500e-01f,
-	3.8586060622e-01f,
-	3.8223449819e-01f,
-	3.7861359028e-01f,
-	3.7499800141e-01f,
-	3.7138785003e-01f,
-	3.6778325409e-01f,
-	3.6418433111e-01f,
-	3.6059119807e-01f,
-	3.5700397151e-01f,
-	3.5342276743e-01f,
-	3.4984770137e-01f,
-	3.4627888834e-01f,
-	3.4271644283e-01f,
-	3.3916047886e-01f,
-	3.3561110987e-01f,
-	3.3206844882e-01f,
-	3.2853260812e-01f,
-	3.2500369965e-01f,
-	3.2148183474e-01f,
-	3.1796712419e-01f,
-	3.1445967825e-01f,
-	3.1095960661e-01f,
-	3.0746701839e-01f,
-	3.0398202216e-01f,
-	3.0050472592e-01f,
-	2.9703523710e-01f,
-	2.9357366255e-01f,
-	2.9012010853e-01f,
-	2.8667468073e-01f,
-	2.8323748423e-01f,
-	2.7980862352e-01f,
-	2.7638820251e-01f,
-	2.7297632449e-01f,
-	2.6957309214e-01f,
-	2.6617860752e-01f,
-	2.6279297211e-01f,
-	2.5941628672e-01f,
-	2.5604865156e-01f,
-	2.5269016623e-01f,
-	2.4934092966e-01f,
-	2.4600104017e-01f,
-	2.4267059543e-01f,
-	2.3934969246e-01f,
-	2.3603842763e-01f,
-	2.3273689669e-01f,
-	2.2944519468e-01f,
-	2.2616341603e-01f,
-	2.2289165447e-01f,
-	2.1963000308e-01f,
-	2.1637855428e-01f,
-	2.1313739979e-01f,
-	2.0990663066e-01f,
-	2.0668633728e-01f,
-	2.0347660933e-01f,
-	2.0027753580e-01f,
-	1.9708920502e-01f,
-	1.9391170458e-01f,
-	1.9074512141e-01f,
-	1.8758954172e-01f,
-	1.8444505102e-01f,
-	1.8131173411e-01f,
-	1.7818967509e-01f,
-	1.7507895732e-01f,
-	1.7197966347e-01f,
-	1.6889187548e-01f,
-	1.6581567457e-01f,
-	1.6275114123e-01f,
-	1.5969835522e-01f,
-	1.5665739557e-01f,
-	1.5362834059e-01f,
-	1.5061126783e-01f,
-	1.4760625412e-01f,
-	1.4461337554e-01f,
-	1.4163270742e-01f,
-	1.3866432436e-01f,
-	1.3570830019e-01f,
-	1.3276470800e-01f,
-	1.2983362012e-01f,
-	1.2691510814e-01f,
-	1.2400924287e-01f,
-	1.2111609437e-01f,
-	1.1823573194e-01f,
-	1.1536822410e-01f,
-	1.1251363861e-01f,
-	1.0967204247e-01f,
-	1.0684350190e-01f,
-	1.0402808235e-01f,
-	1.0122584849e-01f,
-	9.8436864207e-02f,
-	9.5661192628e-02f,
-	9.2898896083e-02f,
-	9.0150036128e-02f,
-	8.7414673530e-02f,
-	8.4692868274e-02f,
-	8.1984679554e-02f,
-	7.9290165778e-02f,
-	7.6609384563e-02f,
-	7.3942392734e-02f,
-	7.1289246322e-02f,
-	6.8650000566e-02f,
-	6.6024709906e-02f,
-	6.3413427987e-02f,
-	6.0816207655e-02f,
-	5.8233100959e-02f,
-	5.5664159143e-02f,
-	5.3109432653e-02f,
-	5.0568971132e-02f,
-	4.8042823419e-02f,
-	4.5531037547e-02f,
-	4.3033660746e-02f,
-	4.0550739440e-02f,
-	3.8082319245e-02f,
-	3.5628444968e-02f,
-	3.3189160611e-02f,
-	3.0764509365e-02f,
-	2.8354533611e-02f,
-	2.5959274922e-02f,
-	2.3578774058e-02f,
-	2.1213070971e-02f,
-	1.8862204799e-02f,
-	1.6526213869e-02f,
-	1.4205135696e-02f,
-	1.1899006983e-02f,
-	9.6078636203e-03f,
-	7.3317406858e-03f,
-	5.0706724443e-03f,
-	2.8246923475e-03f,
-	5.9383303475e-04f,
-	-1.6218736678e-03f,
-	-3.8223967468e-03f,
-	-6.0077060013e-03f,
-	-8.1777720432e-03f,
-	-1.0332566296e-02f,
-	-1.2472060997e-02f,
-	-1.4596229193e-02f,
-	-1.6705044744e-02f,
-	-1.8798482320e-02f,
-	-2.0876517402e-02f,
-	-2.2939126281e-02f,
-	-2.4986286057e-02f,
-	-2.7017974640e-02f,
-	-2.9034170748e-02f,
-	-3.1034853907e-02f,
-	-3.3020004448e-02f,
-	-3.4989603512e-02f,
-	-3.6943633043e-02f,
-	-3.8882075789e-02f,
-	-4.0804915303e-02f,
-	-4.2712135940e-02f,
-	-4.4603722858e-02f,
-	-4.6479662016e-02f,
-	-4.8339940169e-02f,
-	-5.0184544876e-02f,
-	-5.2013464489e-02f,
-	-5.3826688159e-02f,
-	-5.5624205831e-02f,
-	-5.7406008244e-02f,
-	-5.9172086928e-02f,
-	-6.0922434206e-02f,
-	-6.2657043190e-02f,
-	-6.4375907779e-02f,
-	-6.6079022660e-02f,
-	-6.7766383306e-02f,
-	-6.9437985970e-02f,
-	-7.1093827690e-02f,
-	-7.2733906284e-02f,
-	-7.4358220346e-02f,
-	-7.5966769251e-02f,
-	-7.7559553144e-02f,
-	-7.9136572946e-02f,
-	-8.0697830350e-02f,
-	-8.2243327817e-02f,
-	-8.3773068574e-02f,
-	-8.5287056616e-02f,
-	-8.6785296700e-02f,
-	-8.8267794344e-02f,
-	-8.9734555825e-02f,
-	-9.1185588178e-02f,
-	-9.2620899192e-02f,
-	-9.4040497408e-02f,
-	-9.5444392119e-02f,
-	-9.6832593363e-02f,
-	-9.8205111927e-02f,
-	-9.9561959337e-02f,
-	-1.0090314786e-01f,
-	-1.0222869051e-01f,
-	-1.0353860103e-01f,
-	-1.0483289389e-01f,
-	-1.0611158430e-01f,
-	-1.0737468819e-01f,
-	-1.0862222223e-01f,
-	-1.0985420379e-01f,
-	-1.1107065097e-01f,
-	-1.1227158261e-01f,
-	-1.1345701823e-01f,
-	-1.1462697807e-01f,
-	-1.1578148309e-01f,
-	-1.1692055495e-01f,
-	-1.1804421600e-01f,
-	-1.1915248932e-01f,
-	-1.2024539866e-01f,
-	-1.2132296846e-01f,
-	-1.2238522388e-01f,
-	-1.2343219074e-01f,
-	-1.2446389555e-01f,
-	-1.2548036551e-01f,
-	-1.2648162849e-01f,
-	-1.2746771304e-01f,
-	-1.2843864838e-01f,
-	-1.2939446438e-01f,
-	-1.3033519161e-01f,
-	-1.3126086126e-01f,
-	-1.3217150522e-01f,
-	-1.3306715601e-01f,
-	-1.3394784679e-01f,
-	-1.3481361139e-01f,
-	-1.3566448428e-01f,
-	-1.3650050055e-01f,
-	-1.3732169596e-01f,
-	-1.3812810687e-01f,
-	-1.3891977029e-01f,
-	-1.3969672385e-01f,
-	-1.4045900579e-01f,
-	-1.4120665500e-01f,
-	-1.4193971094e-01f,
-	-1.4265821371e-01f,
-	-1.4336220402e-01f,
-	-1.4405172317e-01f,
-	-1.4472681305e-01f,
-	-1.4538751616e-01f,
-	-1.4603387560e-01f,
-	-1.4666593502e-01f,
-	-1.4728373870e-01f,
-	-1.4788733147e-01f,
-	-1.4847675873e-01f,
-	-1.4905206647e-01f,
-	-1.4961330124e-01f,
-	-1.5016051015e-01f,
-	-1.5069374086e-01f,
-	-1.5121304160e-01f,
-	-1.5171846114e-01f,
-	-1.5221004881e-01f,
-	-1.5268785446e-01f,
-	-1.5315192848e-01f,
-	-1.5360232182e-01f,
-	-1.5403908592e-01f,
-	-1.5446227278e-01f,
-	-1.5487193489e-01f,
-	-1.5526812527e-01f,
-	-1.5565089746e-01f,
-	-1.5602030549e-01f,
-	-1.5637640390e-01f,
-	-1.5671924773e-01f,
-	-1.5704889250e-01f,
-	-1.5736539423e-01f,
-	-1.5766880943e-01f,
-	-1.5795919509e-01f,
-	-1.5823660865e-01f,
-	-1.5850110804e-01f,
-	-1.5875275167e-01f,
-	-1.5899159838e-01f,
-	-1.5921770749e-01f,
-	-1.5943113876e-01f,
-	-1.5963195240e-01f,
-	-1.5982020908e-01f,
-	-1.5999596988e-01f,
-	-1.6015929632e-01f,
-	-1.6031025037e-01f,
-	-1.6044889439e-01f,
-	-1.6057529119e-01f,
-	-1.6068950398e-01f,
-	-1.6079159638e-01f,
-	-1.6088163242e-01f,
-	-1.6095967652e-01f,
-	-1.6102579350e-01f,
-	-1.6108004857e-01f,
-	-1.6112250733e-01f,
-	-1.6115323575e-01f,
-	-1.6117230020e-01f,
-	-1.6117976738e-01f,
-	-1.6117570439e-01f,
-	-1.6116017868e-01f,
-	-1.6113325806e-01f,
-	-1.6109501068e-01f,
-	-1.6104550504e-01f,
-	-1.6098480999e-01f,
-	-1.6091299471e-01f,
-	-1.6083012871e-01f,
-	-1.6073628182e-01f,
-	-1.6063152422e-01f,
-	-1.6051592636e-01f,
-	-1.6038955904e-01f,
-	-1.6025249335e-01f,
-	-1.6010480068e-01f,
-	-1.5994655273e-01f,
-	-1.5977782147e-01f,
-	-1.5959867918e-01f,
-	-1.5940919839e-01f,
-	-1.5920945194e-01f,
-	-1.5899951293e-01f,
-	-1.5877945470e-01f,
-	-1.5854935089e-01f,
-	-1.5830927537e-01f,
-	-1.5805930228e-01f,
-	-1.5779950598e-01f,
-	-1.5752996109e-01f,
-	-1.5725074247e-01f,
-	-1.5696192519e-01f,
-	-1.5666358457e-01f,
-	-1.5635579612e-01f,
-	-1.5603863560e-01f,
-	-1.5571217894e-01f,
-	-1.5537650232e-01f,
-	-1.5503168209e-01f,
-	-1.5467779480e-01f,
-	-1.5431491720e-01f,
-	-1.5394312620e-01f,
-	-1.5356249893e-01f,
-	-1.5317311265e-01f,
-	-1.5277504483e-01f,
-	-1.5236837307e-01f,
-	-1.5195317515e-01f,
-	-1.5152952900e-01f,
-	-1.5109751270e-01f,
-	-1.5065720448e-01f,
-	-1.5020868268e-01f,
-	-1.4975202582e-01f,
-	-1.4928731251e-01f,
-	-1.4881462150e-01f,
-	-1.4833403166e-01f,
-	-1.4784562197e-01f,
-	-1.4734947153e-01f,
-	-1.4684565952e-01f,
-	-1.4633426524e-01f,
-	-1.4581536808e-01f,
-	-1.4528904751e-01f,
-	-1.4475538309e-01f,
-	-1.4421445446e-01f,
-	-1.4366634133e-01f,
-	-1.4311112349e-01f,
-	-1.4254888077e-01f,
-	-1.4197969308e-01f,
-	-1.4140364038e-01f,
-	-1.4082080268e-01f,
-	-1.4023126003e-01f,
-	-1.3963509251e-01f,
-	-1.3903238025e-01f,
-	-1.3842320340e-01f,
-	-1.3780764215e-01f,
-	-1.3718577669e-01f,
-	-1.3655768723e-01f,
-	-1.3592345400e-01f,
-	-1.3528315721e-01f,
-	-1.3463687711e-01f,
-	-1.3398469391e-01f,
-	-1.3332668782e-01f,
-	-1.3266293905e-01f,
-	-1.3199352777e-01f,
-	-1.3131853415e-01f,
-	-1.3063803830e-01f,
-	-1.2995212033e-01f,
-	-1.2926086029e-01f,
-	-1.2856433819e-01f,
-	-1.2786263400e-01f,
-	-1.2715582763e-01f,
-	-1.2644399895e-01f,
-	-1.2572722775e-01f,
-	-1.2500559376e-01f,
-	-1.2427917663e-01f,
-	-1.2354805596e-01f,
-	-1.2281231124e-01f,
-	-1.2207202190e-01f,
-	-1.2132726727e-01f,
-	-1.2057812658e-01f,
-	-1.1982467898e-01f,
-	-1.1906700350e-01f,
-	-1.1830517907e-01f,
-	-1.1753928451e-01f,
-	-1.1676939853e-01f,
-	-1.1599559970e-01f,
-	-1.1521796648e-01f,
-	-1.1443657721e-01f,
-	-1.1365151008e-01f,
-	-1.1286284314e-01f,
-	-1.1207065431e-01f,
-	-1.1127502137e-01f,
-	-1.1047602192e-01f,
-	-1.0967373343e-01f,
-	-1.0886823321e-01f,
-	-1.0805959839e-01f,
-	-1.0724790596e-01f,
-	-1.0643323271e-01f,
-	-1.0561565526e-01f,
-	-1.0479525007e-01f,
-	-1.0397209339e-01f,
-	-1.0314626130e-01f,
-	-1.0231782968e-01f,
-	-1.0148687421e-01f,
-	-1.0065347038e-01f,
-	-9.9817693468e-02f,
-	-9.8979618543e-02f,
-	-9.8139320468e-02f,
-	-9.7296873884e-02f,
-	-9.6452353216e-02f,
-	-9.5605832662e-02f,
-	-9.4757386195e-02f,
-	-9.3907087555e-02f,
-	-9.3055010245e-02f,
-	-9.2201227533e-02f,
-	-9.1345812440e-02f,
-	-9.0488837744e-02f,
-	-8.9630375969e-02f,
-	-8.8770499388e-02f,
-	-8.7909280016e-02f,
-	-8.7046789605e-02f,
-	-8.6183099645e-02f,
-	-8.5318281355e-02f,
-	-8.4452405685e-02f,
-	-8.3585543307e-02f,
-	-8.2717764615e-02f,
-	-8.1849139722e-02f,
-	-8.0979738454e-02f,
-	-8.0109630348e-02f,
-	-7.9238884650e-02f,
-	-7.8367570308e-02f,
-	-7.7495755972e-02f,
-	-7.6623509991e-02f,
-	-7.5750900407e-02f,
-	-7.4877994952e-02f,
-	-7.4004861049e-02f,
-	-7.3131565803e-02f,
-	-7.2258176003e-02f,
-	-7.1384758115e-02f,
-	-7.0511378281e-02f,
-	-6.9638102317e-02f,
-	-6.8764995706e-02f,
-	-6.7892123599e-02f,
-	-6.7019550810e-02f,
-	-6.6147341814e-02f,
-	-6.5275560743e-02f,
-	-6.4404271386e-02f,
-	-6.3533537182e-02f,
-	-6.2663421219e-02f,
-	-6.1793986234e-02f,
-	-6.0925294604e-02f,
-	-6.0057408351e-02f,
-	-5.9190389132e-02f,
-	-5.8324298243e-02f,
-	-5.7459196610e-02f,
-	-5.6595144791e-02f,
-	-5.5732202973e-02f,
-	-5.4870430966e-02f,
-	-5.4009888205e-02f,
-	-5.3150633745e-02f,
-	-5.2292726260e-02f,
-	-5.1436224037e-02f,
-	-5.0581184979e-02f,
-	-4.9727666599e-02f,
-	-4.8875726019e-02f,
-	-4.8025419968e-02f,
-	-4.7176804778e-02f,
-	-4.6329936384e-02f,
-	-4.5484870320e-02f,
-	-4.4641661720e-02f,
-	-4.3800365311e-02f,
-	-4.2961035415e-02f,
-	-4.2123725946e-02f,
-	-4.1288490406e-02f,
-	-4.0455381885e-02f,
-	-3.9624453062e-02f,
-	-3.8795756194e-02f,
-	-3.7969343125e-02f,
-	-3.7145265277e-02f,
-	-3.6323573649e-02f,
-	-3.5504318819e-02f,
-	-3.4687550939e-02f,
-	-3.3873319733e-02f,
-	-3.3061674498e-02f,
-	-3.2252664100e-02f,
-	-3.1446336973e-02f,
-	-3.0642741119e-02f,
-	-2.9841924102e-02f,
-	-2.9043933053e-02f,
-	-2.8248814664e-02f,
-	-2.7456615187e-02f,
-	-2.6667380435e-02f,
-	-2.5881155776e-02f,
-	-2.5097986137e-02f,
-	-2.4317916001e-02f,
-	-2.3540989402e-02f,
-	-2.2767249930e-02f,
-	-2.1996740725e-02f,
-	-2.1229504478e-02f,
-	-2.0465583429e-02f,
-	-1.9705019366e-02f,
-	-1.8947853624e-02f,
-	-1.8194127086e-02f,
-	-1.7443880179e-02f,
-	-1.6697152874e-02f,
-	-1.5953984684e-02f,
-	-1.5214414668e-02f,
-	-1.4478481423e-02f,
-	-1.3746223088e-02f,
-	-1.3017677342e-02f,
-	-1.2292881404e-02f,
-	-1.1571872031e-02f,
-	-1.0854685515e-02f,
-	-1.0141357689e-02f,
-	-9.4319239212e-03f,
-	-8.7264191143e-03f,
-	-8.0248777077e-03f,
-	-7.3273336752e-03f,
-	-6.6338205248e-03f,
-	-5.9443712984e-03f,
-	-5.2590185713e-03f,
-	-4.5777944517e-03f,
-	-3.9007305806e-03f,
-	-3.2278581311e-03f,
-	-2.5592078086e-03f,
-	-1.8948098500e-03f,
-	-1.2346940238e-03f,
-	-5.7888962984e-04f,
-	7.2574500785e-05f,
-	7.1967000609e-04f,
-	1.3623689931e-03f,
-	2.0006440380e-03f,
-	2.6344681861e-03f,
-	3.2638149519e-03f,
-	3.8886583191e-03f,
-	4.5089727405e-03f,
-	5.1247331377e-03f,
-	5.7359149015e-03f,
-	6.3424938910e-03f,
-	6.9444464342e-03f,
-	7.5417493272e-03f,
-	8.1343798343e-03f,
-	8.7223156872e-03f,
-	9.3055350856e-03f,
-	9.8840166959e-03f,
-	1.0457739651e-02f,
-	1.1026683552e-02f,
-	1.1590828462e-02f,
-	1.2150154914e-02f,
-	1.2704643903e-02f,
-	1.3254276889e-02f,
-	1.3799035796e-02f,
-	1.4338903012e-02f,
-	1.4873861386e-02f,
-	1.5403894231e-02f,
-	1.5928985320e-02f,
-	1.6449118885e-02f,
-	1.6964279622e-02f,
-	1.7474452682e-02f,
-	1.7979623677e-02f,
-	1.8479778675e-02f,
-	1.8974904200e-02f,
-	1.9464987234e-02f,
-	1.9950015212e-02f,
-	2.0429976023e-02f,
-	2.0904858010e-02f,
-	2.1374649966e-02f,
-	2.1839341136e-02f,
-	2.2298921216e-02f,
-	2.2753380347e-02f,
-	2.3202709122e-02f,
-	2.3646898577e-02f,
-	2.4085940195e-02f,
-	2.4519825903e-02f,
-	2.4948548071e-02f,
-	2.5372099509e-02f,
-	2.5790473469e-02f,
-	2.6203663641e-02f,
-	2.6611664154e-02f,
-	2.7014469572e-02f,
-	2.7412074894e-02f,
-	2.7804475554e-02f,
-	2.8191667417e-02f,
-	2.8573646778e-02f,
-	2.8950410362e-02f,
-	2.9321955322e-02f,
-	2.9688279236e-02f,
-	3.0049380108e-02f,
-	3.0405256364e-02f,
-	3.0755906850e-02f,
-	3.1101330835e-02f,
-	3.1441528003e-02f,
-	3.1776498457e-02f,
-	3.2106242711e-02f,
-	3.2430761697e-02f,
-	3.2750056752e-02f,
-	3.3064129628e-02f,
-	3.3372982482e-02f,
-	3.3676617876e-02f,
-	3.3975038778e-02f,
-	3.4268248556e-02f,
-	3.4556250979e-02f,
-	3.4839050215e-02f,
-	3.5116650827e-02f,
-	3.5389057772e-02f,
-	3.5656276402e-02f,
-	3.5918312457e-02f,
-	3.6175172064e-02f,
-	3.6426861741e-02f,
-	3.6673388384e-02f,
-	3.6914759277e-02f,
-	3.7150982079e-02f,
-	3.7382064831e-02f,
-	3.7608015948e-02f,
-	3.7828844216e-02f,
-	3.8044558798e-02f,
-	3.8255169220e-02f,
-	3.8460685379e-02f,
-	3.8661117536e-02f,
-	3.8856476313e-02f,
-	3.9046772694e-02f,
-	3.9232018019e-02f,
-	3.9412223984e-02f,
-	3.9587402640e-02f,
-	3.9757566385e-02f,
-	3.9922727970e-02f,
-	4.0082900488e-02f,
-	4.0238097378e-02f,
-	4.0388332420e-02f,
-	4.0533619732e-02f,
-	4.0673973768e-02f,
-	4.0809409317e-02f,
-	4.0939941499e-02f,
-	4.1065585763e-02f,
-	4.1186357882e-02f,
-	4.1302273957e-02f,
-	4.1413350406e-02f,
-	4.1519603969e-02f,
-	4.1621051700e-02f,
-	4.1717710968e-02f,
-	4.1809599450e-02f,
-	4.1896735135e-02f,
-	4.1979136315e-02f,
-	4.2056821586e-02f,
-	4.2129809844e-02f,
-	4.2198120283e-02f,
-	4.2261772392e-02f,
-	4.2320785950e-02f,
-	4.2375181028e-02f,
-	4.2424977984e-02f,
-	4.2470197459e-02f,
-	4.2510860375e-02f,
-	4.2546987932e-02f,
-	4.2578601607e-02f,
-	4.2605723151e-02f,
-	4.2628374582e-02f,
-	4.2646578188e-02f,
-	4.2660356521e-02f,
-	4.2669732393e-02f,
-	4.2674728877e-02f,
-	4.2675369301e-02f,
-	4.2671677247e-02f,
-	4.2663676547e-02f,
-	4.2651391279e-02f,
-	4.2634845767e-02f,
-	4.2614064577e-02f,
-	4.2589072513e-02f,
-	4.2559894614e-02f,
-	4.2526556154e-02f,
-	4.2489082636e-02f,
-	4.2447499790e-02f,
-	4.2401833569e-02f,
-	4.2352110150e-02f,
-	4.2298355927e-02f,
-	4.2240597507e-02f,
-	4.2178861713e-02f,
-	4.2113175575e-02f,
-	4.2043566330e-02f,
-	4.1970061420e-02f,
-	4.1892688485e-02f,
-	4.1811475363e-02f,
-	4.1726450087e-02f,
-	4.1637640883e-02f,
-	4.1545076162e-02f,
-	4.1448784524e-02f,
-	4.1348794749e-02f,
-	4.1245135797e-02f,
-	4.1137836804e-02f,
-	4.1026927082e-02f,
-	4.0912436111e-02f,
-	4.0794393537e-02f,
-	4.0672829174e-02f,
-	4.0547772996e-02f,
-	4.0419255132e-02f,
-	4.0287305872e-02f,
-	4.0151955653e-02f,
-	4.0013235065e-02f,
-	3.9871174841e-02f,
-	3.9725805860e-02f,
-	3.9577159139e-02f,
-	3.9425265832e-02f,
-	3.9270157229e-02f,
-	3.9111864748e-02f,
-	3.8950419938e-02f,
-	3.8785854471e-02f,
-	3.8618200142e-02f,
-	3.8447488862e-02f,
-	3.8273752662e-02f,
-	3.8097023682e-02f,
-	3.7917334174e-02f,
-	3.7734716497e-02f,
-	3.7549203111e-02f,
-	3.7360826579e-02f,
-	3.7169619561e-02f,
-	3.6975614811e-02f,
-	3.6778845175e-02f,
-	3.6579343589e-02f,
-	3.6377143072e-02f,
-	3.6172276728e-02f,
-	3.5964777737e-02f,
-	3.5754679361e-02f,
-	3.5542014930e-02f,
-	3.5326817848e-02f,
-	3.5109121586e-02f,
-	3.4888959679e-02f,
-	3.4666365724e-02f,
-	3.4441373376e-02f,
-	3.4214016347e-02f,
-	3.3984328402e-02f,
-	3.3752343353e-02f,
-	3.3518095063e-02f,
-	3.3281617435e-02f,
-	3.3042944416e-02f,
-	3.2802109989e-02f,
-	3.2559148174e-02f,
-	3.2314093021e-02f,
-	3.2066978611e-02f,
-	3.1817839052e-02f,
-	3.1566708475e-02f,
-	3.1313621030e-02f,
-	3.1058610886e-02f,
-	3.0801712229e-02f,
-	3.0542959254e-02f,
-	3.0282386167e-02f,
-	3.0020027180e-02f,
-	2.9755916509e-02f,
-	2.9490088370e-02f,
-	2.9222576977e-02f,
-	2.8953416540e-02f,
-	2.8682641260e-02f,
-	2.8410285331e-02f,
-	2.8136382930e-02f,
-	2.7860968219e-02f,
-	2.7584075342e-02f,
-	2.7305738423e-02f,
-	2.7025991559e-02f,
-	2.6744868823e-02f,
-	2.6462404255e-02f,
-	2.6178631866e-02f,
-	2.5893585631e-02f,
-	2.5607299488e-02f,
-	2.5319807333e-02f,
-	2.5031143020e-02f,
-	2.4741340359e-02f,
-	2.4450433111e-02f,
-	2.4158454985e-02f,
-	2.3865439638e-02f,
-	2.3571420671e-02f,
-	2.3276431626e-02f,
-	2.2980505985e-02f,
-	2.2683677165e-02f,
-	2.2385978519e-02f,
-	2.2087443328e-02f,
-	2.1788104806e-02f,
-	2.1487996092e-02f,
-	2.1187150246e-02f,
-	2.0885600255e-02f,
-	2.0583379019e-02f,
-	2.0280519361e-02f,
-	1.9977054012e-02f,
-	1.9673015620e-02f,
-	1.9368436739e-02f,
-	1.9063349831e-02f,
-	1.8757787265e-02f,
-	1.8451781309e-02f,
-	1.8145364133e-02f,
-	1.7838567804e-02f,
-	1.7531424285e-02f,
-	1.7223965433e-02f,
-	1.6916222994e-02f,
-	1.6608228604e-02f,
-	1.6300013786e-02f,
-	1.5991609946e-02f,
-	1.5683048372e-02f,
-	1.5374360234e-02f,
-	1.5065576578e-02f,
-	1.4756728326e-02f,
-	1.4447846274e-02f,
-	1.4138961088e-02f,
-	1.3830103305e-02f,
-	1.3521303329e-02f,
-	1.3212591429e-02f,
-	1.2903997736e-02f,
-	1.2595552244e-02f,
-	1.2287284805e-02f,
-	1.1979225129e-02f,
-	1.1671402780e-02f,
-	1.1363847177e-02f,
-	1.1056587589e-02f,
-	1.0749653134e-02f,
-	1.0443072780e-02f,
-	1.0136875338e-02f,
-	9.8310894644e-03f,
-	9.5257436569e-03f,
-	9.2208662537e-03f,
-	8.9164854314e-03f,
-	8.6126292032e-03f,
-	8.3093254171e-03f,
-	8.0066017543e-03f,
-	7.7044857273e-03f,
-	7.4030046785e-03f,
-	7.1021857781e-03f,
-	6.8020560229e-03f,
-	6.5026422344e-03f,
-	6.2039710570e-03f,
-	5.9060689569e-03f,
-	5.6089622201e-03f,
-	5.3126769510e-03f,
-	5.0172390708e-03f,
-	4.7226743160e-03f,
-	4.4290082371e-03f,
-	4.1362661966e-03f,
-	3.8444733682e-03f,
-	3.5536547349e-03f,
-	3.2638350877e-03f,
-	2.9750390242e-03f,
-	2.6872909473e-03f,
-	2.4006150638e-03f,
-	2.1150353829e-03f,
-	1.8305757151e-03f,
-	1.5472596709e-03f,
-	1.2651106595e-03f,
-	9.8415188714e-04f,
-	7.0440635664e-04f,
-	4.2589686556e-04f,
-	1.4864600525e-04f,
-	-1.2732384036e-04f,
-	-4.0199049591e-04f,
-	-6.7533199574e-04f,
-	-9.4732658499e-04f,
-	-1.2179527207e-03f,
-	-1.4871890729e-03f,
-	-1.7550145256e-03f,
-	-2.0214081779e-03f,
-	-2.2863493448e-03f,
-	-2.5498175586e-03f,
-	-2.8117925692e-03f,
-	-3.0722543459e-03f,
-	-3.3311830774e-03f,
-	-3.5885591735e-03f,
-	-3.8443632653e-03f,
-	-4.0985762068e-03f,
-	-4.3511790749e-03f,
-	-4.6021531709e-03f,
-	-4.8514800209e-03f,
-	-5.0991413768e-03f,
-	-5.3451192170e-03f,
-	-5.5893957468e-03f,
-	-5.8319533996e-03f,
-	-6.0727748375e-03f,
-	-6.3118429516e-03f,
-	-6.5491408631e-03f,
-	-6.7846519234e-03f,
-	-7.0183597155e-03f,
-	-7.2502480536e-03f,
-	-7.4803009845e-03f,
-	-7.7085027878e-03f,
-	-7.9348379761e-03f,
-	-8.1592912962e-03f,
-	-8.3818477290e-03f,
-	-8.6024924902e-03f,
-	-8.8212110307e-03f,
-	-9.0379890369e-03f,
-	-9.2528124313e-03f,
-	-9.4656673727e-03f,
-	-9.6765402568e-03f,
-	-9.8854177161e-03f,
-	-1.0092286621e-02f,
-	-1.0297134078e-02f,
-	-1.0499947434e-02f,
-	-1.0700714271e-02f,
-	-1.0899422413e-02f,
-	-1.1096059920e-02f,
-	-1.1290615091e-02f,
-	-1.1483076464e-02f,
-	-1.1673432818e-02f,
-	-1.1861673169e-02f,
-	-1.2047786773e-02f,
-	-1.2231763126e-02f,
-	-1.2413591962e-02f,
-	-1.2593263256e-02f,
-	-1.2770767222e-02f,
-	-1.2946094313e-02f,
-	-1.3119235223e-02f,
-	-1.3290180884e-02f,
-	-1.3458922468e-02f,
-	-1.3625451386e-02f,
-	-1.3789759290e-02f,
-	-1.3951838068e-02f,
-	-1.4111679849e-02f,
-	-1.4269277002e-02f,
-	-1.4424622132e-02f,
-	-1.4577708084e-02f,
-	-1.4728527942e-02f,
-	-1.4877075025e-02f,
-	-1.5023342894e-02f,
-	-1.5167325344e-02f,
-	-1.5309016408e-02f,
-	-1.5448410359e-02f,
-	-1.5585501702e-02f,
-	-1.5720285181e-02f,
-	-1.5852755775e-02f,
-	-1.5982908698e-02f,
-	-1.6110739401e-02f,
-	-1.6236243568e-02f,
-	-1.6359417118e-02f,
-	-1.6480256202e-02f,
-	-1.6598757208e-02f,
-	-1.6714916752e-02f,
-	-1.6828731686e-02f,
-	-1.6940199092e-02f,
-	-1.7049316285e-02f,
-	-1.7156080807e-02f,
-	-1.7260490435e-02f,
-	-1.7362543171e-02f,
-	-1.7462237248e-02f,
-	-1.7559571128e-02f,
-	-1.7654543497e-02f,
-	-1.7747153273e-02f,
-	-1.7837399595e-02f,
-	-1.7925281832e-02f,
-	-1.8010799574e-02f,
-	-1.8093952638e-02f,
-	-1.8174741061e-02f,
-	-1.8253165106e-02f,
-	-1.8329225256e-02f,
-	-1.8402922215e-02f,
-	-1.8474256906e-02f,
-	-1.8543230473e-02f,
-	-1.8609844277e-02f,
-	-1.8674099899e-02f,
-	-1.8735999133e-02f,
-	-1.8795543991e-02f,
-	-1.8852736699e-02f,
-	-1.8907579698e-02f,
-	-1.8960075641e-02f,
-	-1.9010227392e-02f,
-	-1.9058038029e-02f,
-	-1.9103510836e-02f,
-	-1.9146649310e-02f,
-	-1.9187457153e-02f,
-	-1.9225938275e-02f,
-	-1.9262096793e-02f,
-	-1.9295937027e-02f,
-	-1.9327463501e-02f,
-	-1.9356680943e-02f,
-	-1.9383594281e-02f,
-	-1.9408208645e-02f,
-	-1.9430529363e-02f,
-	-1.9450561961e-02f,
-	-1.9468312164e-02f,
-	-1.9483785890e-02f,
-	-1.9496989254e-02f,
-	-1.9507928563e-02f,
-	-1.9516610317e-02f,
-	-1.9523041206e-02f,
-	-1.9527228112e-02f,
-	-1.9529178102e-02f,
-	-1.9528898434e-02f,
-	-1.9526396549e-02f,
-	-1.9521680074e-02f,
-	-1.9514756820e-02f,
-	-1.9505634779e-02f,
-	-1.9494322124e-02f,
-	-1.9480827208e-02f,
-	-1.9465158560e-02f,
-	-1.9447324889e-02f,
-	-1.9427335078e-02f,
-	-1.9405198182e-02f,
-	-1.9380923431e-02f,
-	-1.9354520226e-02f,
-	-1.9325998137e-02f,
-	-1.9295366903e-02f,
-	-1.9262636428e-02f,
-	-1.9227816785e-02f,
-	-1.9190918208e-02f,
-	-1.9151951095e-02f,
-	-1.9110926005e-02f,
-	-1.9067853657e-02f,
-	-1.9022744926e-02f,
-	-1.8975610848e-02f,
-	-1.8926462608e-02f,
-	-1.8875311552e-02f,
-	-1.8822169171e-02f,
-	-1.8767047111e-02f,
-	-1.8709957167e-02f,
-	-1.8650911280e-02f,
-	-1.8589921536e-02f,
-	-1.8527000168e-02f,
-	-1.8462159551e-02f,
-	-1.8395412200e-02f,
-	-1.8326770770e-02f,
-	-1.8256248057e-02f,
-	-1.8183856988e-02f,
-	-1.8109610630e-02f,
-	-1.8033522181e-02f,
-	-1.7955604970e-02f,
-	-1.7875872457e-02f,
-	-1.7794338230e-02f,
-	-1.7711016005e-02f,
-	-1.7625919621e-02f,
-	-1.7539063042e-02f,
-	-1.7450460352e-02f,
-	-1.7360125758e-02f,
-	-1.7268073582e-02f,
-	-1.7174318266e-02f,
-	-1.7078874365e-02f,
-	-1.6981756548e-02f,
-	-1.6882979596e-02f,
-	-1.6782558400e-02f,
-	-1.6680507958e-02f,
-	-1.6576843377e-02f,
-	-1.6471579868e-02f,
-	-1.6364732743e-02f,
-	-1.6256317419e-02f,
-	-1.6146349411e-02f,
-	-1.6034844332e-02f,
-	-1.5921817891e-02f,
-	-1.5807285894e-02f,
-	-1.5691264236e-02f,
-	-1.5573768908e-02f,
-	-1.5454815985e-02f,
-	-1.5334421634e-02f,
-	-1.5212602106e-02f,
-	-1.5089373736e-02f,
-	-1.4964752943e-02f,
-	-1.4838756225e-02f,
-	-1.4711400159e-02f,
-	-1.4582701402e-02f,
-	-1.4452676683e-02f,
-	-1.4321342805e-02f,
-	-1.4188716646e-02f,
-	-1.4054815151e-02f,
-	-1.3919655335e-02f,
-	-1.3783254279e-02f,
-	-1.3645629130e-02f,
-	-1.3506797096e-02f,
-	-1.3366775449e-02f,
-	-1.3225581519e-02f,
-	-1.3083232694e-02f,
-	-1.2939746419e-02f,
-	-1.2795140192e-02f,
-	-1.2649431566e-02f,
-	-1.2502638141e-02f,
-	-1.2354777569e-02f,
-	-1.2205867550e-02f,
-	-1.2055925827e-02f,
-	-1.1904970189e-02f,
-	-1.1753018465e-02f,
-	-1.1600088526e-02f,
-	-1.1446198281e-02f,
-	-1.1291365676e-02f,
-	-1.1135608692e-02f,
-	-1.0978945343e-02f,
-	-1.0821393676e-02f,
-	-1.0662971765e-02f,
-	-1.0503697715e-02f,
-	-1.0343589655e-02f,
-	-1.0182665742e-02f,
-	-1.0020944151e-02f,
-	-9.8584430839e-03f,
-	-9.6951807574e-03f,
-	-9.5311754080e-03f,
-	-9.3664452882e-03f,
-	-9.2010086644e-03f,
-	-9.0348838159e-03f,
-	-8.8680890328e-03f,
-	-8.7006426143e-03f,
-	-8.5325628674e-03f,
-	-8.3638681046e-03f,
-	-8.1945766428e-03f,
-	-8.0247068011e-03f,
-	-7.8542768997e-03f,
-	-7.6833052575e-03f,
-	-7.5118101911e-03f,
-	-7.3398100129e-03f,
-	-7.1673230291e-03f,
-	-6.9943675386e-03f,
-	-6.8209618311e-03f,
-	-6.6471241853e-03f,
-	-6.4728728677e-03f,
-	-6.2982261303e-03f,
-	-6.1232022096e-03f,
-	-5.9478193248e-03f,
-	-5.7720956760e-03f,
-	-5.5960494428e-03f,
-	-5.4196987825e-03f,
-	-5.2430618288e-03f,
-	-5.0661566899e-03f,
-	-4.8890014472e-03f,
-	-4.7116141535e-03f,
-	-4.5340128314e-03f,
-	-4.3562154721e-03f,
-	-4.1782400335e-03f,
-	-4.0001044387e-03f,
-	-3.8218265746e-03f,
-	-3.6434242903e-03f,
-	-3.4649153955e-03f,
-	-3.2863176591e-03f,
-	-3.1076488078e-03f,
-	-2.9289265242e-03f,
-	-2.7501684456e-03f,
-	-2.5713921627e-03f,
-	-2.3926152177e-03f,
-	-2.2138551031e-03f,
-	-2.0351292602e-03f,
-	-1.8564550776e-03f,
-	-1.6778498898e-03f,
-	-1.4993309757e-03f,
-	-1.3209155575e-03f,
-	-1.1426207986e-03f,
-	-9.6446380315e-04f,
-	-7.8646161366e-04f,
-	-6.0863121034e-04f,
-	-4.3098950939e-04f,
-	-2.5355336174e-04f,
-	-7.6339551662e-05f,
-	1.0063520458e-04f,
-	2.7735426005e-04f,
-	4.5380103848e-04f,
-	6.2995903558e-04f,
-	8.0581182036e-04f,
-	9.8134303640e-04f,
-	1.1565364032e-03f,
-	1.3313757172e-03f,
-	1.5058448537e-03f,
-	1.6799277671e-03f,
-	1.8536084932e-03f,
-	2.0268711497e-03f,
-	2.1996999377e-03f,
-	2.3720791430e-03f,
-	2.5439931370e-03f,
-	2.7154263782e-03f,
-	2.8863634133e-03f,
-	3.0567888782e-03f,
-	3.2266874994e-03f,
-	3.3960440949e-03f,
-	3.5648435757e-03f,
-	3.7330709464e-03f,
-	3.9007113069e-03f,
-	4.0677498528e-03f,
-	4.2341718774e-03f,
-	4.3999627719e-03f,
-	4.5651080270e-03f,
-	4.7295932336e-03f,
-	4.8934040843e-03f,
-	5.0565263740e-03f,
-	5.2189460011e-03f,
-	5.3806489685e-03f,
-	5.5416213846e-03f,
-	5.7018494643e-03f,
-	5.8613195297e-03f,
-	6.0200180117e-03f,
-	6.1779314502e-03f,
-	6.3350464956e-03f,
-	6.4913499091e-03f,
-	6.6468285646e-03f,
-	6.8014694484e-03f,
-	6.9552596611e-03f,
-	7.1081864178e-03f,
-	7.2602370494e-03f,
-	7.4113990032e-03f,
-	7.5616598436e-03f,
-	7.7110072533e-03f,
-	7.8594290338e-03f,
-	8.0069131065e-03f,
-	8.1534475132e-03f,
-	8.2990204167e-03f,
-	8.4436201022e-03f,
-	8.5872349775e-03f,
-	8.7298535738e-03f,
-	8.8714645466e-03f,
-	9.0120566763e-03f,
-	9.1516188689e-03f,
-	9.2901401566e-03f,
-	9.4276096988e-03f,
-	9.5640167820e-03f,
-	9.6993508215e-03f,
-	9.8336013611e-03f,
-	9.9667580742e-03f,
-	1.0098810764e-02f,
-	1.0229749365e-02f,
-	1.0359563942e-02f,
-	1.0488244692e-02f,
-	1.0615781946e-02f,
-	1.0742166164e-02f,
-	1.0867387943e-02f,
-	1.0991438012e-02f,
-	1.1114307235e-02f,
-	1.1235986611e-02f,
-	1.1356467274e-02f,
-	1.1475740494e-02f,
-	1.1593797677e-02f,
-	1.1710630366e-02f,
-	1.1826230240e-02f,
-	1.1940589117e-02f,
-	1.2053698952e-02f,
-	1.2165551838e-02f,
-	1.2276140007e-02f,
-	1.2385455829e-02f,
-	1.2493491815e-02f,
-	1.2600240615e-02f,
-	1.2705695016e-02f,
-	1.2809847951e-02f,
-	1.2912692487e-02f,
-	1.3014221836e-02f,
-	1.3114429350e-02f,
-	1.3213308522e-02f,
-	1.3310852985e-02f,
-	1.3407056516e-02f,
-	1.3501913032e-02f,
-	1.3595416593e-02f,
-	1.3687561402e-02f,
-	1.3778341802e-02f,
-	1.3867752280e-02f,
-	1.3955787465e-02f,
-	1.4042442130e-02f,
-	1.4127711190e-02f,
-	1.4211589702e-02f,
-	1.4294072868e-02f,
-	1.4375156031e-02f,
-	1.4454834679e-02f,
-	1.4533104441e-02f,
-	1.4609961092e-02f,
-	1.4685400548e-02f,
-	1.4759418870e-02f,
-	1.4832012259e-02f,
-	1.4903177064e-02f,
-	1.4972909772e-02f,
-	1.5041207018e-02f,
-	1.5108065576e-02f,
-	1.5173482365e-02f,
-	1.5237454447e-02f,
-	1.5299979026e-02f,
-	1.5361053449e-02f,
-	1.5420675205e-02f,
-	1.5478841927e-02f,
-	1.5535551388e-02f,
-	1.5590801504e-02f,
-	1.5644590335e-02f,
-	1.5696916079e-02f,
-	1.5747777078e-02f,
-	1.5797171814e-02f,
-	1.5845098912e-02f,
-	1.5891557136e-02f,
-	1.5936545392e-02f,
-	1.5980062724e-02f,
-	1.6022108319e-02f,
-	1.6062681501e-02f,
-	1.6101781736e-02f,
-	1.6139408628e-02f,
-	1.6175561920e-02f,
-	1.6210241493e-02f,
-	1.6243447366e-02f,
-	1.6275179698e-02f,
-	1.6305438783e-02f,
-	1.6334225053e-02f,
-	1.6361539077e-02f,
-	1.6387381560e-02f,
-	1.6411753342e-02f,
-	1.6434655400e-02f,
-	1.6456088846e-02f,
-	1.6476054924e-02f,
-	1.6494555016e-02f,
-	1.6511590634e-02f,
-	1.6527163427e-02f,
-	1.6541275172e-02f,
-	1.6553927782e-02f,
-	1.6565123301e-02f,
-	1.6574863902e-02f,
-	1.6583151891e-02f,
-	1.6589989703e-02f,
-	1.6595379903e-02f,
-	1.6599325184e-02f,
-	1.6601828369e-02f,
-	1.6602892407e-02f,
-	1.6602520376e-02f,
-	1.6600715479e-02f,
-	1.6597481046e-02f,
-	1.6592820532e-02f,
-	1.6586737516e-02f,
-	1.6579235703e-02f,
-	1.6570318919e-02f,
-	1.6559991115e-02f,
-	1.6548256364e-02f,
-	1.6535118858e-02f,
-	1.6520582911e-02f,
-	1.6504652959e-02f,
-	1.6487333555e-02f,
-	1.6468629371e-02f,
-	1.6448545197e-02f,
-	1.6427085941e-02f,
-	1.6404256627e-02f,
-	1.6380062393e-02f,
-	1.6354508493e-02f,
-	1.6327600297e-02f,
-	1.6299343286e-02f,
-	1.6269743054e-02f,
-	1.6238805307e-02f,
-	1.6206535861e-02f,
-	1.6172940645e-02f,
-	1.6138025694e-02f,
-	1.6101797154e-02f,
-	1.6064261276e-02f,
-	1.6025424420e-02f,
-	1.5985293051e-02f,
-	1.5943873741e-02f,
-	1.5901173162e-02f,
-	1.5857198094e-02f,
-	1.5811955417e-02f,
-	1.5765452112e-02f,
-	1.5717695263e-02f,
-	1.5668692053e-02f,
-	1.5618449762e-02f,
-	1.5566975770e-02f,
-	1.5514277554e-02f,
-	1.5460362687e-02f,
-	1.5405238835e-02f,
-	1.5348913762e-02f,
-	1.5291395322e-02f,
-	1.5232691464e-02f,
-	1.5172810227e-02f,
-	1.5111759740e-02f,
-	1.5049548222e-02f,
-	1.4986183981e-02f,
-	1.4921675411e-02f,
-	1.4856030995e-02f,
-	1.4789259300e-02f,
-	1.4721368976e-02f,
-	1.4652368760e-02f,
-	1.4582267468e-02f,
-	1.4511074001e-02f,
-	1.4438797337e-02f,
-	1.4365446535e-02f,
-	1.4291030733e-02f,
-	1.4215559146e-02f,
-	1.4139041065e-02f,
-	1.4061485856e-02f,
-	1.3982902960e-02f,
-	1.3903301892e-02f,
-	1.3822692237e-02f,
-	1.3741083652e-02f,
-	1.3658485865e-02f,
-	1.3574908672e-02f,
-	1.3490361937e-02f,
-	1.3404855591e-02f,
-	1.3318399631e-02f,
-	1.3231004117e-02f,
-	1.3142679176e-02f,
-	1.3053434993e-02f,
-	1.2963281819e-02f,
-	1.2872229961e-02f,
-	1.2780289790e-02f,
-	1.2687471729e-02f,
-	1.2593786264e-02f,
-	1.2499243934e-02f,
-	1.2403855332e-02f,
-	1.2307631107e-02f,
-	1.2210581958e-02f,
-	1.2112718638e-02f,
-	1.2014051949e-02f,
-	1.1914592742e-02f,
-	1.1814351917e-02f,
-	1.1713340420e-02f,
-	1.1611569244e-02f,
-	1.1509049426e-02f,
-	1.1405792045e-02f,
-	1.1301808227e-02f,
-	1.1197109134e-02f,
-	1.1091705973e-02f,
-	1.0985609986e-02f,
-	1.0878832456e-02f,
-	1.0771384702e-02f,
-	1.0663278077e-02f,
-	1.0554523971e-02f,
-	1.0445133806e-02f,
-	1.0335119037e-02f,
-	1.0224491150e-02f,
-	1.0113261661e-02f,
-	1.0001442113e-02f,
-	9.8890440810e-03f,
-	9.7760791628e-03f,
-	9.6625589835e-03f,
-	9.5484951920e-03f,
-	9.4338994606e-03f,
-	9.3187834838e-03f,
-	9.2031589768e-03f,
-	9.0870376747e-03f,
-	8.9704313315e-03f,
-	8.8533517185e-03f,
-	8.7358106236e-03f,
-	8.6178198500e-03f,
-	8.4993912150e-03f,
-	8.3805365491e-03f,
-	8.2612676947e-03f,
-	8.1415965048e-03f,
-	8.0215348424e-03f,
-	7.9010945790e-03f,
-	7.7802875934e-03f,
-	7.6591257709e-03f,
-	7.5376210020e-03f,
-	7.4157851812e-03f,
-	7.2936302063e-03f,
-	7.1711679767e-03f,
-	7.0484103928e-03f,
-	6.9253693546e-03f,
-	6.8020567607e-03f,
-	6.6784845073e-03f,
-	6.5546644868e-03f,
-	6.4306085873e-03f,
-	6.3063286907e-03f,
-	6.1818366724e-03f,
-	6.0571443996e-03f,
-	5.9322637307e-03f,
-	5.8072065139e-03f,
-	5.6819845863e-03f,
-	5.5566097726e-03f,
-	5.4310938844e-03f,
-	5.3054487190e-03f,
-	5.1796860582e-03f,
-	5.0538176672e-03f,
-	4.9278552938e-03f,
-	4.8018106674e-03f,
-	4.6756954977e-03f,
-	4.5495214735e-03f,
-	4.4233002624e-03f,
-	4.2970435090e-03f,
-	4.1707628342e-03f,
-	4.0444698342e-03f,
-	3.9181760795e-03f,
-	3.7918931138e-03f,
-	3.6656324531e-03f,
-	3.5394055844e-03f,
-	3.4132239651e-03f,
-	3.2870990220e-03f,
-	3.1610421498e-03f,
-	3.0350647108e-03f,
-	2.9091780334e-03f,
-	2.7833934114e-03f,
-	2.6577221029e-03f,
-	2.5321753297e-03f,
-	2.4067642756e-03f,
-	2.2815000863e-03f,
-	2.1563938677e-03f,
-	2.0314566857e-03f,
-	1.9066995647e-03f,
-	1.7821334869e-03f,
-	1.6577693913e-03f,
-	1.5336181728e-03f,
-	1.4096906817e-03f,
-	1.2859977218e-03f,
-	1.1625500508e-03f,
-	1.0393583783e-03f,
-	9.1643336549e-04f,
-	7.9378562422e-04f,
-	6.7142571600e-04f,
-	5.4936415122e-04f,
-	4.2761138828e-04f,
-	3.0617783272e-04f,
-	1.8507383641e-04f,
-	6.4309696692e-05f,
-	-5.6104344430e-05f,
-	-1.7615810113e-04f,
-	-2.9584144458e-04f,
-	-4.1514430372e-04f,
-	-5.3405666610e-04f,
-	-6.5256857866e-04f,
-	-7.7067014849e-04f,
-	-8.8835154366e-04f,
-	-1.0056029939e-03f,
-	-1.1224147916e-03f,
-	-1.2387772921e-03f,
-	-1.3546809151e-03f,
-	-1.4701161447e-03f,
-	-1.5850735306e-03f,
-	-1.6995436887e-03f,
-	-1.8135173019e-03f,
-	-1.9269851205e-03f,
-	-2.0399379635e-03f,
-	-2.1523667184e-03f,
-	-2.2642623429e-03f,
-	-2.3756158648e-03f,
-	-2.4864183831e-03f,
-	-2.5966610685e-03f,
-	-2.7063351640e-03f,
-	-2.8154319856e-03f,
-	-2.9239429232e-03f,
-	-3.0318594408e-03f,
-	-3.1391730774e-03f,
-	-3.2458754475e-03f,
-	-3.3519582417e-03f,
-	-3.4574132274e-03f,
-	-3.5622322494e-03f,
-	-3.6664072303e-03f,
-	-3.7699301711e-03f,
-	-3.8727931522e-03f,
-	-3.9749883332e-03f,
-	-4.0765079540e-03f,
-	-4.1773443354e-03f,
-	-4.2774898791e-03f,
-	-4.3769370687e-03f,
-	-4.4756784700e-03f,
-	-4.5737067317e-03f,
-	-4.6710145856e-03f,
-	-4.7675948473e-03f,
-	-4.8634404166e-03f,
-	-4.9585442780e-03f,
-	-5.0528995012e-03f,
-	-5.1464992414e-03f,
-	-5.2393367399e-03f,
-	-5.3314053246e-03f,
-	-5.4226984101e-03f,
-	-5.5132094984e-03f,
-	-5.6029321792e-03f,
-	-5.6918601304e-03f,
-	-5.7799871184e-03f,
-	-5.8673069984e-03f,
-	-5.9538137150e-03f,
-	-6.0395013024e-03f,
-	-6.1243638846e-03f,
-	-6.2083956763e-03f,
-	-6.2915909823e-03f,
-	-6.3739441991e-03f,
-	-6.4554498138e-03f,
-	-6.5361024056e-03f,
-	-6.6158966455e-03f,
-	-6.6948272966e-03f,
-	-6.7728892144e-03f,
-	-6.8500773475e-03f,
-	-6.9263867371e-03f,
-	-7.0018125181e-03f,
-	-7.0763499185e-03f,
-	-7.1499942603e-03f,
-	-7.2227409595e-03f,
-	-7.2945855260e-03f,
-	-7.3655235645e-03f,
-	-7.4355507740e-03f,
-	-7.5046629484e-03f,
-	-7.5728559766e-03f,
-	-7.6401258426e-03f,
-	-7.7064686256e-03f,
-	-7.7718805004e-03f,
-	-7.8363577375e-03f,
-	-7.8998967027e-03f,
-	-7.9624938582e-03f,
-	-8.0241457618e-03f,
-	-8.0848490675e-03f,
-	-8.1446005255e-03f,
-	-8.2033969822e-03f,
-	-8.2612353806e-03f,
-	-8.3181127597e-03f,
-	-8.3740262553e-03f,
-	-8.4289730997e-03f,
-	-8.4829506217e-03f,
-	-8.5359562468e-03f,
-	-8.5879874970e-03f,
-	-8.6390419911e-03f,
-	-8.6891174446e-03f,
-	-8.7382116695e-03f,
-	-8.7863225746e-03f,
-	-8.8334481653e-03f,
-	-8.8795865436e-03f,
-	-8.9247359082e-03f,
-	-8.9688945541e-03f,
-	-9.0120608730e-03f,
-	-9.0542333529e-03f,
-	-9.0954105782e-03f,
-	-9.1355912295e-03f,
-	-9.1747740837e-03f,
-	-9.2129580137e-03f,
-	-9.2501419883e-03f,
-	-9.2863250724e-03f,
-	-9.3215064264e-03f,
-	-9.3556853064e-03f,
-	-9.3888610640e-03f,
-	-9.4210331461e-03f,
-	-9.4522010948e-03f,
-	-9.4823645470e-03f,
-	-9.5115232347e-03f,
-	-9.5396769843e-03f,
-	-9.5668257170e-03f,
-	-9.5929694477e-03f,
-	-9.6181082860e-03f,
-	-9.6422424347e-03f,
-	-9.6653721907e-03f,
-	-9.6874979440e-03f,
-	-9.7086201779e-03f,
-	-9.7287394683e-03f,
-	-9.7478564842e-03f,
-	-9.7659719865e-03f,
-	-9.7830868285e-03f,
-	-9.7992019553e-03f,
-	-9.8143184032e-03f,
-	-9.8284373002e-03f,
-	-9.8415598649e-03f,
-	-9.8536874066e-03f,
-	-9.8648213251e-03f,
-	-9.8749631098e-03f,
-	-9.8841143402e-03f,
-	-9.8922766846e-03f,
-	-9.8994519006e-03f,
-	-9.9056418343e-03f,
-	-9.9108484201e-03f,
-	-9.9150736800e-03f,
-	-9.9183197239e-03f,
-	-9.9205887483e-03f,
-	-9.9218830369e-03f,
-	-9.9222049593e-03f,
-	-9.9215569713e-03f,
-	-9.9199416139e-03f,
-	-9.9173615134e-03f,
-	-9.9138193805e-03f,
-	-9.9093180104e-03f,
-	-9.9038602818e-03f,
-	-9.8974491568e-03f,
-	-9.8900876803e-03f,
-	-9.8817789797e-03f,
-	-9.8725262641e-03f,
-	-9.8623328243e-03f,
-	-9.8512020318e-03f,
-	-9.8391373389e-03f,
-	-9.8261422775e-03f,
-	-9.8122204593e-03f,
-	-9.7973755748e-03f,
-	-9.7816113930e-03f,
-	-9.7649317607e-03f,
-	-9.7473406023e-03f,
-	-9.7288419191e-03f,
-	-9.7094397885e-03f,
-	-9.6891383638e-03f,
-	-9.6679418737e-03f,
-	-9.6458546214e-03f,
-	-9.6228809843e-03f,
-	-9.5990254133e-03f,
-	-9.5742924324e-03f,
-	-9.5486866379e-03f,
-	-9.5222126979e-03f,
-	-9.4948753520e-03f,
-	-9.4666794100e-03f,
-	-9.4376297522e-03f,
-	-9.4077313279e-03f,
-	-9.3769891556e-03f,
-	-9.3454083218e-03f,
-	-9.3129939806e-03f,
-	-9.2797513531e-03f,
-	-9.2456857268e-03f,
-	-9.2108024547e-03f,
-	-9.1751069552e-03f,
-	-9.1386047108e-03f,
-	-9.1013012678e-03f,
-	-9.0632022357e-03f,
-	-9.0243132866e-03f,
-	-8.9846401540e-03f,
-	-8.9441886329e-03f,
-	-8.9029645786e-03f,
-	-8.8609739060e-03f,
-	-8.8182225895e-03f,
-	-8.7747166615e-03f,
-	-8.7304622125e-03f,
-	-8.6854653897e-03f,
-	-8.6397323968e-03f,
-	-8.5932694932e-03f,
-	-8.5460829931e-03f,
-	-8.4981792650e-03f,
-	-8.4495647310e-03f,
-	-8.4002458658e-03f,
-	-8.3502291963e-03f,
-	-8.2995213008e-03f,
-	-8.2481288084e-03f,
-	-8.1960583977e-03f,
-	-8.1433167968e-03f,
-	-8.0899107822e-03f,
-	-8.0358471781e-03f,
-	-7.9811328558e-03f,
-	-7.9257747325e-03f,
-	-7.8697797713e-03f,
-	-7.8131549798e-03f,
-	-7.7559074096e-03f,
-	-7.6980441557e-03f,
-	-7.6395723555e-03f,
-	-7.5804991880e-03f,
-	-7.5208318735e-03f,
-	-7.4605776722e-03f,
-	-7.3997438838e-03f,
-	-7.3383378469e-03f,
-	-7.2763669377e-03f,
-	-7.2138385698e-03f,
-	-7.1507601930e-03f,
-	-7.0871392928e-03f,
-	-7.0229833895e-03f,
-	-6.9583000375e-03f,
-	-6.8930968242e-03f,
-	-6.8273813699e-03f,
-	-6.7611613263e-03f,
-	-6.6944443760e-03f,
-	-6.6272382321e-03f,
-	-6.5595506366e-03f,
-	-6.4913893603e-03f,
-	-6.4227622018e-03f,
-	-6.3536769865e-03f,
-	-6.2841415663e-03f,
-	-6.2141638183e-03f,
-	-6.1437516442e-03f,
-	-6.0729129696e-03f,
-	-6.0016557432e-03f,
-	-5.9299879357e-03f,
-	-5.8579175396e-03f,
-	-5.7854525677e-03f,
-	-5.7126010529e-03f,
-	-5.6393710470e-03f,
-	-5.5657706203e-03f,
-	-5.4918078604e-03f,
-	-5.4174908715e-03f,
-	-5.3428277739e-03f,
-	-5.2678267029e-03f,
-	-5.1924958081e-03f,
-	-5.1168432525e-03f,
-	-5.0408772121e-03f,
-	-4.9646058744e-03f,
-	-4.8880374384e-03f,
-	-4.8111801133e-03f,
-	-4.7340421177e-03f,
-	-4.6566316792e-03f,
-	-4.5789570332e-03f,
-	-4.5010264223e-03f,
-	-4.4228480955e-03f,
-	-4.3444303074e-03f,
-	-4.2657813174e-03f,
-	-4.1869093889e-03f,
-	-4.1078227886e-03f,
-	-4.0285297856e-03f,
-	-3.9490386507e-03f,
-	-3.8693576556e-03f,
-	-3.7894950721e-03f,
-	-3.7094591714e-03f,
-	-3.6292582232e-03f,
-	-3.5489004950e-03f,
-	-3.4683942514e-03f,
-	-3.3877477530e-03f,
-	-3.3069692563e-03f,
-	-3.2260670122e-03f,
-	-3.1450492656e-03f,
-	-3.0639242547e-03f,
-	-2.9827002100e-03f,
-	-2.9013853538e-03f,
-	-2.8199878991e-03f,
-	-2.7385160493e-03f,
-	-2.6569779972e-03f,
-	-2.5753819241e-03f,
-	-2.4937359993e-03f,
-	-2.4120483794e-03f,
-	-2.3303272072e-03f,
-	-2.2485806113e-03f,
-	-2.1668167054e-03f,
-	-2.0850435873e-03f,
-	-2.0032693382e-03f,
-	-1.9215020223e-03f,
-	-1.8397496857e-03f,
-	-1.7580203559e-03f,
-	-1.6763220410e-03f,
-	-1.5946627289e-03f,
-	-1.5130503870e-03f,
-	-1.4314929607e-03f,
-	-1.3499983737e-03f,
-	-1.2685745263e-03f,
-	-1.1872292956e-03f,
-	-1.1059705342e-03f,
-	-1.0248060696e-03f,
-	-9.4374370384e-04f,
-	-8.6279121241e-04f,
-	-7.8195634386e-04f,
-	-7.0124681898e-04f,
-	-6.2067033018e-04f,
-	-5.4023454082e-04f,
-	-4.5994708453e-04f,
-	-3.7981556457e-04f,
-	-2.9984755316e-04f,
-	-2.2005059087e-04f,
-	-1.4043218589e-04f,
-	-6.0999813496e-05f,
-	1.8239084681e-05f,
-	9.7277101231e-05f,
-	1.7610686362e-04f,
-	2.5472103479e-04f,
-	3.3311231383e-04f,
-	4.1127343650e-04f,
-	4.8919717595e-04f,
-	5.6687634325e-04f,
-	6.4430378800e-04f,
-	7.2147239897e-04f,
-	7.9837510462e-04f,
-	8.7500487378e-04f,
-	9.5135471612e-04f,
-	1.0274176828e-03f,
-	1.1031868671e-03f,
-	1.1786554049e-03f,
-	1.2538164751e-03f,
-	1.3286633004e-03f,
-	1.4031891480e-03f,
-	1.4773873297e-03f,
-	1.5512512026e-03f,
-	1.6247741700e-03f,
-	1.6979496814e-03f,
-	1.7707712333e-03f,
-	1.8432323698e-03f,
-	1.9153266828e-03f,
-	1.9870478129e-03f,
-	2.0583894496e-03f,
-	2.1293453319e-03f,
-	2.1999092488e-03f,
-	2.2700750398e-03f,
-	2.3398365955e-03f,
-	2.4091878576e-03f,
-	2.4781228200e-03f,
-	2.5466355290e-03f,
-	2.6147200834e-03f,
-	2.6823706356e-03f,
-	2.7495813916e-03f,
-	2.8163466117e-03f,
-	2.8826606105e-03f,
-	2.9485177580e-03f,
-	3.0139124793e-03f,
-	3.0788392557e-03f,
-	3.1432926246e-03f,
-	3.2072671800e-03f,
-	3.2707575732e-03f,
-	3.3337585128e-03f,
-	3.3962647654e-03f,
-	3.4582711558e-03f,
-	3.5197725673e-03f,
-	3.5807639422e-03f,
-	3.6412402824e-03f,
-	3.7011966493e-03f,
-	3.7606281642e-03f,
-	3.8195300091e-03f,
-	3.8778974266e-03f,
-	3.9357257202e-03f,
-	3.9930102551e-03f,
-	4.0497464579e-03f,
-	4.1059298174e-03f,
-	4.1615558846e-03f,
-	4.2166202732e-03f,
-	4.2711186598e-03f,
-	4.3250467842e-03f,
-	4.3784004496e-03f,
-	4.4311755229e-03f,
-	4.4833679351e-03f,
-	4.5349736816e-03f,
-	4.5859888220e-03f,
-	4.6364094810e-03f,
-	4.6862318481e-03f,
-	4.7354521780e-03f,
-	4.7840667910e-03f,
-	4.8320720732e-03f,
-	4.8794644763e-03f,
-	4.9262405183e-03f,
-	4.9723967835e-03f,
-	5.0179299227e-03f,
-	5.0628366533e-03f,
-	5.1071137598e-03f,
-	5.1507580934e-03f,
-	5.1937665729e-03f,
-	5.2361361842e-03f,
-	5.2778639808e-03f,
-	5.3189470840e-03f,
-	5.3593826827e-03f,
-	5.3991680340e-03f,
-	5.4383004630e-03f,
-	5.4767773628e-03f,
-	5.5145961951e-03f,
-	5.5517544899e-03f,
-	5.5882498459e-03f,
-	5.6240799300e-03f,
-	5.6592424784e-03f,
-	5.6937352955e-03f,
-	5.7275562551e-03f,
-	5.7607032997e-03f,
-	5.7931744406e-03f,
-	5.8249677586e-03f,
-	5.8560814033e-03f,
-	5.8865135934e-03f,
-	5.9162626172e-03f,
-	5.9453268317e-03f,
-	5.9737046634e-03f,
-	6.0013946081e-03f,
-	6.0283952308e-03f,
-	6.0547051657e-03f,
-	6.0803231164e-03f,
-	6.1052478556e-03f,
-	6.1294782253e-03f,
-	6.1530131369e-03f,
-	6.1758515707e-03f,
-	6.1979925764e-03f,
-	6.2194352726e-03f,
-	6.2401788470e-03f,
-	6.2602225565e-03f,
-	6.2795657268e-03f,
-	6.2982077524e-03f,
-	6.3161480968e-03f,
-	6.3333862921e-03f,
-	6.3499219391e-03f,
-	6.3657547071e-03f,
-	6.3808843338e-03f,
-	6.3953106255e-03f,
-	6.4090334564e-03f,
-	6.4220527690e-03f,
-	6.4343685738e-03f,
-	6.4459809491e-03f,
-	6.4568900409e-03f,
-	6.4670960630e-03f,
-	6.4765992964e-03f,
-	6.4854000894e-03f,
-	6.4934988576e-03f,
-	6.5008960834e-03f,
-	6.5075923161e-03f,
-	6.5135881714e-03f,
-	6.5188843317e-03f,
-	6.5234815455e-03f,
-	6.5273806274e-03f,
-	6.5305824576e-03f,
-	6.5330879823e-03f,
-	6.5348982129e-03f,
-	6.5360142261e-03f,
-	6.5364371634e-03f,
-	6.5361682312e-03f,
-	6.5352087005e-03f,
-	6.5335599063e-03f,
-	6.5312232479e-03f,
-	6.5282001881e-03f,
-	6.5244922535e-03f,
-	6.5201010337e-03f,
-	6.5150281814e-03f,
-	6.5092754121e-03f,
-	6.5028445035e-03f,
-	6.4957372956e-03f,
-	6.4879556902e-03f,
-	6.4795016508e-03f,
-	6.4703772018e-03f,
-	6.4605844290e-03f,
-	6.4501254784e-03f,
-	6.4390025568e-03f,
-	6.4272179305e-03f,
-	6.4147739258e-03f,
-	6.4016729283e-03f,
-	6.3879173825e-03f,
-	6.3735097916e-03f,
-	6.3584527173e-03f,
-	6.3427487790e-03f,
-	6.3264006539e-03f,
-	6.3094110763e-03f,
-	6.2917828375e-03f,
-	6.2735187854e-03f,
-	6.2546218238e-03f,
-	6.2350949124e-03f,
-	6.2149410664e-03f,
-	6.1941633558e-03f,
-	6.1727649052e-03f,
-	6.1507488936e-03f,
-	6.1281185537e-03f,
-	6.1048771714e-03f,
-	6.0810280859e-03f,
-	6.0565746888e-03f,
-	6.0315204238e-03f,
-	6.0058687865e-03f,
-	5.9796233238e-03f,
-	5.9527876332e-03f,
-	5.9253653630e-03f,
-	5.8973602112e-03f,
-	5.8687759256e-03f,
-	5.8396163029e-03f,
-	5.8098851886e-03f,
-	5.7795864764e-03f,
-	5.7487241077e-03f,
-	5.7173020712e-03f,
-	5.6853244025e-03f,
-	5.6527951833e-03f,
-	5.6197185416e-03f,
-	5.5860986504e-03f,
-	5.5519397279e-03f,
-	5.5172460366e-03f,
-	5.4820218831e-03f,
-	5.4462716173e-03f,
-	5.4099996322e-03f,
-	5.3732103632e-03f,
-	5.3359082878e-03f,
-	5.2980979249e-03f,
-	5.2597838344e-03f,
-	5.2209706167e-03f,
-	5.1816629121e-03f,
-	5.1418654005e-03f,
-	5.1015828005e-03f,
-	5.0608198694e-03f,
-	5.0195814021e-03f,
-	4.9778722310e-03f,
-	4.9356972255e-03f,
-	4.8930612911e-03f,
-	4.8499693691e-03f,
-	4.8064264362e-03f,
-	4.7624375038e-03f,
-	4.7180076172e-03f,
-	4.6731418557e-03f,
-	4.6278453315e-03f,
-	4.5821231894e-03f,
-	4.5359806061e-03f,
-	4.4894227899e-03f,
-	4.4424549800e-03f,
-	4.3950824457e-03f,
-	4.3473104865e-03f,
-	4.2991444307e-03f,
-	4.2505896357e-03f,
-	4.2016514866e-03f,
-	4.1523353964e-03f,
-	4.1026468049e-03f,
-	4.0525911784e-03f,
-	4.0021740090e-03f,
-	3.9514008142e-03f,
-	3.9002771361e-03f,
-	3.8488085410e-03f,
-	3.7970006188e-03f,
-	3.7448589824e-03f,
-	3.6923892672e-03f,
-	3.6395971302e-03f,
-	3.5864882500e-03f,
-	3.5330683257e-03f,
-	3.4793430766e-03f,
-	3.4253182416e-03f,
-	3.3709995785e-03f,
-	3.3163928634e-03f,
-	3.2615038903e-03f,
-	3.2063384705e-03f,
-	3.1509024318e-03f,
-	3.0952016180e-03f,
-	3.0392418887e-03f,
-	2.9830291180e-03f,
-	2.9265691945e-03f,
-	2.8698680205e-03f,
-	2.8129315115e-03f,
-	2.7557655953e-03f,
-	2.6983762119e-03f,
-	2.6407693126e-03f,
-	2.5829508595e-03f,
-	2.5249268249e-03f,
-	2.4667031907e-03f,
-	2.4082859478e-03f,
-	2.3496810957e-03f,
-	2.2908946416e-03f,
-	2.2319326000e-03f,
-	2.1728009922e-03f,
-	2.1135058455e-03f,
-	2.0540531928e-03f,
-	1.9944490719e-03f,
-	1.9346995249e-03f,
-	1.8748105978e-03f,
-	1.8147883397e-03f,
-	1.7546388024e-03f,
-	1.6943680396e-03f,
-	1.6339821067e-03f,
-	1.5734870598e-03f,
-	1.5128889552e-03f,
-	1.4521938492e-03f,
-	1.3914077970e-03f,
-	1.3305368525e-03f,
-	1.2695870675e-03f,
-	1.2085644915e-03f,
-	1.1474751706e-03f,
-	1.0863251471e-03f,
-	1.0251204594e-03f,
-	9.6386714070e-04f,
-	9.0257121897e-04f,
-	8.4123871615e-04f,
-	7.7987564766e-04f,
-	7.1848802183e-04f,
-	6.5708183930e-04f,
-	5.9566309253e-04f,
-	5.3423776521e-04f,
-	4.7281183169e-04f,
-	4.1139125645e-04f,
-	3.4998199355e-04f,
-	2.8858998608e-04f,
-	2.2722116560e-04f,
-	1.6588145162e-04f,
-	1.0457675104e-04f,
-	4.3312957602e-05f,
-	-1.7904048620e-05f,
-	-7.9068401777e-05f,
-	-1.4017425077e-04f,
-	-2.0121575979e-04f,
-	-2.6218710883e-04f,
-	-3.2308249424e-04f,
-	-3.8389612920e-04f,
-	-4.4462224430e-04f,
-	-5.0525508804e-04f,
-	-5.6578892731e-04f,
-	-6.2621804796e-04f,
-	-6.8653675526e-04f,
-	-7.4673937445e-04f,
-	-8.0682025123e-04f,
-	-8.6677375224e-04f,
-	-9.2659426560e-04f,
-	-9.8627620138e-04f,
-	-1.0458139921e-03f,
-	-1.1052020932e-03f,
-	-1.1644349837e-03f,
-	-1.2235071662e-03f,
-	-1.2824131681e-03f,
-	-1.3411475414e-03f,
-	-1.3997048636e-03f,
-	-1.4580797379e-03f,
-	-1.5162667939e-03f,
-	-1.5742606879e-03f,
-	-1.6320561035e-03f,
-	-1.6896477520e-03f,
-	-1.7470303726e-03f,
-	-1.8041987333e-03f,
-	-1.8611476312e-03f,
-	-1.9178718928e-03f,
-	-1.9743663744e-03f,
-	-2.0306259629e-03f,
-	-2.0866455759e-03f,
-	-2.1424201622e-03f,
-	-2.1979447023e-03f,
-	-2.2532142088e-03f,
-	-2.3082237267e-03f,
-	-2.3629683341e-03f,
-	-2.4174431424e-03f,
-	-2.4716432965e-03f,
-	-2.5255639758e-03f,
-	-2.5792003941e-03f,
-	-2.6325478000e-03f,
-	-2.6856014777e-03f,
-	-2.7383567470e-03f,
-	-2.7908089637e-03f,
-	-2.8429535204e-03f,
-	-2.8947858462e-03f,
-	-2.9463014078e-03f,
-	-2.9974957093e-03f,
-	-3.0483642928e-03f,
-	-3.0989027388e-03f,
-	-3.1491066665e-03f,
-	-3.1989717341e-03f,
-	-3.2484936392e-03f,
-	-3.2976681191e-03f,
-	-3.3464909513e-03f,
-	-3.3949579536e-03f,
-	-3.4430649846e-03f,
-	-3.4908079440e-03f,
-	-3.5381827728e-03f,
-	-3.5851854537e-03f,
-	-3.6318120116e-03f,
-	-3.6780585135e-03f,
-	-3.7239210691e-03f,
-	-3.7693958312e-03f,
-	-3.8144789956e-03f,
-	-3.8591668017e-03f,
-	-3.9034555328e-03f,
-	-3.9473415161e-03f,
-	-3.9908211232e-03f,
-	-4.0338907705e-03f,
-	-4.0765469191e-03f,
-	-4.1187860754e-03f,
-	-4.1606047910e-03f,
-	-4.2019996634e-03f,
-	-4.2429673360e-03f,
-	-4.2835044983e-03f,
-	-4.3236078860e-03f,
-	-4.3632742818e-03f,
-	-4.4025005151e-03f,
-	-4.4412834622e-03f,
-	-4.4796200471e-03f,
-	-4.5175072409e-03f,
-	-4.5549420627e-03f,
-	-4.5919215796e-03f,
-	-4.6284429064e-03f,
-	-4.6645032068e-03f,
-	-4.7000996926e-03f,
-	-4.7352296245e-03f,
-	-4.7698903120e-03f,
-	-4.8040791138e-03f,
-	-4.8377934376e-03f,
-	-4.8710307406e-03f,
-	-4.9037885297e-03f,
-	-4.9360643614e-03f,
-	-4.9678558419e-03f,
-	-4.9991606278e-03f,
-	-5.0299764254e-03f,
-	-5.0603009917e-03f,
-	-5.0901321338e-03f,
-	-5.1194677095e-03f,
-	-5.1483056273e-03f,
-	-5.1766438464e-03f,
-	-5.2044803769e-03f,
-	-5.2318132799e-03f,
-	-5.2586406677e-03f,
-	-5.2849607035e-03f,
-	-5.3107716023e-03f,
-	-5.3360716299e-03f,
-	-5.3608591040e-03f,
-	-5.3851323936e-03f,
-	-5.4088899194e-03f,
-	-5.4321301536e-03f,
-	-5.4548516204e-03f,
-	-5.4770528957e-03f,
-	-5.4987326070e-03f,
-	-5.5198894339e-03f,
-	-5.5405221080e-03f,
-	-5.5606294127e-03f,
-	-5.5802101835e-03f,
-	-5.5992633077e-03f,
-	-5.6177877250e-03f,
-	-5.6357824268e-03f,
-	-5.6532464569e-03f,
-	-5.6701789108e-03f,
-	-5.6865789365e-03f,
-	-5.7024457337e-03f,
-	-5.7177785544e-03f,
-	-5.7325767025e-03f,
-	-5.7468395341e-03f,
-	-5.7605664571e-03f,
-	-5.7737569317e-03f,
-	-5.7864104697e-03f,
-	-5.7985266350e-03f,
-	-5.8101050433e-03f,
-	-5.8211453623e-03f,
-	-5.8316473112e-03f,
-	-5.8416106612e-03f,
-	-5.8510352349e-03f,
-	-5.8599209066e-03f,
-	-5.8682676022e-03f,
-	-5.8760752989e-03f,
-	-5.8833440254e-03f,
-	-5.8900738615e-03f,
-	-5.8962649383e-03f,
-	-5.9019174380e-03f,
-	-5.9070315937e-03f,
-	-5.9116076896e-03f,
-	-5.9156460604e-03f,
-	-5.9191470917e-03f,
-	-5.9221112196e-03f,
-	-5.9245389304e-03f,
-	-5.9264307609e-03f,
-	-5.9277872982e-03f,
-	-5.9286091792e-03f,
-	-5.9288970907e-03f,
-	-5.9286517694e-03f,
-	-5.9278740015e-03f,
-	-5.9265646226e-03f,
-	-5.9247245176e-03f,
-	-5.9223546207e-03f,
-	-5.9194559149e-03f,
-	-5.9160294318e-03f,
-	-5.9120762521e-03f,
-	-5.9075975044e-03f,
-	-5.9025943658e-03f,
-	-5.8970680615e-03f,
-	-5.8910198645e-03f,
-	-5.8844510954e-03f,
-	-5.8773631224e-03f,
-	-5.8697573607e-03f,
-	-5.8616352728e-03f,
-	-5.8529983680e-03f,
-	-5.8438482022e-03f,
-	-5.8341863776e-03f,
-	-5.8240145425e-03f,
-	-5.8133343915e-03f,
-	-5.8021476646e-03f,
-	-5.7904561472e-03f,
-	-5.7782616702e-03f,
-	-5.7655661093e-03f,
-	-5.7523713850e-03f,
-	-5.7386794622e-03f,
-	-5.7244923502e-03f,
-	-5.7098121019e-03f,
-	-5.6946408142e-03f,
-	-5.6789806275e-03f,
-	-5.6628337249e-03f,
-	-5.6462023330e-03f,
-	-5.6290887204e-03f,
-	-5.6114951984e-03f,
-	-5.5934241203e-03f,
-	-5.5748778809e-03f,
-	-5.5558589166e-03f,
-	-5.5363697051e-03f,
-	-5.5164127646e-03f,
-	-5.4959906543e-03f,
-	-5.4751059731e-03f,
-	-5.4537613602e-03f,
-	-5.4319594944e-03f,
-	-5.4097030937e-03f,
-	-5.3869949150e-03f,
-	-5.3638377540e-03f,
-	-5.3402344446e-03f,
-	-5.3161878589e-03f,
-	-5.2917009065e-03f,
-	-5.2667765343e-03f,
-	-5.2414177263e-03f,
-	-5.2156275031e-03f,
-	-5.1894089216e-03f,
-	-5.1627650746e-03f,
-	-5.1356990907e-03f,
-	-5.1082141336e-03f,
-	-5.0803134019e-03f,
-	-5.0520001287e-03f,
-	-5.0232775814e-03f,
-	-4.9941490612e-03f,
-	-4.9646179027e-03f,
-	-4.9346874735e-03f,
-	-4.9043611740e-03f,
-	-4.8736424370e-03f,
-	-4.8425347271e-03f,
-	-4.8110415406e-03f,
-	-4.7791664050e-03f,
-	-4.7469128785e-03f,
-	-4.7142845498e-03f,
-	-4.6812850376e-03f,
-	-4.6479179903e-03f,
-	-4.6141870855e-03f,
-	-4.5800960297e-03f,
-	-4.5456485579e-03f,
-	-4.5108484331e-03f,
-	-4.4756994458e-03f,
-	-4.4402054142e-03f,
-	-4.4043701829e-03f,
-	-4.3681976231e-03f,
-	-4.3316916322e-03f,
-	-4.2948561330e-03f,
-	-4.2576950736e-03f,
-	-4.2202124269e-03f,
-	-4.1824121902e-03f,
-	-4.1442983848e-03f,
-	-4.1058750555e-03f,
-	-4.0671462701e-03f,
-	-4.0281161193e-03f,
-	-3.9887887161e-03f,
-	-3.9491681951e-03f,
-	-3.9092587126e-03f,
-	-3.8690644457e-03f,
-	-3.8285895923e-03f,
-	-3.7878383701e-03f,
-	-3.7468150169e-03f,
-	-3.7055237895e-03f,
-	-3.6639689636e-03f,
-	-3.6221548333e-03f,
-	-3.5800857108e-03f,
-	-3.5377659256e-03f,
-	-3.4951998246e-03f,
-	-3.4523917710e-03f,
-	-3.4093461445e-03f,
-	-3.3660673404e-03f,
-	-3.3225597694e-03f,
-	-3.2788278571e-03f,
-	-3.2348760435e-03f,
-	-3.1907087826e-03f,
-	-3.1463305421e-03f,
-	-3.1017458026e-03f,
-	-3.0569590575e-03f,
-	-3.0119748123e-03f,
-	-2.9667975845e-03f,
-	-2.9214319026e-03f,
-	-2.8758823063e-03f,
-	-2.8301533454e-03f,
-	-2.7842495800e-03f,
-	-2.7381755796e-03f,
-	-2.6919359228e-03f,
-	-2.6455351967e-03f,
-	-2.5989779967e-03f,
-	-2.5522689261e-03f,
-	-2.5054125951e-03f,
-	-2.4584136212e-03f,
-	-2.4112766278e-03f,
-	-2.3640062447e-03f,
-	-2.3166071069e-03f,
-	-2.2690838546e-03f,
-	-2.2214411324e-03f,
-	-2.1736835892e-03f,
-	-2.1258158777e-03f,
-	-2.0778426536e-03f,
-	-2.0297685755e-03f,
-	-1.9815983045e-03f,
-	-1.9333365033e-03f,
-	-1.8849878365e-03f,
-	-1.8365569694e-03f,
-	-1.7880485678e-03f,
-	-1.7394672980e-03f,
-	-1.6908178257e-03f,
-	-1.6421048158e-03f,
-	-1.5933329323e-03f,
-	-1.5445068373e-03f,
-	-1.4956311910e-03f,
-	-1.4467106508e-03f,
-	-1.3977498715e-03f,
-	-1.3487535043e-03f,
-	-1.2997261966e-03f,
-	-1.2506725915e-03f,
-	-1.2015973276e-03f,
-	-1.1525050380e-03f,
-	-1.1034003506e-03f,
-	-1.0542878872e-03f,
-	-1.0051722630e-03f,
-	-9.5605808650e-04f,
-	-9.0694995892e-04f,
-	-8.5785247375e-04f,
-	-8.0877021632e-04f,
-	-7.5970776344e-04f,
-	-7.1066968293e-04f,
-	-6.6166053322e-04f,
-	-6.1268486290e-04f,
-	-5.6374721036e-04f,
-	-5.1485210333e-04f,
-	-4.6600405847e-04f,
-	-4.1720758098e-04f,
-	-3.6846716417e-04f,
-	-3.1978728905e-04f,
-	-2.7117242394e-04f,
-	-2.2262702405e-04f,
-	-1.7415553110e-04f,
-	-1.2576237287e-04f,
-	-7.7451962859e-05f,
-	-2.9228699843e-05f,
-	1.8903032494e-05f,
-	6.6938865965e-05f,
-	1.1487444827e-04f,
-	1.6270544338e-04f,
-	2.1042753193e-04f,
-	2.5803641161e-04f,
-	3.0552779752e-04f,
-	3.5289742258e-04f,
-	4.0014103792e-04f,
-	4.4725441320e-04f,
-	4.9423333703e-04f,
-	5.4107361733e-04f,
-	5.8777108171e-04f,
-	6.3432157780e-04f,
-	6.8072097366e-04f,
-	7.2696515811e-04f,
-	7.7305004110e-04f,
-	8.1897155405e-04f,
-	8.6472565025e-04f,
-	9.1030830516e-04f,
-	9.5571551678e-04f,
-	1.0009433060e-03f,
-	1.0459877169e-03f,
-	1.0908448172e-03f,
-	1.1355106985e-03f,
-	1.1799814767e-03f,
-	1.2242532920e-03f,
-	1.2683223099e-03f,
-	1.3121847208e-03f,
-	1.3558367408e-03f,
-	1.3992746120e-03f,
-	1.4424946025e-03f,
-	1.4854930069e-03f,
-	1.5282661467e-03f,
-	1.5708103705e-03f,
-	1.6131220543e-03f,
-	1.6551976020e-03f,
-	1.6970334454e-03f,
-	1.7386260445e-03f,
-	1.7799718882e-03f,
-	1.8210674941e-03f,
-	1.8619094091e-03f,
-	1.9024942097e-03f,
-	1.9428185019e-03f,
-	1.9828789219e-03f,
-	2.0226721362e-03f,
-	2.0621948420e-03f,
-	2.1014437671e-03f,
-	2.1404156707e-03f,
-	2.1791073432e-03f,
-	2.2175156067e-03f,
-	2.2556373153e-03f,
-	2.2934693549e-03f,
-	2.3310086442e-03f,
-	2.3682521344e-03f,
-	2.4051968095e-03f,
-	2.4418396865e-03f,
-	2.4781778162e-03f,
-	2.5142082824e-03f,
-	2.5499282032e-03f,
-	2.5853347303e-03f,
-	2.6204250501e-03f,
-	2.6551963831e-03f,
-	2.6896459846e-03f,
-	2.7237711447e-03f,
-	2.7575691888e-03f,
-	2.7910374774e-03f,
-	2.8241734065e-03f,
-	2.8569744079e-03f,
-	2.8894379492e-03f,
-	2.9215615340e-03f,
-	2.9533427021e-03f,
-	2.9847790300e-03f,
-	3.0158681305e-03f,
-	3.0466076533e-03f,
-	3.0769952850e-03f,
-	3.1070287493e-03f,
-	3.1367058072e-03f,
-	3.1660242571e-03f,
-	3.1949819349e-03f,
-	3.2235767143e-03f,
-	3.2518065068e-03f,
-	3.2796692620e-03f,
-	3.3071629676e-03f,
-	3.3342856496e-03f,
-	3.3610353723e-03f,
-	3.3874102387e-03f,
-	3.4134083902e-03f,
-	3.4390280073e-03f,
-	3.4642673092e-03f,
-	3.4891245542e-03f,
-	3.5135980395e-03f,
-	3.5376861018e-03f,
-	3.5613871168e-03f,
-	3.5846995000e-03f,
-	3.6076217059e-03f,
-	3.6301522291e-03f,
-	3.6522896035e-03f,
-	3.6740324030e-03f,
-	3.6953792410e-03f,
-	3.7163287711e-03f,
-	3.7368796869e-03f,
-	3.7570307217e-03f,
-	3.7767806491e-03f,
-	3.7961282829e-03f,
-	3.8150724770e-03f,
-	3.8336121257e-03f,
-	3.8517461633e-03f,
-	3.8694735646e-03f,
-	3.8867933449e-03f,
-	3.9037045598e-03f,
-	3.9202063052e-03f,
-	3.9362977176e-03f,
-	3.9519779740e-03f,
-	3.9672462918e-03f,
-	3.9821019291e-03f,
-	3.9965441842e-03f,
-	4.0105723963e-03f,
-	4.0241859448e-03f,
-	4.0373842499e-03f,
-	4.0501667721e-03f,
-	4.0625330126e-03f,
-	4.0744825129e-03f,
-	4.0860148553e-03f,
-	4.0971296622e-03f,
-	4.1078265966e-03f,
-	4.1181053620e-03f,
-	4.1279657022e-03f,
-	4.1374074013e-03f,
-	4.1464302838e-03f,
-	4.1550342143e-03f,
-	4.1632190977e-03f,
-	4.1709848792e-03f,
-	4.1783315440e-03f,
-	4.1852591171e-03f,
-	4.1917676639e-03f,
-	4.1978572896e-03f,
-	4.2035281390e-03f,
-	4.2087803969e-03f,
-	4.2136142879e-03f,
-	4.2180300759e-03f,
-	4.2220280646e-03f,
-	4.2256085972e-03f,
-	4.2287720559e-03f,
-	4.2315188625e-03f,
-	4.2338494779e-03f,
-	4.2357644018e-03f,
-	4.2372641733e-03f,
-	4.2383493700e-03f,
-	4.2390206083e-03f,
-	4.2392785433e-03f,
-	4.2391238686e-03f,
-	4.2385573161e-03f,
-	4.2375796558e-03f,
-	4.2361916963e-03f,
-	4.2343942836e-03f,
-	4.2321883019e-03f,
-};
+35,
+34,
+33,
+32,
+31,
+30,
+29,
+28,
+27,
+26,
+24,
+23,
+22,
+21,
+20,
+19,
+18,
+17,
+16,
+15,
+14,
+13,
+12,
+10,
+9,
+8,
+7,
+6,
+5,
+4,
+3,
+1,
+0,
+-1,
+-2,
+-3,
+-4,
+-5,
+-7,
+-8,
+-9,
+-10,
+-11,
+-12,
+-14,
+-15,
+-16,
+-17,
+-18,
+-19,
+-21,
+-22,
+-23,
+-24,
+-25,
+-27,
+-28,
+-29,
+-30,
+-31,
+-32,
+-34,
+-35,
+-36,
+-37,
+-38,
+-39,
+-41,
+-42,
+-43,
+-44,
+-45,
+-46,
+-48,
+-49,
+-50,
+-51,
+-52,
+-53,
+-55,
+-56,
+-57,
+-58,
+-59,
+-60,
+-61,
+-63,
+-64,
+-65,
+-66,
+-67,
+-68,
+-69,
+-70,
+-72,
+-73,
+-74,
+-75,
+-76,
+-77,
+-78,
+-79,
+-80,
+-81,
+-82,
+-83,
+-84,
+-85,
+-86,
+-88,
+-89,
+-90,
+-91,
+-92,
+-93,
+-94,
+-95,
+-96,
+-96,
+-97,
+-98,
+-99,
+-100,
+-101,
+-102,
+-103,
+-104,
+-105,
+-106,
+-107,
+-108,
+-108,
+-109,
+-110,
+-111,
+-112,
+-113,
+-113,
+-114,
+-115,
+-116,
+-117,
+-117,
+-118,
+-119,
+-120,
+-120,
+-121,
+-122,
+-122,
+-123,
+-124,
+-125,
+-125,
+-126,
+-126,
+-127,
+-128,
+-128,
+-129,
+-129,
+-130,
+-131,
+-131,
+-132,
+-132,
+-133,
+-133,
+-134,
+-134,
+-135,
+-135,
+-136,
+-136,
+-136,
+-137,
+-137,
+-138,
+-138,
+-138,
+-139,
+-139,
+-139,
+-140,
+-140,
+-140,
+-140,
+-141,
+-141,
+-141,
+-141,
+-142,
+-142,
+-142,
+-142,
+-142,
+-142,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-142,
+-142,
+-142,
+-142,
+-142,
+-142,
+-141,
+-141,
+-141,
+-141,
+-140,
+-140,
+-140,
+-140,
+-139,
+-139,
+-139,
+-138,
+-138,
+-137,
+-137,
+-137,
+-136,
+-136,
+-135,
+-135,
+-134,
+-134,
+-133,
+-133,
+-132,
+-132,
+-131,
+-130,
+-130,
+-129,
+-129,
+-128,
+-127,
+-127,
+-126,
+-125,
+-125,
+-124,
+-123,
+-122,
+-121,
+-121,
+-120,
+-119,
+-118,
+-117,
+-117,
+-116,
+-115,
+-114,
+-113,
+-112,
+-111,
+-110,
+-109,
+-108,
+-107,
+-106,
+-105,
+-104,
+-103,
+-102,
+-101,
+-100,
+-99,
+-98,
+-96,
+-95,
+-94,
+-93,
+-92,
+-91,
+-89,
+-88,
+-87,
+-86,
+-85,
+-83,
+-82,
+-81,
+-79,
+-78,
+-77,
+-76,
+-74,
+-73,
+-71,
+-70,
+-69,
+-67,
+-66,
+-65,
+-63,
+-62,
+-60,
+-59,
+-57,
+-56,
+-54,
+-53,
+-51,
+-50,
+-48,
+-47,
+-45,
+-44,
+-42,
+-41,
+-39,
+-37,
+-36,
+-34,
+-33,
+-31,
+-29,
+-28,
+-26,
+-24,
+-23,
+-21,
+-20,
+-18,
+-16,
+-14,
+-13,
+-11,
+-9,
+-8,
+-6,
+-4,
+-3,
+-1,
+1,
+3,
+4,
+6,
+8,
+10,
+11,
+13,
+15,
+17,
+19,
+20,
+22,
+24,
+26,
+27,
+29,
+31,
+33,
+35,
+36,
+38,
+40,
+42,
+44,
+46,
+47,
+49,
+51,
+53,
+55,
+56,
+58,
+60,
+62,
+64,
+66,
+67,
+69,
+71,
+73,
+75,
+76,
+78,
+80,
+82,
+84,
+85,
+87,
+89,
+91,
+93,
+94,
+96,
+98,
+100,
+102,
+103,
+105,
+107,
+109,
+110,
+112,
+114,
+116,
+117,
+119,
+121,
+122,
+124,
+126,
+128,
+129,
+131,
+133,
+134,
+136,
+138,
+139,
+141,
+143,
+144,
+146,
+147,
+149,
+151,
+152,
+154,
+155,
+157,
+158,
+160,
+161,
+163,
+164,
+166,
+167,
+169,
+170,
+172,
+173,
+175,
+176,
+177,
+179,
+180,
+182,
+183,
+184,
+186,
+187,
+188,
+189,
+191,
+192,
+193,
+194,
+196,
+197,
+198,
+199,
+200,
+202,
+203,
+204,
+205,
+206,
+207,
+208,
+209,
+210,
+211,
+212,
+213,
+214,
+215,
+216,
+217,
+218,
+219,
+220,
+220,
+221,
+222,
+223,
+224,
+224,
+225,
+226,
+227,
+227,
+228,
+229,
+229,
+230,
+230,
+231,
+232,
+232,
+233,
+233,
+234,
+234,
+234,
+235,
+235,
+236,
+236,
+236,
+237,
+237,
+237,
+238,
+238,
+238,
+238,
+238,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+238,
+238,
+238,
+238,
+237,
+237,
+237,
+237,
+236,
+236,
+235,
+235,
+235,
+234,
+234,
+233,
+233,
+232,
+231,
+231,
+230,
+230,
+229,
+228,
+228,
+227,
+226,
+225,
+225,
+224,
+223,
+222,
+221,
+221,
+220,
+219,
+218,
+217,
+216,
+215,
+214,
+213,
+212,
+211,
+209,
+208,
+207,
+206,
+205,
+204,
+202,
+201,
+200,
+199,
+197,
+196,
+195,
+193,
+192,
+190,
+189,
+188,
+186,
+185,
+183,
+182,
+180,
+179,
+177,
+175,
+174,
+172,
+170,
+169,
+167,
+165,
+164,
+162,
+160,
+158,
+157,
+155,
+153,
+151,
+149,
+147,
+146,
+144,
+142,
+140,
+138,
+136,
+134,
+132,
+130,
+128,
+126,
+124,
+122,
+120,
+118,
+115,
+113,
+111,
+109,
+107,
+105,
+102,
+100,
+98,
+96,
+94,
+91,
+89,
+87,
+84,
+82,
+80,
+78,
+75,
+73,
+71,
+68,
+66,
+63,
+61,
+59,
+56,
+54,
+51,
+49,
+47,
+44,
+42,
+39,
+37,
+34,
+32,
+29,
+27,
+24,
+22,
+19,
+17,
+14,
+12,
+9,
+7,
+4,
+1,
+-1,
+-4,
+-6,
+-9,
+-11,
+-14,
+-16,
+-19,
+-22,
+-24,
+-27,
+-29,
+-32,
+-34,
+-37,
+-40,
+-42,
+-45,
+-47,
+-50,
+-53,
+-55,
+-58,
+-60,
+-63,
+-65,
+-68,
+-70,
+-73,
+-76,
+-78,
+-81,
+-83,
+-86,
+-88,
+-91,
+-93,
+-96,
+-98,
+-101,
+-103,
+-106,
+-108,
+-111,
+-113,
+-116,
+-118,
+-121,
+-123,
+-125,
+-128,
+-130,
+-133,
+-135,
+-137,
+-140,
+-142,
+-144,
+-147,
+-149,
+-151,
+-154,
+-156,
+-158,
+-160,
+-163,
+-165,
+-167,
+-169,
+-172,
+-174,
+-176,
+-178,
+-180,
+-182,
+-184,
+-186,
+-189,
+-191,
+-193,
+-195,
+-197,
+-199,
+-201,
+-203,
+-204,
+-206,
+-208,
+-210,
+-212,
+-214,
+-216,
+-217,
+-219,
+-221,
+-223,
+-224,
+-226,
+-228,
+-229,
+-231,
+-233,
+-234,
+-236,
+-237,
+-239,
+-240,
+-242,
+-243,
+-245,
+-246,
+-248,
+-249,
+-250,
+-251,
+-253,
+-254,
+-255,
+-256,
+-258,
+-259,
+-260,
+-261,
+-262,
+-263,
+-264,
+-265,
+-266,
+-267,
+-268,
+-269,
+-270,
+-270,
+-271,
+-272,
+-273,
+-273,
+-274,
+-275,
+-275,
+-276,
+-277,
+-277,
+-278,
+-278,
+-279,
+-279,
+-279,
+-280,
+-280,
+-280,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-280,
+-280,
+-280,
+-279,
+-279,
+-279,
+-278,
+-278,
+-277,
+-277,
+-276,
+-275,
+-275,
+-274,
+-273,
+-272,
+-272,
+-271,
+-270,
+-269,
+-268,
+-267,
+-266,
+-265,
+-264,
+-263,
+-262,
+-261,
+-260,
+-258,
+-257,
+-256,
+-254,
+-253,
+-252,
+-250,
+-249,
+-247,
+-246,
+-244,
+-243,
+-241,
+-239,
+-238,
+-236,
+-234,
+-232,
+-230,
+-228,
+-227,
+-225,
+-223,
+-221,
+-219,
+-217,
+-214,
+-212,
+-210,
+-208,
+-206,
+-203,
+-201,
+-199,
+-196,
+-194,
+-192,
+-189,
+-187,
+-184,
+-181,
+-179,
+-176,
+-174,
+-171,
+-168,
+-165,
+-163,
+-160,
+-157,
+-154,
+-151,
+-148,
+-145,
+-142,
+-139,
+-136,
+-133,
+-130,
+-127,
+-124,
+-121,
+-118,
+-114,
+-111,
+-108,
+-104,
+-101,
+-98,
+-94,
+-91,
+-88,
+-84,
+-81,
+-77,
+-73,
+-70,
+-66,
+-63,
+-59,
+-55,
+-52,
+-48,
+-44,
+-41,
+-37,
+-33,
+-29,
+-25,
+-21,
+-18,
+-14,
+-10,
+-6,
+-2,
+2,
+6,
+10,
+14,
+18,
+22,
+26,
+30,
+35,
+39,
+43,
+47,
+51,
+55,
+60,
+64,
+68,
+72,
+77,
+81,
+85,
+89,
+94,
+98,
+102,
+107,
+111,
+115,
+120,
+124,
+129,
+133,
+137,
+142,
+146,
+151,
+155,
+159,
+164,
+168,
+173,
+177,
+182,
+186,
+190,
+195,
+199,
+204,
+208,
+213,
+217,
+222,
+226,
+230,
+235,
+239,
+244,
+248,
+253,
+257,
+262,
+266,
+270,
+275,
+279,
+284,
+288,
+292,
+297,
+301,
+305,
+310,
+314,
+318,
+323,
+327,
+331,
+335,
+340,
+344,
+348,
+352,
+357,
+361,
+365,
+369,
+373,
+377,
+381,
+385,
+390,
+394,
+398,
+402,
+406,
+409,
+413,
+417,
+421,
+425,
+429,
+433,
+436,
+440,
+444,
+448,
+451,
+455,
+459,
+462,
+466,
+469,
+473,
+476,
+480,
+483,
+486,
+490,
+493,
+496,
+500,
+503,
+506,
+509,
+512,
+515,
+518,
+521,
+524,
+527,
+530,
+533,
+536,
+538,
+541,
+544,
+546,
+549,
+552,
+554,
+557,
+559,
+561,
+564,
+566,
+568,
+570,
+573,
+575,
+577,
+579,
+581,
+583,
+584,
+586,
+588,
+590,
+591,
+593,
+594,
+596,
+597,
+599,
+600,
+601,
+603,
+604,
+605,
+606,
+607,
+608,
+609,
+610,
+610,
+611,
+612,
+612,
+613,
+613,
+614,
+614,
+614,
+615,
+615,
+615,
+615,
+615,
+615,
+615,
+615,
+614,
+614,
+614,
+613,
+613,
+612,
+611,
+611,
+610,
+609,
+608,
+607,
+606,
+605,
+604,
+603,
+601,
+600,
+598,
+597,
+595,
+594,
+592,
+590,
+588,
+586,
+584,
+582,
+580,
+578,
+575,
+573,
+571,
+568,
+565,
+563,
+560,
+557,
+554,
+551,
+548,
+545,
+542,
+539,
+535,
+532,
+529,
+525,
+521,
+518,
+514,
+510,
+506,
+502,
+498,
+494,
+490,
+485,
+481,
+477,
+472,
+467,
+463,
+458,
+453,
+448,
+443,
+438,
+433,
+428,
+423,
+417,
+412,
+406,
+401,
+395,
+389,
+384,
+378,
+372,
+366,
+360,
+353,
+347,
+341,
+334,
+328,
+321,
+315,
+308,
+301,
+294,
+288,
+281,
+273,
+266,
+259,
+252,
+244,
+237,
+230,
+222,
+214,
+207,
+199,
+191,
+183,
+175,
+167,
+159,
+151,
+142,
+134,
+126,
+117,
+109,
+100,
+91,
+83,
+74,
+65,
+56,
+47,
+38,
+29,
+20,
+10,
+1,
+-8,
+-18,
+-27,
+-37,
+-47,
+-56,
+-66,
+-76,
+-86,
+-96,
+-106,
+-116,
+-126,
+-136,
+-146,
+-156,
+-167,
+-177,
+-188,
+-198,
+-209,
+-219,
+-230,
+-241,
+-251,
+-262,
+-273,
+-284,
+-295,
+-306,
+-317,
+-328,
+-339,
+-350,
+-362,
+-373,
+-384,
+-396,
+-407,
+-419,
+-430,
+-442,
+-453,
+-465,
+-476,
+-488,
+-500,
+-512,
+-524,
+-535,
+-547,
+-559,
+-571,
+-583,
+-595,
+-607,
+-619,
+-631,
+-643,
+-656,
+-668,
+-680,
+-692,
+-704,
+-717,
+-729,
+-741,
+-754,
+-766,
+-778,
+-791,
+-803,
+-816,
+-828,
+-841,
+-853,
+-866,
+-878,
+-891,
+-903,
+-916,
+-928,
+-941,
+-953,
+-966,
+-978,
+-991,
+-1004,
+-1016,
+-1029,
+-1041,
+-1054,
+-1067,
+-1079,
+-1092,
+-1104,
+-1117,
+-1129,
+-1142,
+-1155,
+-1167,
+-1180,
+-1192,
+-1205,
+-1217,
+-1230,
+-1242,
+-1255,
+-1267,
+-1279,
+-1292,
+-1304,
+-1316,
+-1329,
+-1341,
+-1353,
+-1366,
+-1378,
+-1390,
+-1402,
+-1414,
+-1427,
+-1439,
+-1451,
+-1463,
+-1475,
+-1487,
+-1498,
+-1510,
+-1522,
+-1534,
+-1546,
+-1557,
+-1569,
+-1581,
+-1592,
+-1604,
+-1615,
+-1627,
+-1638,
+-1649,
+-1661,
+-1672,
+-1683,
+-1694,
+-1705,
+-1716,
+-1727,
+-1738,
+-1749,
+-1759,
+-1770,
+-1781,
+-1791,
+-1802,
+-1812,
+-1822,
+-1833,
+-1843,
+-1853,
+-1863,
+-1873,
+-1883,
+-1893,
+-1902,
+-1912,
+-1922,
+-1931,
+-1940,
+-1950,
+-1959,
+-1968,
+-1977,
+-1986,
+-1995,
+-2004,
+-2012,
+-2021,
+-2030,
+-2038,
+-2046,
+-2054,
+-2063,
+-2071,
+-2078,
+-2086,
+-2094,
+-2102,
+-2109,
+-2116,
+-2124,
+-2131,
+-2138,
+-2145,
+-2152,
+-2158,
+-2165,
+-2171,
+-2178,
+-2184,
+-2190,
+-2196,
+-2202,
+-2208,
+-2213,
+-2219,
+-2224,
+-2229,
+-2234,
+-2239,
+-2244,
+-2249,
+-2253,
+-2258,
+-2262,
+-2266,
+-2270,
+-2274,
+-2278,
+-2282,
+-2285,
+-2288,
+-2292,
+-2295,
+-2297,
+-2300,
+-2303,
+-2305,
+-2307,
+-2310,
+-2312,
+-2313,
+-2315,
+-2317,
+-2318,
+-2319,
+-2320,
+-2321,
+-2322,
+-2322,
+-2323,
+-2323,
+-2323,
+-2323,
+-2323,
+-2322,
+-2322,
+-2321,
+-2320,
+-2319,
+-2317,
+-2316,
+-2314,
+-2312,
+-2310,
+-2308,
+-2306,
+-2303,
+-2301,
+-2298,
+-2295,
+-2291,
+-2288,
+-2284,
+-2281,
+-2277,
+-2272,
+-2268,
+-2263,
+-2259,
+-2254,
+-2249,
+-2243,
+-2238,
+-2232,
+-2226,
+-2220,
+-2214,
+-2207,
+-2201,
+-2194,
+-2187,
+-2179,
+-2172,
+-2164,
+-2156,
+-2148,
+-2140,
+-2131,
+-2123,
+-2114,
+-2105,
+-2095,
+-2086,
+-2076,
+-2066,
+-2056,
+-2046,
+-2035,
+-2024,
+-2013,
+-2002,
+-1991,
+-1979,
+-1967,
+-1955,
+-1943,
+-1930,
+-1918,
+-1905,
+-1892,
+-1878,
+-1865,
+-1851,
+-1837,
+-1823,
+-1808,
+-1794,
+-1779,
+-1764,
+-1749,
+-1733,
+-1717,
+-1701,
+-1685,
+-1669,
+-1652,
+-1635,
+-1618,
+-1601,
+-1583,
+-1565,
+-1548,
+-1529,
+-1511,
+-1492,
+-1473,
+-1454,
+-1435,
+-1415,
+-1396,
+-1376,
+-1355,
+-1335,
+-1314,
+-1293,
+-1272,
+-1251,
+-1229,
+-1207,
+-1185,
+-1163,
+-1141,
+-1118,
+-1095,
+-1072,
+-1048,
+-1025,
+-1001,
+-977,
+-952,
+-928,
+-903,
+-878,
+-853,
+-827,
+-802,
+-776,
+-750,
+-723,
+-697,
+-670,
+-643,
+-616,
+-588,
+-560,
+-532,
+-504,
+-476,
+-447,
+-418,
+-389,
+-360,
+-331,
+-301,
+-271,
+-241,
+-210,
+-180,
+-149,
+-118,
+-87,
+-55,
+-23,
+9,
+41,
+73,
+106,
+138,
+171,
+205,
+238,
+272,
+306,
+340,
+374,
+409,
+443,
+478,
+513,
+549,
+584,
+620,
+656,
+692,
+729,
+765,
+802,
+839,
+876,
+914,
+952,
+989,
+1027,
+1066,
+1104,
+1143,
+1182,
+1221,
+1260,
+1299,
+1339,
+1379,
+1419,
+1459,
+1499,
+1540,
+1581,
+1622,
+1663,
+1704,
+1746,
+1787,
+1829,
+1871,
+1913,
+1956,
+1998,
+2041,
+2084,
+2127,
+2171,
+2214,
+2258,
+2302,
+2346,
+2390,
+2434,
+2479,
+2523,
+2568,
+2613,
+2658,
+2704,
+2749,
+2795,
+2840,
+2886,
+2933,
+2979,
+3025,
+3072,
+3118,
+3165,
+3212,
+3260,
+3307,
+3354,
+3402,
+3450,
+3497,
+3545,
+3594,
+3642,
+3690,
+3739,
+3787,
+3836,
+3885,
+3934,
+3983,
+4033,
+4082,
+4132,
+4181,
+4231,
+4281,
+4331,
+4381,
+4431,
+4482,
+4532,
+4583,
+4633,
+4684,
+4735,
+4786,
+4837,
+4888,
+4939,
+4991,
+5042,
+5094,
+5145,
+5197,
+5249,
+5301,
+5352,
+5405,
+5457,
+5509,
+5561,
+5613,
+5666,
+5718,
+5771,
+5823,
+5876,
+5929,
+5982,
+6035,
+6087,
+6140,
+6193,
+6246,
+6300,
+6353,
+6406,
+6459,
+6513,
+6566,
+6619,
+6673,
+6726,
+6780,
+6833,
+6887,
+6940,
+6994,
+7048,
+7101,
+7155,
+7209,
+7262,
+7316,
+7370,
+7424,
+7477,
+7531,
+7585,
+7639,
+7693,
+7746,
+7800,
+7854,
+7908,
+7961,
+8015,
+8069,
+8123,
+8176,
+8230,
+8284,
+8337,
+8391,
+8445,
+8498,
+8552,
+8605,
+8659,
+8712,
+8766,
+8819,
+8872,
+8926,
+8979,
+9032,
+9085,
+9138,
+9191,
+9244,
+9297,
+9350,
+9403,
+9456,
+9508,
+9561,
+9614,
+9666,
+9718,
+9771,
+9823,
+9875,
+9927,
+9979,
+10031,
+10083,
+10135,
+10187,
+10238,
+10290,
+10341,
+10392,
+10443,
+10495,
+10545,
+10596,
+10647,
+10698,
+10748,
+10799,
+10849,
+10899,
+10949,
+10999,
+11049,
+11099,
+11148,
+11198,
+11247,
+11296,
+11345,
+11394,
+11443,
+11492,
+11540,
+11589,
+11637,
+11685,
+11733,
+11780,
+11828,
+11875,
+11923,
+11970,
+12017,
+12064,
+12110,
+12157,
+12203,
+12249,
+12295,
+12341,
+12386,
+12432,
+12477,
+12522,
+12567,
+12612,
+12656,
+12700,
+12745,
+12789,
+12832,
+12876,
+12919,
+12962,
+13005,
+13048,
+13091,
+13133,
+13175,
+13217,
+13259,
+13300,
+13341,
+13382,
+13423,
+13464,
+13504,
+13544,
+13584,
+13624,
+13664,
+13703,
+13742,
+13781,
+13819,
+13858,
+13896,
+13934,
+13971,
+14009,
+14046,
+14083,
+14119,
+14156,
+14192,
+14228,
+14263,
+14299,
+14334,
+14369,
+14403,
+14438,
+14472,
+14506,
+14539,
+14573,
+14606,
+14638,
+14671,
+14703,
+14735,
+14767,
+14798,
+14829,
+14860,
+14891,
+14921,
+14951,
+14981,
+15010,
+15039,
+15068,
+15097,
+15125,
+15153,
+15181,
+15208,
+15236,
+15262,
+15289,
+15315,
+15341,
+15367,
+15392,
+15417,
+15442,
+15467,
+15491,
+15515,
+15538,
+15561,
+15584,
+15607,
+15629,
+15651,
+15673,
+15695,
+15716,
+15736,
+15757,
+15777,
+15797,
+15816,
+15835,
+15854,
+15873,
+15891,
+15909,
+15927,
+15944,
+15961,
+15977,
+15994,
+16010,
+16025,
+16041,
+16056,
+16070,
+16085,
+16099,
+16112,
+16126,
+16139,
+16151,
+16164,
+16176,
+16187,
+16199,
+16210,
+16220,
+16231,
+16241,
+16250,
+16260,
+16269,
+16278,
+16286,
+16294,
+16301,
+16309,
+16316,
+16322,
+16329,
+16335,
+16340,
+16346,
+16351,
+16355,
+16359,
+16363,
+16367,
+16370,
+16373,
+16376,
+16378,
+16380,
+16381,
+16382,
+16383,
+16384,
+16384,
+16384,
+16383,
+16382,
+16381,
+16380,
+16378,
+16376,
+16373,
+16370,
+16367,
+16363,
+16359,
+16355,
+16351,
+16346,
+16340,
+16335,
+16329,
+16322,
+16316,
+16309,
+16301,
+16294,
+16286,
+16278,
+16269,
+16260,
+16250,
+16241,
+16231,
+16220,
+16210,
+16199,
+16187,
+16176,
+16164,
+16151,
+16139,
+16126,
+16112,
+16099,
+16085,
+16070,
+16056,
+16041,
+16025,
+16010,
+15994,
+15977,
+15961,
+15944,
+15927,
+15909,
+15891,
+15873,
+15854,
+15835,
+15816,
+15797,
+15777,
+15757,
+15736,
+15716,
+15695,
+15673,
+15651,
+15629,
+15607,
+15584,
+15561,
+15538,
+15515,
+15491,
+15467,
+15442,
+15417,
+15392,
+15367,
+15341,
+15315,
+15289,
+15262,
+15236,
+15208,
+15181,
+15153,
+15125,
+15097,
+15068,
+15039,
+15010,
+14981,
+14951,
+14921,
+14891,
+14860,
+14829,
+14798,
+14767,
+14735,
+14703,
+14671,
+14638,
+14606,
+14573,
+14539,
+14506,
+14472,
+14438,
+14403,
+14369,
+14334,
+14299,
+14263,
+14228,
+14192,
+14156,
+14119,
+14083,
+14046,
+14009,
+13971,
+13934,
+13896,
+13858,
+13819,
+13781,
+13742,
+13703,
+13664,
+13624,
+13584,
+13544,
+13504,
+13464,
+13423,
+13382,
+13341,
+13300,
+13259,
+13217,
+13175,
+13133,
+13091,
+13048,
+13005,
+12962,
+12919,
+12876,
+12832,
+12789,
+12745,
+12700,
+12656,
+12612,
+12567,
+12522,
+12477,
+12432,
+12386,
+12341,
+12295,
+12249,
+12203,
+12157,
+12110,
+12064,
+12017,
+11970,
+11923,
+11875,
+11828,
+11780,
+11733,
+11685,
+11637,
+11589,
+11540,
+11492,
+11443,
+11394,
+11345,
+11296,
+11247,
+11198,
+11148,
+11099,
+11049,
+10999,
+10949,
+10899,
+10849,
+10799,
+10748,
+10698,
+10647,
+10596,
+10545,
+10495,
+10443,
+10392,
+10341,
+10290,
+10238,
+10187,
+10135,
+10083,
+10031,
+9979,
+9927,
+9875,
+9823,
+9771,
+9718,
+9666,
+9614,
+9561,
+9508,
+9456,
+9403,
+9350,
+9297,
+9244,
+9191,
+9138,
+9085,
+9032,
+8979,
+8926,
+8872,
+8819,
+8766,
+8712,
+8659,
+8605,
+8552,
+8498,
+8445,
+8391,
+8337,
+8284,
+8230,
+8176,
+8123,
+8069,
+8015,
+7961,
+7908,
+7854,
+7800,
+7746,
+7693,
+7639,
+7585,
+7531,
+7477,
+7424,
+7370,
+7316,
+7262,
+7209,
+7155,
+7101,
+7048,
+6994,
+6940,
+6887,
+6833,
+6780,
+6726,
+6673,
+6619,
+6566,
+6513,
+6459,
+6406,
+6353,
+6300,
+6246,
+6193,
+6140,
+6087,
+6035,
+5982,
+5929,
+5876,
+5823,
+5771,
+5718,
+5666,
+5613,
+5561,
+5509,
+5457,
+5405,
+5352,
+5301,
+5249,
+5197,
+5145,
+5094,
+5042,
+4991,
+4939,
+4888,
+4837,
+4786,
+4735,
+4684,
+4633,
+4583,
+4532,
+4482,
+4431,
+4381,
+4331,
+4281,
+4231,
+4181,
+4132,
+4082,
+4033,
+3983,
+3934,
+3885,
+3836,
+3787,
+3739,
+3690,
+3642,
+3594,
+3545,
+3497,
+3450,
+3402,
+3354,
+3307,
+3260,
+3212,
+3165,
+3118,
+3072,
+3025,
+2979,
+2933,
+2886,
+2840,
+2795,
+2749,
+2704,
+2658,
+2613,
+2568,
+2523,
+2479,
+2434,
+2390,
+2346,
+2302,
+2258,
+2214,
+2171,
+2127,
+2084,
+2041,
+1998,
+1956,
+1913,
+1871,
+1829,
+1787,
+1746,
+1704,
+1663,
+1622,
+1581,
+1540,
+1499,
+1459,
+1419,
+1379,
+1339,
+1299,
+1260,
+1221,
+1182,
+1143,
+1104,
+1066,
+1027,
+989,
+952,
+914,
+876,
+839,
+802,
+765,
+729,
+692,
+656,
+620,
+584,
+549,
+513,
+478,
+443,
+409,
+374,
+340,
+306,
+272,
+238,
+205,
+171,
+138,
+106,
+73,
+41,
+9,
+-23,
+-55,
+-87,
+-118,
+-149,
+-180,
+-210,
+-241,
+-271,
+-301,
+-331,
+-360,
+-389,
+-418,
+-447,
+-476,
+-504,
+-532,
+-560,
+-588,
+-616,
+-643,
+-670,
+-697,
+-723,
+-750,
+-776,
+-802,
+-827,
+-853,
+-878,
+-903,
+-928,
+-952,
+-977,
+-1001,
+-1025,
+-1048,
+-1072,
+-1095,
+-1118,
+-1141,
+-1163,
+-1185,
+-1207,
+-1229,
+-1251,
+-1272,
+-1293,
+-1314,
+-1335,
+-1355,
+-1376,
+-1396,
+-1415,
+-1435,
+-1454,
+-1473,
+-1492,
+-1511,
+-1529,
+-1548,
+-1565,
+-1583,
+-1601,
+-1618,
+-1635,
+-1652,
+-1669,
+-1685,
+-1701,
+-1717,
+-1733,
+-1749,
+-1764,
+-1779,
+-1794,
+-1808,
+-1823,
+-1837,
+-1851,
+-1865,
+-1878,
+-1892,
+-1905,
+-1918,
+-1930,
+-1943,
+-1955,
+-1967,
+-1979,
+-1991,
+-2002,
+-2013,
+-2024,
+-2035,
+-2046,
+-2056,
+-2066,
+-2076,
+-2086,
+-2095,
+-2105,
+-2114,
+-2123,
+-2131,
+-2140,
+-2148,
+-2156,
+-2164,
+-2172,
+-2179,
+-2187,
+-2194,
+-2201,
+-2207,
+-2214,
+-2220,
+-2226,
+-2232,
+-2238,
+-2243,
+-2249,
+-2254,
+-2259,
+-2263,
+-2268,
+-2272,
+-2277,
+-2281,
+-2284,
+-2288,
+-2291,
+-2295,
+-2298,
+-2301,
+-2303,
+-2306,
+-2308,
+-2310,
+-2312,
+-2314,
+-2316,
+-2317,
+-2319,
+-2320,
+-2321,
+-2322,
+-2322,
+-2323,
+-2323,
+-2323,
+-2323,
+-2323,
+-2322,
+-2322,
+-2321,
+-2320,
+-2319,
+-2318,
+-2317,
+-2315,
+-2313,
+-2312,
+-2310,
+-2307,
+-2305,
+-2303,
+-2300,
+-2297,
+-2295,
+-2292,
+-2288,
+-2285,
+-2282,
+-2278,
+-2274,
+-2270,
+-2266,
+-2262,
+-2258,
+-2253,
+-2249,
+-2244,
+-2239,
+-2234,
+-2229,
+-2224,
+-2219,
+-2213,
+-2208,
+-2202,
+-2196,
+-2190,
+-2184,
+-2178,
+-2171,
+-2165,
+-2158,
+-2152,
+-2145,
+-2138,
+-2131,
+-2124,
+-2116,
+-2109,
+-2102,
+-2094,
+-2086,
+-2078,
+-2071,
+-2063,
+-2054,
+-2046,
+-2038,
+-2030,
+-2021,
+-2012,
+-2004,
+-1995,
+-1986,
+-1977,
+-1968,
+-1959,
+-1950,
+-1940,
+-1931,
+-1922,
+-1912,
+-1902,
+-1893,
+-1883,
+-1873,
+-1863,
+-1853,
+-1843,
+-1833,
+-1822,
+-1812,
+-1802,
+-1791,
+-1781,
+-1770,
+-1759,
+-1749,
+-1738,
+-1727,
+-1716,
+-1705,
+-1694,
+-1683,
+-1672,
+-1661,
+-1649,
+-1638,
+-1627,
+-1615,
+-1604,
+-1592,
+-1581,
+-1569,
+-1557,
+-1546,
+-1534,
+-1522,
+-1510,
+-1498,
+-1487,
+-1475,
+-1463,
+-1451,
+-1439,
+-1427,
+-1414,
+-1402,
+-1390,
+-1378,
+-1366,
+-1353,
+-1341,
+-1329,
+-1316,
+-1304,
+-1292,
+-1279,
+-1267,
+-1255,
+-1242,
+-1230,
+-1217,
+-1205,
+-1192,
+-1180,
+-1167,
+-1155,
+-1142,
+-1129,
+-1117,
+-1104,
+-1092,
+-1079,
+-1067,
+-1054,
+-1041,
+-1029,
+-1016,
+-1004,
+-991,
+-978,
+-966,
+-953,
+-941,
+-928,
+-916,
+-903,
+-891,
+-878,
+-866,
+-853,
+-841,
+-828,
+-816,
+-803,
+-791,
+-778,
+-766,
+-754,
+-741,
+-729,
+-717,
+-704,
+-692,
+-680,
+-668,
+-656,
+-643,
+-631,
+-619,
+-607,
+-595,
+-583,
+-571,
+-559,
+-547,
+-535,
+-524,
+-512,
+-500,
+-488,
+-476,
+-465,
+-453,
+-442,
+-430,
+-419,
+-407,
+-396,
+-384,
+-373,
+-362,
+-350,
+-339,
+-328,
+-317,
+-306,
+-295,
+-284,
+-273,
+-262,
+-251,
+-241,
+-230,
+-219,
+-209,
+-198,
+-188,
+-177,
+-167,
+-156,
+-146,
+-136,
+-126,
+-116,
+-106,
+-96,
+-86,
+-76,
+-66,
+-56,
+-47,
+-37,
+-27,
+-18,
+-8,
+1,
+10,
+20,
+29,
+38,
+47,
+56,
+65,
+74,
+83,
+91,
+100,
+109,
+117,
+126,
+134,
+142,
+151,
+159,
+167,
+175,
+183,
+191,
+199,
+207,
+214,
+222,
+230,
+237,
+244,
+252,
+259,
+266,
+273,
+281,
+288,
+294,
+301,
+308,
+315,
+321,
+328,
+334,
+341,
+347,
+353,
+360,
+366,
+372,
+378,
+384,
+389,
+395,
+401,
+406,
+412,
+417,
+423,
+428,
+433,
+438,
+443,
+448,
+453,
+458,
+463,
+467,
+472,
+477,
+481,
+485,
+490,
+494,
+498,
+502,
+506,
+510,
+514,
+518,
+521,
+525,
+529,
+532,
+535,
+539,
+542,
+545,
+548,
+551,
+554,
+557,
+560,
+563,
+565,
+568,
+571,
+573,
+575,
+578,
+580,
+582,
+584,
+586,
+588,
+590,
+592,
+594,
+595,
+597,
+598,
+600,
+601,
+603,
+604,
+605,
+606,
+607,
+608,
+609,
+610,
+611,
+611,
+612,
+613,
+613,
+614,
+614,
+614,
+615,
+615,
+615,
+615,
+615,
+615,
+615,
+615,
+614,
+614,
+614,
+613,
+613,
+612,
+612,
+611,
+610,
+610,
+609,
+608,
+607,
+606,
+605,
+604,
+603,
+601,
+600,
+599,
+597,
+596,
+594,
+593,
+591,
+590,
+588,
+586,
+584,
+583,
+581,
+579,
+577,
+575,
+573,
+570,
+568,
+566,
+564,
+561,
+559,
+557,
+554,
+552,
+549,
+546,
+544,
+541,
+538,
+536,
+533,
+530,
+527,
+524,
+521,
+518,
+515,
+512,
+509,
+506,
+503,
+500,
+496,
+493,
+490,
+486,
+483,
+480,
+476,
+473,
+469,
+466,
+462,
+459,
+455,
+451,
+448,
+444,
+440,
+436,
+433,
+429,
+425,
+421,
+417,
+413,
+409,
+406,
+402,
+398,
+394,
+390,
+385,
+381,
+377,
+373,
+369,
+365,
+361,
+357,
+352,
+348,
+344,
+340,
+335,
+331,
+327,
+323,
+318,
+314,
+310,
+305,
+301,
+297,
+292,
+288,
+284,
+279,
+275,
+270,
+266,
+262,
+257,
+253,
+248,
+244,
+239,
+235,
+230,
+226,
+222,
+217,
+213,
+208,
+204,
+199,
+195,
+190,
+186,
+182,
+177,
+173,
+168,
+164,
+159,
+155,
+151,
+146,
+142,
+137,
+133,
+129,
+124,
+120,
+115,
+111,
+107,
+102,
+98,
+94,
+89,
+85,
+81,
+77,
+72,
+68,
+64,
+60,
+55,
+51,
+47,
+43,
+39,
+35,
+30,
+26,
+22,
+18,
+14,
+10,
+6,
+2,
+-2,
+-6,
+-10,
+-14,
+-18,
+-21,
+-25,
+-29,
+-33,
+-37,
+-41,
+-44,
+-48,
+-52,
+-55,
+-59,
+-63,
+-66,
+-70,
+-73,
+-77,
+-81,
+-84,
+-88,
+-91,
+-94,
+-98,
+-101,
+-104,
+-108,
+-111,
+-114,
+-118,
+-121,
+-124,
+-127,
+-130,
+-133,
+-136,
+-139,
+-142,
+-145,
+-148,
+-151,
+-154,
+-157,
+-160,
+-163,
+-165,
+-168,
+-171,
+-174,
+-176,
+-179,
+-181,
+-184,
+-187,
+-189,
+-192,
+-194,
+-196,
+-199,
+-201,
+-203,
+-206,
+-208,
+-210,
+-212,
+-214,
+-217,
+-219,
+-221,
+-223,
+-225,
+-227,
+-228,
+-230,
+-232,
+-234,
+-236,
+-238,
+-239,
+-241,
+-243,
+-244,
+-246,
+-247,
+-249,
+-250,
+-252,
+-253,
+-254,
+-256,
+-257,
+-258,
+-260,
+-261,
+-262,
+-263,
+-264,
+-265,
+-266,
+-267,
+-268,
+-269,
+-270,
+-271,
+-272,
+-272,
+-273,
+-274,
+-275,
+-275,
+-276,
+-277,
+-277,
+-278,
+-278,
+-279,
+-279,
+-279,
+-280,
+-280,
+-280,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-281,
+-280,
+-280,
+-280,
+-279,
+-279,
+-279,
+-278,
+-278,
+-277,
+-277,
+-276,
+-275,
+-275,
+-274,
+-273,
+-273,
+-272,
+-271,
+-270,
+-270,
+-269,
+-268,
+-267,
+-266,
+-265,
+-264,
+-263,
+-262,
+-261,
+-260,
+-259,
+-258,
+-256,
+-255,
+-254,
+-253,
+-251,
+-250,
+-249,
+-248,
+-246,
+-245,
+-243,
+-242,
+-240,
+-239,
+-237,
+-236,
+-234,
+-233,
+-231,
+-229,
+-228,
+-226,
+-224,
+-223,
+-221,
+-219,
+-217,
+-216,
+-214,
+-212,
+-210,
+-208,
+-206,
+-204,
+-203,
+-201,
+-199,
+-197,
+-195,
+-193,
+-191,
+-189,
+-186,
+-184,
+-182,
+-180,
+-178,
+-176,
+-174,
+-172,
+-169,
+-167,
+-165,
+-163,
+-160,
+-158,
+-156,
+-154,
+-151,
+-149,
+-147,
+-144,
+-142,
+-140,
+-137,
+-135,
+-133,
+-130,
+-128,
+-125,
+-123,
+-121,
+-118,
+-116,
+-113,
+-111,
+-108,
+-106,
+-103,
+-101,
+-98,
+-96,
+-93,
+-91,
+-88,
+-86,
+-83,
+-81,
+-78,
+-76,
+-73,
+-70,
+-68,
+-65,
+-63,
+-60,
+-58,
+-55,
+-53,
+-50,
+-47,
+-45,
+-42,
+-40,
+-37,
+-34,
+-32,
+-29,
+-27,
+-24,
+-22,
+-19,
+-16,
+-14,
+-11,
+-9,
+-6,
+-4,
+-1,
+1,
+4,
+7,
+9,
+12,
+14,
+17,
+19,
+22,
+24,
+27,
+29,
+32,
+34,
+37,
+39,
+42,
+44,
+47,
+49,
+51,
+54,
+56,
+59,
+61,
+63,
+66,
+68,
+71,
+73,
+75,
+78,
+80,
+82,
+84,
+87,
+89,
+91,
+94,
+96,
+98,
+100,
+102,
+105,
+107,
+109,
+111,
+113,
+115,
+118,
+120,
+122,
+124,
+126,
+128,
+130,
+132,
+134,
+136,
+138,
+140,
+142,
+144,
+146,
+147,
+149,
+151,
+153,
+155,
+157,
+158,
+160,
+162,
+164,
+165,
+167,
+169,
+170,
+172,
+174,
+175,
+177,
+179,
+180,
+182,
+183,
+185,
+186,
+188,
+189,
+190,
+192,
+193,
+195,
+196,
+197,
+199,
+200,
+201,
+202,
+204,
+205,
+206,
+207,
+208,
+209,
+211,
+212,
+213,
+214,
+215,
+216,
+217,
+218,
+219,
+220,
+221,
+221,
+222,
+223,
+224,
+225,
+225,
+226,
+227,
+228,
+228,
+229,
+230,
+230,
+231,
+231,
+232,
+233,
+233,
+234,
+234,
+235,
+235,
+235,
+236,
+236,
+237,
+237,
+237,
+237,
+238,
+238,
+238,
+238,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+239,
+238,
+238,
+238,
+238,
+238,
+237,
+237,
+237,
+236,
+236,
+236,
+235,
+235,
+234,
+234,
+234,
+233,
+233,
+232,
+232,
+231,
+230,
+230,
+229,
+229,
+228,
+227,
+227,
+226,
+225,
+224,
+224,
+223,
+222,
+221,
+220,
+220,
+219,
+218,
+217,
+216,
+215,
+214,
+213,
+212,
+211,
+210,
+209,
+208,
+207,
+206,
+205,
+204,
+203,
+202,
+200,
+199,
+198,
+197,
+196,
+194,
+193,
+192,
+191,
+189,
+188,
+187,
+186,
+184,
+183,
+182,
+180,
+179,
+177,
+176,
+175,
+173,
+172,
+170,
+169,
+167,
+166,
+164,
+163,
+161,
+160,
+158,
+157,
+155,
+154,
+152,
+151,
+149,
+147,
+146,
+144,
+143,
+141,
+139,
+138,
+136,
+134,
+133,
+131,
+129,
+128,
+126,
+124,
+122,
+121,
+119,
+117,
+116,
+114,
+112,
+110,
+109,
+107,
+105,
+103,
+102,
+100,
+98,
+96,
+94,
+93,
+91,
+89,
+87,
+85,
+84,
+82,
+80,
+78,
+76,
+75,
+73,
+71,
+69,
+67,
+66,
+64,
+62,
+60,
+58,
+56,
+55,
+53,
+51,
+49,
+47,
+46,
+44,
+42,
+40,
+38,
+36,
+35,
+33,
+31,
+29,
+27,
+26,
+24,
+22,
+20,
+19,
+17,
+15,
+13,
+11,
+10,
+8,
+6,
+4,
+3,
+1,
+-1,
+-3,
+-4,
+-6,
+-8,
+-9,
+-11,
+-13,
+-14,
+-16,
+-18,
+-20,
+-21,
+-23,
+-24,
+-26,
+-28,
+-29,
+-31,
+-33,
+-34,
+-36,
+-37,
+-39,
+-41,
+-42,
+-44,
+-45,
+-47,
+-48,
+-50,
+-51,
+-53,
+-54,
+-56,
+-57,
+-59,
+-60,
+-62,
+-63,
+-65,
+-66,
+-67,
+-69,
+-70,
+-71,
+-73,
+-74,
+-76,
+-77,
+-78,
+-79,
+-81,
+-82,
+-83,
+-85,
+-86,
+-87,
+-88,
+-89,
+-91,
+-92,
+-93,
+-94,
+-95,
+-96,
+-98,
+-99,
+-100,
+-101,
+-102,
+-103,
+-104,
+-105,
+-106,
+-107,
+-108,
+-109,
+-110,
+-111,
+-112,
+-113,
+-114,
+-115,
+-116,
+-117,
+-117,
+-118,
+-119,
+-120,
+-121,
+-121,
+-122,
+-123,
+-124,
+-125,
+-125,
+-126,
+-127,
+-127,
+-128,
+-129,
+-129,
+-130,
+-130,
+-131,
+-132,
+-132,
+-133,
+-133,
+-134,
+-134,
+-135,
+-135,
+-136,
+-136,
+-137,
+-137,
+-137,
+-138,
+-138,
+-139,
+-139,
+-139,
+-140,
+-140,
+-140,
+-140,
+-141,
+-141,
+-141,
+-141,
+-142,
+-142,
+-142,
+-142,
+-142,
+-142,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-143,
+-142,
+-142,
+-142,
+-142,
+-142,
+-142,
+-141,
+-141,
+-141,
+-141,
+-140,
+-140,
+-140,
+-140,
+-139,
+-139,
+-139,
+-138,
+-138,
+-138,
+-137,
+-137,
+-136,
+-136,
+-136,
+-135,
+-135,
+-134,
+-134,
+-133,
+-133,
+-132,
+-132,
+-131,
+-131,
+-130,
+-129,
+-129,
+-128,
+-128,
+-127,
+-126,
+-126,
+-125,
+-125,
+-124,
+-123,
+-122,
+-122,
+-121,
+-120,
+-120,
+-119,
+-118,
+-117,
+-117,
+-116,
+-115,
+-114,
+-113,
+-113,
+-112,
+-111,
+-110,
+-109,
+-108,
+-108,
+-107,
+-106,
+-105,
+-104,
+-103,
+-102,
+-101,
+-100,
+-99,
+-98,
+-97,
+-96,
+-96,
+-95,
+-94,
+-93,
+-92,
+-91,
+-90,
+-89,
+-88,
+-86,
+-85,
+-84,
+-83,
+-82,
+-81,
+-80,
+-79,
+-78,
+-77,
+-76,
+-75,
+-74,
+-73,
+-72,
+-70,
+-69,
+-68,
+-67,
+-66,
+-65,
+-64,
+-63,
+-61,
+-60,
+-59,
+-58,
+-57,
+-56,
+-55,
+-53,
+-52,
+-51,
+-50,
+-49,
+-48,
+-46,
+-45,
+-44,
+-43,
+-42,
+-41,
+-39,
+-38,
+-37,
+-36,
+-35,
+-34,
+-32,
+-31,
+-30,
+-29,
+-28,
+-27,
+-25,
+-24,
+-23,
+-22,
+-21,
+-19,
+-18,
+-17,
+-16,
+-15,
+-14,
+-12,
+-11,
+-10,
+-9,
+-8,
+-7,
+-5,
+-4,
+-3,
+-2,
+-1,
+0,
+1,
+3,
+4,
+5,
+6,
+7,
+8,
+9,
+10,
+12,
+13,
+14,
+15,
+16,
+17,
+18,
+19,
+20,
+21,
+22,
+23,
+24,
+26,
+27,
+28,
+29,
+30,
+31,
+32,
+33,
+34,
+35,
+36,
+37,
+38,
+39,
+40,
+41,
+42,
+42,
+43,
+44,
+45,
+46,
+47,
+48,
+49,
+50,
+51,
+52,
+52,
+53,
+54,
+55,
+56,
+57,
+58,
+58,
+59,
+60,
+61,
+62,
+62,
+63,
+64,
+65,
+65,
+66,
+67,
+68,
+68,
+69,
+70,
+70,
+71,
+72,
+72,
+73,
+74,
+74,
+75,
+75,
+76,
+77,
+77,
+78,
+78,
+79,
+79,
+80,
+81,
+81,
+82,
+82,
+83,
+83,
+83,
+84,
+84,
+85,
+85,
+86,
+86,
+86,
+87,
+87,
+88,
+88,
+88,
+89,
+89,
+89,
+90,
+90,
+90,
+91,
+91,
+91,
+91,
+92,
+92,
+92,
+92,
+92,
+93,
+93,
+93,
+93,
+93,
+93,
+93,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+94,
+93,
+93,
+93,
+93,
+93,
+93,
+92,
+92,
+92,
+92,
+92,
+91,
+91,
+91,
+91,
+90,
+90,
+90,
+90,
+89,
+89,
+89,
+88,
+88,
+88,
+87,
+87,
+87,
+86,
+86,
+85,
+85,
+85,
+84,
+84,
+83,
+83,
+82,
+82,
+81,
+81,
+81,
+80,
+80,
+79,
+78,
+78,
+77,
+77,
+76,
+76,
+75,
+75,
+74,
+74,
+73,
+72,
+72,
+71,
+71,
+70,
+69,
+69,
+68,
+67,
+67,
+66,
+65,
+65,
+64,
+63,
+63,
+62,
+61,
+61,
+60,
+59,
+58,
+58,
+57,
+56,
+55,
+55,
+54,
+53,
+52,
+52,
+51,
+50,
+49,
+49,
+48,
+47,
+46,
+45,
+45,
+44,
+43,
+42,
+41,
+41,
+40,
+39,
+38,
+37,
+36,
+36,
+35,
+34,
+33,
+32,
+31,
+30,
+30,
+29,
+28,
+27,
+26,
+25,
+24,
+24,
+23,
+22,
+21,
+20,
+19,
+18,
+17,
+17,
+16,
+15,
+14,
+13,
+12,
+11,
+10,
+9,
+9,
+8,
+7,
+6,
+5,
+4,
+3,
+2,
+2,
+1,
+0,
+-1,
+-2,
+-3,
+-4,
+-5,
+-6,
+-6,
+-7,
+-8,
+-9,
+-10,
+-11,
+-12,
+-12,
+-13,
+-14,
+-15,
+-16,
+-17,
+-18,
+-18,
+-19,
+-20,
+-21,
+-22,
+-23,
+-24,
+-24,
+-25,
+-26,
+-27,
+-28,
+-28,
+-29,
+-30,
+-31,
+-32,
+-32,
+-33,
+-34,
+-35,
+-36,
+-36,
+-37,
+-38,
+-39,
+-39,
+-40,
+-41,
+-42,
+-42,
+-43,
+-44,
+-45,
+-45,
+-46,
+-47,
+-48,
+-48,
+-49,
+-50,
+-50,
+-51,
+-52,
+-52,
+-53,
+-54,
+-54,
+-55,
+-56,
+-56,
+-57,
+-58,
+-58,
+-59,
+-59,
+-60,
+-61,
+-61,
+-62,
+-62,
+-63,
+-63,
+-64,
+-65,
+-65,
+-66,
+-66,
+-67,
+-67,
+-68,
+-68,
+-69,
+-69,
+-70,
+-70,
+-71,
+-71,
+-72,
+-72,
+-72,
+-73,
+-73,
+-74,
+-74,
+-75,
+-75,
+-75,
+-76,
+-76,
+-77,
+-77,
+-77,
+-78,
+-78,
+-78,
+-79,
+-79,
+-79,
+-80,
+-80,
+-80,
+-80,
+-81,
+-81,
+-81,
+-81,
+-82,
+-82,
+-82,
+-82,
+-83,
+-83,
+-83,
+-83,
+-83,
+-84,
+-84,
+-84,
+-84,
+-84,
+-84,
+-84,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-85,
+-84,
+-84,
+-84,
+-84,
+-84,
+-84,
+-84,
+-83,
+-83,
+-83,
+-83,
+-83,
+-83,
+-82,
+-82,
+-82,
+-82,
+-81,
+-81,
+-81,
+-81,
+-80,
+-80,
+-80,
+-80,
+-79,
+-79,
+-79,
+-78,
+-78,
+-78,
+-77,
+-77,
+-77,
+-76,
+-76,
+-76,
+-75,
+-75,
+-74,
+-74,
+-74,
+-73,
+-73,
+-72,
+-72,
+-72,
+-71,
+-71,
+-70,
+-70,
+-69,
+-69,
+-68,
+-68,
+-67,
+-67,
+-67,
+-66,
+-66,
+-65,
+-65,
+-64,
+-63,
+-63,
+-62,
+-62,
+-61,
+-61,
+-60,
+-60,
+-59,
+-59,
+-58,
+-57,
+-57,
+-56,
+-56,
+-55,
+-55,
+-54,
+-53,
+-53,
+-52,
+-52,
+-51,
+-50,
+-50,
+-49,
+-49,
+-48,
+-47,
+-47,
+-46,
+-45,
+-45,
+-44,
+-43,
+-43,
+-42,
+-41,
+-41,
+-40,
+-39,
+-39,
+-38,
+-37,
+-37,
+-36,
+-35,
+-35,
+-34,
+-33,
+-33,
+-32,
+-31,
+-31,
+-30,
+-29,
+-29,
+-28,
+-27,
+-26,
+-26,
+-25,
+-24,
+-24,
+-23,
+-22,
+-22,
+-21,
+-20,
+-19,
+-19,
+-18,
+-17,
+-17,
+-16,
+-15,
+-14,
+-14,
+-13,
+-12,
+-12,
+-11,
+-10,
+-10,
+-9,
+-8,
+-7,
+-7,
+-6,
+-5,
+-5,
+-4,
+-3,
+-3,
+-2,
+-1,
+0,
+0,
+1,
+2,
+2,
+3,
+4,
+4,
+5,
+6,
+6,
+7,
+8,
+8,
+9,
+10,
+10,
+11,
+12,
+12,
+13,
+14,
+14,
+15,
+16,
+16,
+17,
+18,
+18,
+19,
+20,
+20,
+21,
+21,
+22,
+23,
+23,
+24,
+24,
+25,
+26,
+26,
+27,
+27,
+28,
+29,
+29,
+30,
+30,
+31,
+31,
+32,
+33,
+33,
+34,
+34,
+35,
+35,
+36,
+36,
+37,
+37,
+38,
+38,
+39,
+39,
+40,
+40,
+41,
+41,
+42,
+42,
+43,
+43,
+43,
+44,
+44,
+45,
+45,
+46,
+46,
+46,
+47,
+47,
+48,
+48,
+48,
+49,
+49,
+50,
+50,
+50,
+51,
+51,
+51,
+52,
+52,
+52,
+53,
+53,
+53,
+54,
+54,
+54,
+54,
+55,
+55,
+55,
+56,
+56,
+56,
+56,
+56,
+57,
+57,
+57,
+57,
+58,
+58,
+58,
+58,
+58,
+59,
+59,
+59,
+59,
+59,
+59,
+59,
+60,
+60,
+60,
+60,
+60,
+60,
+60,
+60,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61,
+61};
--- attrafax-0.9/include/internal/modems/v21txrx.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/modems/v21txrx.h	2010-08-04 23:42:22.000000000 +0300
@@ -46,7 +46,7 @@
 void v21tx_context(v21tx_state *, void *);
 
 typedef struct {
-	const complex *filter[_V21CONST_NBAUD];
+	const complexi *filter[_V21CONST_NBAUD];
 	signed short csbuf[2*_V21CONST_FLEN];
 	int csbufp;
 	int bf, pll, ipll;
--- attrafax-0.9/include/internal/modems/v27ter2400rxfilter.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/modems/v27ter2400rxfilter.h	2010-08-04 23:42:22.000000000 +0300
@@ -18,6 +18,12 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
+ *
+ * The filter is 2^14 scaled
  */
 
 
@@ -28,329 +34,328 @@
 #define L	12
 
 static const float f[N*L+1] = {
-	4.1440959127e-02f,
-	4.2007342050e-02f,
-	4.2435842035e-02f,
-	4.2720515416e-02f,
-	4.2855692100e-02f,
-	4.2835998491e-02f,
-	4.2656380086e-02f,
-	4.2312123667e-02f,
-	4.1798879029e-02f,
-	4.1112680180e-02f,
-	4.0249965943e-02f,
-	3.9207599905e-02f,
-	3.7982889637e-02f,
-	3.6573605139e-02f,
-	3.4977996434e-02f,
-	3.3194810260e-02f,
-	3.1223305803e-02f,
-	2.9063269409e-02f,
-	2.6715028225e-02f,
-	2.4179462717e-02f,
-	2.1458018012e-02f,
-	1.8552714018e-02f,
-	1.5466154278e-02f,
-	1.2201533515e-02f,
-	8.7626438280e-03f,
-	5.1538794973e-03f,
-	1.3802403785e-03f,
-	-2.5526661595e-03f,
-	-6.6386247707e-03f,
-	-1.0870813170e-02f,
-	-1.5241804692e-02f,
-	-1.9743572385e-02f,
-	-2.4367494662e-02f,
-	-2.9104362501e-02f,
-	-3.3944388221e-02f,
-	-3.8877215814e-02f,
-	-4.3891932853e-02f,
-	-4.8977083946e-02f,
-	-5.4120685743e-02f,
-	-5.9310243479e-02f,
-	-6.4532769021e-02f,
-	-6.9774800420e-02f,
-	-7.5022422921e-02f,
-	-8.0261291409e-02f,
-	-8.5476654260e-02f,
-	-9.0653378554e-02f,
-	-9.5775976608e-02f,
-	-1.0082863379e-01f,
-	-1.0579523754e-01f,
-	-1.1065940763e-01f,
-	-1.1540452742e-01f,
-	-1.2001377630e-01f,
-	-1.2447016308e-01f,
-	-1.2875656025e-01f,
-	-1.3285573922e-01f,
-	-1.3675040622e-01f,
-	-1.4042323902e-01f,
-	-1.4385692424e-01f,
-	-1.4703419520e-01f,
-	-1.4993787029e-01f,
-	-1.5255089171e-01f,
-	-1.5485636452e-01f,
-	-1.5683759588e-01f,
-	-1.5847813451e-01f,
-	-1.5976181010e-01f,
-	-1.6067277270e-01f,
-	-1.6119553200e-01f,
-	-1.6131499636e-01f,
-	-1.6101651149e-01f,
-	-1.6028589876e-01f,
-	-1.5910949300e-01f,
-	-1.5747417963e-01f,
-	-1.5536743118e-01f,
-	-1.5277734301e-01f,
-	-1.4969266814e-01f,
-	-1.4610285109e-01f,
-	-1.4199806079e-01f,
-	-1.3736922219e-01f,
-	-1.3220804681e-01f,
-	-1.2650706188e-01f,
-	-1.2025963820e-01f,
-	-1.1346001646e-01f,
-	-1.0610333210e-01f,
-	-9.8185638516e-02f,
-	-8.9703928691e-02f,
-	-8.0656154996e-02f,
-	-7.1041247269e-02f,
-	-6.0859129030e-02f,
-	-5.0110731795e-02f,
-	-3.8798007447e-02f,
-	-2.6923938609e-02f,
-	-1.4492546989e-02f,
-	-1.5088996486e-03f,
-	1.2020886825e-02f,
-	2.6089644281e-02f,
-	4.0689153119e-02f,
-	5.5810144569e-02f,
-	7.1442305164e-02f,
-	8.7574283394e-02f,
-	1.0419369856e-01f,
-	1.2128715184e-01f,
-	1.3884023949e-01f,
-	1.5683756826e-01f,
-	1.7526277301e-01f,
-	1.9409853633e-01f,
-	2.1332661043e-01f,
-	2.3292784099e-01f,
-	2.5288219308e-01f,
-	2.7316877914e-01f,
-	2.9376588882e-01f,
-	3.1465102077e-01f,
-	3.3580091630e-01f,
-	3.5719159479e-01f,
-	3.7879839081e-01f,
-	4.0059599294e-01f,
-	4.2255848415e-01f,
-	4.4465938367e-01f,
-	4.6687169030e-01f,
-	4.8916792706e-01f,
-	5.1152018708e-01f,
-	5.3390018069e-01f,
-	5.5627928351e-01f,
-	5.7862858558e-01f,
-	6.0091894135e-01f,
-	6.2312102039e-01f,
-	6.4520535884e-01f,
-	6.6714241137e-01f,
-	6.8890260362e-01f,
-	7.1045638500e-01f,
-	7.3177428167e-01f,
-	7.5282694973e-01f,
-	7.7358522836e-01f,
-	7.9402019288e-01f,
-	8.1410320762e-01f,
-	8.3380597844e-01f,
-	8.5310060484e-01f,
-	8.7195963152e-01f,
-	8.9035609930e-01f,
-	9.0826359524e-01f,
-	9.2565630193e-01f,
-	9.4250904579e-01f,
-	9.5879734428e-01f,
-	9.7449745193e-01f,
-	9.8958640515e-01f,
-	1.0040420655e+00f,
-	1.0178431618e+00f,
-	1.0309693302e+00f,
-	1.0434011531e+00f,
-	1.0551201960e+00f,
-	1.0661090425e+00f,
-	1.0763513281e+00f,
-	1.0858317707e+00f,
-	1.0945362006e+00f,
-	1.1024515869e+00f,
-	1.1095660633e+00f,
-	1.1158689502e+00f,
-	1.1213507757e+00f,
-	1.1260032935e+00f,
-	1.1298194989e+00f,
-	1.1327936424e+00f,
-	1.1349212404e+00f,
-	1.1361990845e+00f,
-	1.1366252468e+00f,
-	1.1361990845e+00f,
-	1.1349212404e+00f,
-	1.1327936424e+00f,
-	1.1298194989e+00f,
-	1.1260032935e+00f,
-	1.1213507757e+00f,
-	1.1158689502e+00f,
-	1.1095660633e+00f,
-	1.1024515869e+00f,
-	1.0945362006e+00f,
-	1.0858317707e+00f,
-	1.0763513281e+00f,
-	1.0661090425e+00f,
-	1.0551201960e+00f,
-	1.0434011531e+00f,
-	1.0309693302e+00f,
-	1.0178431618e+00f,
-	1.0040420655e+00f,
-	9.8958640515e-01f,
-	9.7449745193e-01f,
-	9.5879734428e-01f,
-	9.4250904579e-01f,
-	9.2565630193e-01f,
-	9.0826359524e-01f,
-	8.9035609930e-01f,
-	8.7195963152e-01f,
-	8.5310060484e-01f,
-	8.3380597844e-01f,
-	8.1410320762e-01f,
-	7.9402019288e-01f,
-	7.7358522836e-01f,
-	7.5282694973e-01f,
-	7.3177428167e-01f,
-	7.1045638500e-01f,
-	6.8890260362e-01f,
-	6.6714241137e-01f,
-	6.4520535884e-01f,
-	6.2312102039e-01f,
-	6.0091894135e-01f,
-	5.7862858558e-01f,
-	5.5627928351e-01f,
-	5.3390018069e-01f,
-	5.1152018708e-01f,
-	4.8916792706e-01f,
-	4.6687169030e-01f,
-	4.4465938367e-01f,
-	4.2255848415e-01f,
-	4.0059599294e-01f,
-	3.7879839081e-01f,
-	3.5719159479e-01f,
-	3.3580091630e-01f,
-	3.1465102077e-01f,
-	2.9376588882e-01f,
-	2.7316877914e-01f,
-	2.5288219308e-01f,
-	2.3292784099e-01f,
-	2.1332661043e-01f,
-	1.9409853633e-01f,
-	1.7526277301e-01f,
-	1.5683756826e-01f,
-	1.3884023949e-01f,
-	1.2128715184e-01f,
-	1.0419369856e-01f,
-	8.7574283394e-02f,
-	7.1442305164e-02f,
-	5.5810144569e-02f,
-	4.0689153119e-02f,
-	2.6089644281e-02f,
-	1.2020886825e-02f,
-	-1.5088996486e-03f,
-	-1.4492546989e-02f,
-	-2.6923938609e-02f,
-	-3.8798007447e-02f,
-	-5.0110731795e-02f,
-	-6.0859129030e-02f,
-	-7.1041247269e-02f,
-	-8.0656154996e-02f,
-	-8.9703928691e-02f,
-	-9.8185638516e-02f,
-	-1.0610333210e-01f,
-	-1.1346001646e-01f,
-	-1.2025963820e-01f,
-	-1.2650706188e-01f,
-	-1.3220804681e-01f,
-	-1.3736922219e-01f,
-	-1.4199806079e-01f,
-	-1.4610285109e-01f,
-	-1.4969266814e-01f,
-	-1.5277734301e-01f,
-	-1.5536743118e-01f,
-	-1.5747417963e-01f,
-	-1.5910949300e-01f,
-	-1.6028589876e-01f,
-	-1.6101651149e-01f,
-	-1.6131499636e-01f,
-	-1.6119553200e-01f,
-	-1.6067277270e-01f,
-	-1.5976181010e-01f,
-	-1.5847813451e-01f,
-	-1.5683759588e-01f,
-	-1.5485636452e-01f,
-	-1.5255089171e-01f,
-	-1.4993787029e-01f,
-	-1.4703419520e-01f,
-	-1.4385692424e-01f,
-	-1.4042323902e-01f,
-	-1.3675040622e-01f,
-	-1.3285573922e-01f,
-	-1.2875656025e-01f,
-	-1.2447016308e-01f,
-	-1.2001377630e-01f,
-	-1.1540452742e-01f,
-	-1.1065940763e-01f,
-	-1.0579523754e-01f,
-	-1.0082863379e-01f,
-	-9.5775976608e-02f,
-	-9.0653378554e-02f,
-	-8.5476654260e-02f,
-	-8.0261291409e-02f,
-	-7.5022422921e-02f,
-	-6.9774800420e-02f,
-	-6.4532769021e-02f,
-	-5.9310243479e-02f,
-	-5.4120685743e-02f,
-	-4.8977083946e-02f,
-	-4.3891932853e-02f,
-	-3.8877215814e-02f,
-	-3.3944388221e-02f,
-	-2.9104362501e-02f,
-	-2.4367494662e-02f,
-	-1.9743572385e-02f,
-	-1.5241804692e-02f,
-	-1.0870813170e-02f,
-	-6.6386247707e-03f,
-	-2.5526661595e-03f,
-	1.3802403785e-03f,
-	5.1538794973e-03f,
-	8.7626438280e-03f,
-	1.2201533515e-02f,
-	1.5466154278e-02f,
-	1.8552714018e-02f,
-	2.1458018012e-02f,
-	2.4179462717e-02f,
-	2.6715028225e-02f,
-	2.9063269409e-02f,
-	3.1223305803e-02f,
-	3.3194810260e-02f,
-	3.4977996434e-02f,
-	3.6573605139e-02f,
-	3.7982889637e-02f,
-	3.9207599905e-02f,
-	4.0249965943e-02f,
-	4.1112680180e-02f,
-	4.1798879029e-02f,
-	4.2312123667e-02f,
-	4.2656380086e-02f,
-	4.2835998491e-02f,
-	4.2855692100e-02f,
-	4.2720515416e-02f,
-	4.2435842035e-02f,
-	4.2007342050e-02f,
-	4.1440959127e-02f,
-};
+679	,
+688	,
+695	,
+700	,
+702	,
+702	,
+699	,
+693	,
+685	,
+674	,
+659	,
+642	,
+622	,
+599	,
+573	,
+544	,
+512	,
+476	,
+438	,
+396	,
+352	,
+304	,
+253	,
+200	,
+144	,
+84	,
+23	,
+-42	,
+-109	,
+-178	,
+-250	,
+-323	,
+-399	,
+-477	,
+-556	,
+-637	,
+-719	,
+-802	,
+-887	,
+-972	,
+-1057	,
+-1143	,
+-1229	,
+-1315	,
+-1400	,
+-1485	,
+-1569	,
+-1652	,
+-1733	,
+-1813	,
+-1891	,
+-1966	,
+-2039	,
+-2110	,
+-2177	,
+-2241	,
+-2301	,
+-2357	,
+-2409	,
+-2457	,
+-2499	,
+-2537	,
+-2570	,
+-2597	,
+-2618	,
+-2632	,
+-2641	,
+-2643	,
+-2638	,
+-2626	,
+-2607	,
+-2580	,
+-2546	,
+-2503	,
+-2453	,
+-2394	,
+-2326	,
+-2251	,
+-2166	,
+-2073	,
+-1970	,
+-1859	,
+-1738	,
+-1609	,
+-1470	,
+-1321	,
+-1164	,
+-997	,
+-821	,
+-636	,
+-441	,
+-237	,
+-25	,
+197	,
+427	,
+667	,
+914	,
+1171	,
+1435	,
+1707	,
+1987	,
+2275	,
+2570	,
+2872	,
+3180	,
+3495	,
+3816	,
+4143	,
+4476	,
+4813	,
+5155	,
+5502	,
+5852	,
+6206	,
+6563	,
+6923	,
+7285	,
+7649	,
+8015	,
+8381	,
+8747	,
+9114	,
+9480	,
+9845	,
+10209	,
+10571	,
+10930	,
+11287	,
+11640	,
+11989	,
+12334	,
+12674	,
+13009	,
+13338	,
+13661	,
+13977	,
+14286	,
+14588	,
+14881	,
+15166	,
+15442	,
+15709	,
+15966	,
+16213	,
+16450	,
+16676	,
+16891	,
+17095	,
+17287	,
+17467	,
+17635	,
+17790	,
+17933	,
+18063	,
+18179	,
+18282	,
+18372	,
+18448	,
+18511	,
+18560	,
+18595	,
+18615	,
+18622	,
+18615	,
+18595	,
+18560	,
+18511	,
+18448	,
+18372	,
+18282	,
+18179	,
+18063	,
+17933	,
+17790	,
+17635	,
+17467	,
+17287	,
+17095	,
+16891	,
+16676	,
+16450	,
+16213	,
+15966	,
+15709	,
+15442	,
+15166	,
+14881	,
+14588	,
+14286	,
+13977	,
+13661	,
+13338	,
+13009	,
+12674	,
+12334	,
+11989	,
+11640	,
+11287	,
+10930	,
+10571	,
+10209	,
+9845	,
+9480	,
+9114	,
+8747	,
+8381	,
+8015	,
+7649	,
+7285	,
+6923	,
+6563	,
+6206	,
+5852	,
+5502	,
+5155	,
+4813	,
+4476	,
+4143	,
+3816	,
+3495	,
+3180	,
+2872	,
+2570	,
+2275	,
+1987	,
+1707	,
+1435	,
+1171	,
+914	,
+667	,
+427	,
+197	,
+-25	,
+-237	,
+-441	,
+-636	,
+-821	,
+-997	,
+-1164	,
+-1321	,
+-1470	,
+-1609	,
+-1738	,
+-1859	,
+-1970	,
+-2073	,
+-2166	,
+-2251	,
+-2326	,
+-2394	,
+-2453	,
+-2503	,
+-2546	,
+-2580	,
+-2607	,
+-2626	,
+-2638	,
+-2643	,
+-2641	,
+-2632	,
+-2618	,
+-2597	,
+-2570	,
+-2537	,
+-2499	,
+-2457	,
+-2409	,
+-2357	,
+-2301	,
+-2241	,
+-2177	,
+-2110	,
+-2039	,
+-1966	,
+-1891	,
+-1813	,
+-1733	,
+-1652	,
+-1569	,
+-1485	,
+-1400	,
+-1315	,
+-1229	,
+-1143	,
+-1057	,
+-972	,
+-887	,
+-802	,
+-719	,
+-637	,
+-556	,
+-477	,
+-399	,
+-323	,
+-250	,
+-178	,
+-109	,
+-42	,
+23	,
+84	,
+144	,
+200	,
+253	,
+304	,
+352	,
+396	,
+438	,
+476	,
+512	,
+544	,
+573	,
+599	,
+622	,
+642	,
+659	,
+674	,
+685	,
+693	,
+699	,
+702	,
+702	,
+700	,
+695	,
+688	,
+679};
--- attrafax-0.9/include/internal/modems/v27ter4800rxfilter.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/modems/v27ter4800rxfilter.h	2010-08-04 23:42:22.000000000 +0300
@@ -18,6 +18,12 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
+ *
+ * The filter is 2^14 scaled
  */
 
 
@@ -28,221 +34,220 @@
 #define L	8
 
 static const float f[N*L+1] = {
-	-1.8512664414e-02f,
-	-1.9183032388e-02f,
-	-1.9558909529e-02f,
-	-1.9623131446e-02f,
-	-1.9362155616e-02f,
-	-1.8766386692e-02f,
-	-1.7830464608e-02f,
-	-1.6553510715e-02f,
-	-1.4939327526e-02f,
-	-1.2996548059e-02f,
-	-1.0738731233e-02f,
-	-8.1844002980e-03f,
-	-5.3570218373e-03f,
-	-2.2849235127e-03f,
-	9.9885064769e-04f,
-	4.4567479241e-03f,
-	8.0469773464e-03f,
-	1.1723841985e-02f,
-	1.5438131446e-02f,
-	1.9137572189e-02f,
-	2.2767332567e-02f,
-	2.6270578787e-02f,
-	2.9589077284e-02f,
-	3.2663838386e-02f,
-	3.5435795495e-02f,
-	3.7846513485e-02f,
-	3.9838919493e-02f,
-	4.1358048812e-02f,
-	4.2351798280e-02f,
-	4.2771679172e-02f,
-	4.2573561454e-02f,
-	4.1718401077e-02f,
-	4.0172941922e-02f,
-	3.7910384094e-02f,
-	3.4911010327e-02f,
-	3.1162762506e-02f,
-	2.6661760632e-02f,
-	2.1412756910e-02f,
-	1.5429518151e-02f,
-	8.7351302459e-03f,
-	1.3622190731e-03f,
-	-6.6469170287e-03f,
-	-1.5240267355e-02f,
-	-2.4356164756e-02f,
-	-3.3923439769e-02f,
-	-4.3861674380e-02f,
-	-5.4081555894e-02f,
-	-6.4485330357e-02f,
-	-7.4967353987e-02f,
-	-8.5414740021e-02f,
-	-9.5708097399e-02f,
-	-1.0572235669e-01f,
-	-1.1532767770e-01f,
-	-1.2439043221e-01f,
-	-1.3277425457e-01f,
-	-1.4034115180e-01f,
-	-1.4695266429e-01f,
-	-1.5247106742e-01f,
-	-1.5676060378e-01f,
-	-1.5968873525e-01f,
-	-1.6112740375e-01f,
-	-1.6095428903e-01f,
-	-1.5905405194e-01f,
-	-1.5531955126e-01f,
-	-1.4965302234e-01f,
-	-1.4196720589e-01f,
-	-1.3218641559e-01f,
-	-1.2024753343e-01f,
-	-1.0610092228e-01f,
-	-8.9711245739e-02f,
-	-7.1058186075e-02f,
-	-5.0137051733e-02f,
-	-2.6959266931e-02f,
-	-1.5527367353e-03f,
-	2.6037917891e-02f,
-	5.5751259469e-02f,
-	8.7509071046e-02f,
-	1.2121653289e-01f,
-	1.5676253962e-01f,
-	1.9402015716e-01f,
-	2.3284721786e-01f,
-	2.7308705047e-01f,
-	3.1456934086e-01f,
-	3.5711111763e-01f,
-	4.0051785601e-01f,
-	4.4458469197e-01f,
-	4.8909773762e-01f,
-	5.3383548773e-01f,
-	5.7857030657e-01f,
-	6.2306998316e-01f,
-	6.6709934250e-01f,
-	7.1042189962e-01f,
-	7.5280154290e-01f,
-	7.9400423262e-01f,
-	8.3379970057e-01f,
-	8.7196313634e-01f,
-	9.0827684611e-01f,
-	9.4253186963e-01f,
-	9.7452954166e-01f,
-	1.0040829843e+00f,
-	1.0310185176e+00f,
-	1.0551769757e+00f,
-	1.0764149177e+00f,
-	1.0946057222e+00f,
-	1.1096405559e+00f,
-	1.1214292087e+00f,
-	1.1299007866e+00f,
-	1.1350042571e+00f,
-	1.1367088425e+00f,
-	1.1350042571e+00f,
-	1.1299007866e+00f,
-	1.1214292087e+00f,
-	1.1096405559e+00f,
-	1.0946057222e+00f,
-	1.0764149177e+00f,
-	1.0551769757e+00f,
-	1.0310185176e+00f,
-	1.0040829843e+00f,
-	9.7452954166e-01f,
-	9.4253186963e-01f,
-	9.0827684611e-01f,
-	8.7196313634e-01f,
-	8.3379970057e-01f,
-	7.9400423262e-01f,
-	7.5280154290e-01f,
-	7.1042189962e-01f,
-	6.6709934250e-01f,
-	6.2306998316e-01f,
-	5.7857030657e-01f,
-	5.3383548773e-01f,
-	4.8909773762e-01f,
-	4.4458469197e-01f,
-	4.0051785601e-01f,
-	3.5711111763e-01f,
-	3.1456934086e-01f,
-	2.7308705047e-01f,
-	2.3284721786e-01f,
-	1.9402015716e-01f,
-	1.5676253962e-01f,
-	1.2121653289e-01f,
-	8.7509071046e-02f,
-	5.5751259469e-02f,
-	2.6037917891e-02f,
-	-1.5527367353e-03f,
-	-2.6959266931e-02f,
-	-5.0137051733e-02f,
-	-7.1058186075e-02f,
-	-8.9711245739e-02f,
-	-1.0610092228e-01f,
-	-1.2024753343e-01f,
-	-1.3218641559e-01f,
-	-1.4196720589e-01f,
-	-1.4965302234e-01f,
-	-1.5531955126e-01f,
-	-1.5905405194e-01f,
-	-1.6095428903e-01f,
-	-1.6112740375e-01f,
-	-1.5968873525e-01f,
-	-1.5676060378e-01f,
-	-1.5247106742e-01f,
-	-1.4695266429e-01f,
-	-1.4034115180e-01f,
-	-1.3277425457e-01f,
-	-1.2439043221e-01f,
-	-1.1532767770e-01f,
-	-1.0572235669e-01f,
-	-9.5708097399e-02f,
-	-8.5414740021e-02f,
-	-7.4967353987e-02f,
-	-6.4485330357e-02f,
-	-5.4081555894e-02f,
-	-4.3861674380e-02f,
-	-3.3923439769e-02f,
-	-2.4356164756e-02f,
-	-1.5240267355e-02f,
-	-6.6469170287e-03f,
-	1.3622190731e-03f,
-	8.7351302459e-03f,
-	1.5429518151e-02f,
-	2.1412756910e-02f,
-	2.6661760632e-02f,
-	3.1162762506e-02f,
-	3.4911010327e-02f,
-	3.7910384094e-02f,
-	4.0172941922e-02f,
-	4.1718401077e-02f,
-	4.2573561454e-02f,
-	4.2771679172e-02f,
-	4.2351798280e-02f,
-	4.1358048812e-02f,
-	3.9838919493e-02f,
-	3.7846513485e-02f,
-	3.5435795495e-02f,
-	3.2663838386e-02f,
-	2.9589077284e-02f,
-	2.6270578787e-02f,
-	2.2767332567e-02f,
-	1.9137572189e-02f,
-	1.5438131446e-02f,
-	1.1723841985e-02f,
-	8.0469773464e-03f,
-	4.4567479241e-03f,
-	9.9885064769e-04f,
-	-2.2849235127e-03f,
-	-5.3570218373e-03f,
-	-8.1844002980e-03f,
-	-1.0738731233e-02f,
-	-1.2996548059e-02f,
-	-1.4939327526e-02f,
-	-1.6553510715e-02f,
-	-1.7830464608e-02f,
-	-1.8766386692e-02f,
-	-1.9362155616e-02f,
-	-1.9623131446e-02f,
-	-1.9558909529e-02f,
-	-1.9183032388e-02f,
-	-1.8512664414e-02f
-};
+-303	,
+-314	,
+-320	,
+-322	,
+-317	,
+-307	,
+-292	,
+-271	,
+-245	,
+-213	,
+-176	,
+-134	,
+-88	,
+-37	,
+16	,
+73	,
+132	,
+192	,
+253	,
+314	,
+373	,
+430	,
+485	,
+535	,
+581	,
+620	,
+653	,
+678	,
+694	,
+701	,
+698	,
+684	,
+658	,
+621	,
+572	,
+511	,
+437	,
+351	,
+253	,
+143	,
+22	,
+-109	,
+-250	,
+-399	,
+-556	,
+-719	,
+-886	,
+-1057	,
+-1228	,
+-1399	,
+-1568	,
+-1732	,
+-1890	,
+-2038	,
+-2175	,
+-2299	,
+-2408	,
+-2498	,
+-2568	,
+-2616	,
+-2640	,
+-2637	,
+-2606	,
+-2545	,
+-2452	,
+-2326	,
+-2166	,
+-1970	,
+-1738	,
+-1470	,
+-1164	,
+-821	,
+-442	,
+-25	,
+427	,
+913	,
+1434	,
+1986	,
+2568	,
+3179	,
+3815	,
+4474	,
+5154	,
+5851	,
+6562	,
+7284	,
+8013	,
+8746	,
+9479	,
+10208	,
+10930	,
+11640	,
+12334	,
+13009	,
+13661	,
+14286	,
+14881	,
+15442	,
+15967	,
+16451	,
+16892	,
+17288	,
+17636	,
+17934	,
+18180	,
+18373	,
+18512	,
+18596	,
+18624	,
+18596	,
+18512	,
+18373	,
+18180	,
+17934	,
+17636	,
+17288	,
+16892	,
+16451	,
+15967	,
+15442	,
+14881	,
+14286	,
+13661	,
+13009	,
+12334	,
+11640	,
+10930	,
+10208	,
+9479	,
+8746	,
+8013	,
+7284	,
+6562	,
+5851	,
+5154	,
+4474	,
+3815	,
+3179	,
+2568	,
+1986	,
+1434	,
+913	,
+427	,
+-25	,
+-442	,
+-821	,
+-1164	,
+-1470	,
+-1738	,
+-1970	,
+-2166	,
+-2326	,
+-2452	,
+-2545	,
+-2606	,
+-2637	,
+-2640	,
+-2616	,
+-2568	,
+-2498	,
+-2408	,
+-2299	,
+-2175	,
+-2038	,
+-1890	,
+-1732	,
+-1568	,
+-1399	,
+-1228	,
+-1057	,
+-886	,
+-719	,
+-556	,
+-399	,
+-250	,
+-109	,
+22	,
+143	,
+253	,
+351	,
+437	,
+511	,
+572	,
+621	,
+658	,
+684	,
+698	,
+701	,
+694	,
+678	,
+653	,
+620	,
+581	,
+535	,
+485	,
+430	,
+373	,
+314	,
+253	,
+192	,
+132	,
+73	,
+16	,
+-37	,
+-88	,
+-134	,
+-176	,
+-213	,
+-245	,
+-271	,
+-292	,
+-307	,
+-317	,
+-322	,
+-320	,
+-314	,
+-303};
--- attrafax-0.9/include/internal/modems/v27tertxrx.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/modems/v27tertxrx.h	2010-08-04 23:42:22.000000000 +0300
@@ -67,12 +67,12 @@
 	int symbol;
 	v27ter_sstate scr, dscr;
 	int cons_state;
-	complex fbuf[_V27TERCONST_FLEN];
+	complexi fbuf[_V27TERCONST_FLEN];
 	int p;
 	float gain, Ki, Kp;
 	eq_state eq;
 	putbit_f putbit;
-	complex tn0, tn1, tn2;
+	complexi tn0, tn1, tn2;
 	int sample;
 	float ang[_V27TERCONST_ALEN];
 	int step, integrator;
@@ -82,7 +82,7 @@
 	int carrier_wait;
 	meter m, m_gain;
 	float level_on, level_off;
-	float err, erri;
+	int err, erri;
 } v27terrx_state;
 
 int v27terrx(v27terrx_state *, const signed short *, int);
--- attrafax-0.9/include/internal/modems/v29txrx.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/modems/v29txrx.h	2010-08-04 23:42:22.000000000 +0300
@@ -67,13 +67,13 @@
 	int symbol;
 	v29_sstate dscr, rnd;
 	int cons_state;
-	const complex *AB, *CD;
-	complex fbuf[_V29CONST_FLEN];
+	const complexi *AB, *CD;
+	complexi fbuf[_V29CONST_FLEN]; //values scaled 1000 times
 	int p;
 	float gain, Ki, Kp;
 	eq_state eq;
 	putbit_f putbit;
-	complex tn0, tn1, tn2;
+	complexi tn0, tn1, tn2; //Penev it was complex, values scaled 1000 times
 	int sample;
 	float ang[_V29CONST_ALEN];
 	int step, integrator;
@@ -83,7 +83,7 @@
 	int carrier_wait;
 	meter m, m_gain;
 	float level_on, level_off;
-	float err, erri;
+	int err, erri; //Penev scaled 1000
 } v29rx_state;
 
 int v29rx(v29rx_state *, const signed short *, int);
--- attrafax-0.9/README	2010-01-29 16:12:33.000000000 +0200
+++ attrafax-0.9/README	2010-08-04 23:42:22.000000000 +0300
@@ -51,4 +51,7 @@
 	We currently provide only paid support for this, at t38-support@zoiper.com.
 
 
-
+6) Fixed point.
+	Modems inside Attrafax have been fixed point optimized so run much faster on a
+	fixed point CPUs. For problems related with the fixed point patch please 
+	contact Dimitar Penev at dpn@switchfin.org
--- attrafax-0.9/src/common/dds.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/common/dds.c	2010-08-04 23:42:22.000000000 +0300
@@ -26,8 +26,8 @@
 
 #include "internal/common/dds.h"
 
-static float sint[TLEN];
-static float cost[TLEN];
+static int sint[TLEN];
+static int cost[TLEN];
 static int table_init = 0;
 
 void create_tables(void) {
@@ -35,25 +35,25 @@
 
 	if (table_init) return;
 	for (j = 0, table_init = 1; j<TLEN; j++) {
-		sint[j] = sinf(2.0f * M_PI * (float)j / (float)TLEN);
-		cost[j] = cosf(2.0f * M_PI * (float)j / (float)TLEN);
+		sint[j] = (int)(1000.0*sinf(2.0f * M_PI * (float)j / (float)TLEN));
+		cost[j] = (int)(1000.0*cosf(2.0f * M_PI * (float)j / (float)TLEN));
 	}
 	return;
 }
 
-complex csynth(int prate) {
-	complex r;
+complexi csynth(int prate) {
+	complexi r;
 
 	Re(r) = cost[prate & (TLEN-1)];
 	Im(r) = sint[prate & (TLEN-1)];
 	return r;
 }
 
-float rsynthcos(int prate) {
+int rsynthcos(int prate) {
 	return cost[prate & (TLEN-1)];
 }
 
-float rsynthsin(int prate) {
+int rsynthsin(int prate) {
 	return sint[prate & (TLEN-1)];
 }
 
--- attrafax-0.9/src/common/eq.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/common/eq.c	2010-08-04 23:42:22.000000000 +0300
@@ -18,6 +18,10 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic. 
+ * The equilizer is much faster on the CPU without floating point support now. 
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
@@ -37,49 +41,47 @@
 	state->np = (np < EQ_NP_MAX) ? np : EQ_NP_MAX;
 	state->size = (size < EQ_SIZE_MAX) ? size : EQ_SIZE_MAX;
 	for (i = 0; i < EQ_SIZE_MAX; i++)
-		state->c[i] = state->in[i] = _C0;
-	Re(state->c[state->np]) = 1.0f;
+		state->c[i] = state->in[i] = _C0i;
+	Re(state->c[state->np]) = 131072; 			//FxP state->c is 2^17 scaled 
 	return;
 }
 
-void eq_insert(eq_state *state, complex z) {
+void eq_insert(eq_state *state, complexi z) {
+//FxP z is 2^10 scaled
+
 	state->in[state->next++] = z;
 	if (state->next >= state->size) state->next = 0;
 	return;
 }
 
-complex eq_get(eq_state *state) {
-	complex t0 = _C0, t1;
+complexi eq_get(eq_state *state) {
+	complexi t0 = _C0i, t1;
 	int i;
 
 	for (i = 0; i < 2 * state->np + 1; i++) {
 		mul3(t1, state->c[i], state->in[(state->next+i) & (state->size - 1)]);
 		add2(t0, t1);
 	}
-	return t0;
+	scale_pow2r(t0,17);					//FxP descale
+	return t0; 						//result is 2^10 scaled
 }
 
-void eq_update(eq_state *state, complex z) {
+void eq_update(eq_state *state, complexi z) {
+//FxP z is 2^10 scaled	
 	int i;
-	complex t0, t1, t2;
+	complexi t0, t1, t2;
 
-	scale2(t0, z, (state->d / (2 * state->np + 1)));
+	scale2(t0, z, 16.0f*(state->d / (2 * state->np + 1))); 	//FxP state->d is small, scale by 16 
+							       	//to avoid lost of resolution
 	for (i = 0; i < 2 * state->np + 1; i++) {
 		con2(t1, state->in[(state->next + i) & (state->size - 1)]);
 		mul3(t2, t0, t1);
+		scale_pow2r(t2, 7);				//FxP descale so we get state->c proper level
 		add2(state->c[i], t2);
 	}
 	return;
 }
 
-void eq_corr(eq_state *state, complex z) {
-	int i;
-
-	for (i = 0; i < EQ_SIZE_MAX; i++)
-		mul2(state->in[i], z);
-	return;
-}
-
 void eq_setd(eq_state *state, float d) {
 	state->d = d;
 	return;
--- attrafax-0.9/src/common/img.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/common/img.c	2010-08-04 23:42:22.000000000 +0300
@@ -78,7 +78,7 @@
 	ldata d;
 	
 	while (lget(root, &d))
-		free_img_chunk((img_chunk **) &d.dp);
+		free_img_chunk((img_chunk **) &(d.dp));
 	linit(root);
 	return;
 }
--- attrafax-0.9/src/faxing/ced.c	2010-02-10 16:05:26.000000000 +0200
+++ attrafax-0.9/src/faxing/ced.c	2010-08-04 23:42:22.000000000 +0300
@@ -56,7 +56,7 @@
 			s[j] = 0;
 			state->pre--;
 		} else if (state->samples_left) {
-			s[j] = (signed short) (rsynthcos(state->pacc)*10000.0f);
+			s[j] = (signed short) (rsynthcos(state->pacc)*10000.0/1024.0); //FxP rsynthcos scales 2^10
 			state->pacc += state->ph;
 			state->samples_left--;
 		} else if (state->post) {
--- attrafax-0.9/src/faxing/cng.c	2010-02-10 16:05:26.000000000 +0200
+++ attrafax-0.9/src/faxing/cng.c	2010-08-04 23:42:22.000000000 +0300
@@ -51,7 +51,7 @@
 		if (state->silence) {
 			s[j] = 0;
 		} else {
-			s[j] = (signed short) (rsynthcos(state->pacc)*10000.0f);
+			s[j] = (signed short) (rsynthcos(state->pacc)*10000.0/1024.0); //FxP rsynthcos scales 2^10
 			state->pacc += state->ph;
 		}
 		state->samples_left--;
--- attrafax-0.9/src/faxing/hdlc.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/faxing/hdlc.c	2010-08-04 23:42:22.000000000 +0300
@@ -86,6 +86,7 @@
 	unsigned short crc;
 	int j;
 
+	printf("inside hdlc_frame\n");
 	if (blen < (len+4)) return 0;
 	buf[0] = HDLC_ADDR;
 	buf[1] = HDLC_CTRL(final);
@@ -99,7 +100,8 @@
 
 int hdlc_deframe(int *final, unsigned char *data, int len,
 		unsigned char *buf, int blen) {
-
+	
+	printf("inside hdlc_deframe\n");
 	if (len < 5) return 0;
 	if (blen < (len-4)) return 0;
 	if (data[0] != HDLC_ADDR) return 0;
@@ -114,7 +116,8 @@
 
 int hdlc_deframe_cp_bad(int *final, unsigned char *data, int len,
 		unsigned char *buf, int blen) {
-
+	
+	printf("inside hdlc_deframe_cp_bad\n");
 	if (len < 5) return 0;
 	if (blen < (len-4)) return 0;
 	if (data[0] != HDLC_ADDR) return 0;
@@ -126,8 +129,9 @@
 		return len-4;
 	} else return -len+4;
 }
-
-void hdlc_tx_init(hdlc_tx_state *state, int prlen, unsigned short *buf, int len) {
+void hdlc_tx_init1(hdlc_tx_state *state, int prlen, unsigned short *buf, int len) {
+	
+	printf("inside hdlc_tx_init1\n");
 	bzero(state, sizeof (hdlc_tx_state));
 	state->cmdbuf = buf;
 	state->cmdlen = len;
@@ -192,6 +196,8 @@
 }
 
 void hdlc_dyntx_init(hdlc_tx_state *state, int prlen, unsigned short *buf, int *len) {
+	
+	printf("inside hdlc_dyntx_init\n");
 	bzero(state, sizeof (hdlc_tx_state));
 	state->cmdbuf = buf;
 	state->dynlen = len;
@@ -266,8 +272,10 @@
 	return;
 }
 
-void hdlc_rx_init(hdlc_rx_state *state, int ptres, int ftres, unsigned char *buf, int len,
+void hdlc_rx_init1(hdlc_rx_state *state, int ptres, int ftres, unsigned char *buf, int len,
 		void *context, hdlc_rx_handler_f handler) {
+	
+	printf("inside hdlc_rx_init1\n");
 	bzero(state, sizeof (hdlc_rx_state));
 	state->cmdbuf = buf;
 	state->cmdlen = len;
--- attrafax-0.9/src/faxing/t30rx.c	2010-02-10 16:05:26.000000000 +0200
+++ attrafax-0.9/src/faxing/t30rx.c	2010-08-04 23:42:22.000000000 +0300
@@ -61,6 +61,7 @@
 
 #define NAMEBUF (PATH_MAX + NAME_MAX + 1)
 
+
 static modem_info modems[] = {
 	{ MODEM_V17_14400_LONG, MODEM_V17_14400_SHORT, DIS_V17, DCS_V17_14400, 14400, 0 },
 	{ MODEM_V17_12000_LONG, MODEM_V17_12000_SHORT, DIS_V17, DCS_V17_12000, 12000, 0 },
@@ -77,7 +78,7 @@
 /*
 	0	0x01	00000001	HDLC_DIS command
 	1	0x00	00000000
-	2	0x73	01110011 10 11 12 15 16 OR
+	2	0x73	01110011 10 11 12 15 16 OR (penev 0x43 for v27 2400)
 	2	0x77	01110111 10 11 12 14 15 16 in case of T.38 mode
 	3	0x5f	01011111 18 20 21 22 23 24
 	4	0x01	00000001 32
@@ -105,7 +106,7 @@
 	actlog(state->log, "init_rxpreamble\n");
 	modem_rx_init(&state->rxtxcmd, MODEM_V21, &hdlc_rx, 1);
 	modem_rx_context(&state->rxtxcmd, &state->rxctrl);
-	hdlc_rx_init(&state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
+	hdlc_rx_init1(&state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
 			state->cmdbuf, MAXCMD, state, &process_frame);
 	state->got_hdlc = 0;
 	return;
@@ -116,7 +117,7 @@
 	modem_tx_init(&state->rxtxcmd, MODEM_V21, &hdlc_tx, 0);
 	modem_tx_context(&state->rxtxcmd, &state->txctrl);
 /* 40 flags in the preamble, ~1s @ 300bps */
-	hdlc_tx_init(&state->txctrl, 40, state->txcmdbuf, state->txcmdp);
+	hdlc_tx_init1(&state->txctrl, 40, state->txcmdbuf, state->txcmdp);
 	return;
 }
 
--- attrafax-0.9/src/faxing/t30tx.c	2010-02-10 16:05:26.000000000 +0200
+++ attrafax-0.9/src/faxing/t30tx.c	2010-08-04 23:42:22.000000000 +0300
@@ -75,7 +75,7 @@
 	actlog(state->log, "init_rxpreamble\n");
 	modem_rx_init(&state->rxtxcmd, MODEM_V21, &hdlc_rx, 1);
 	modem_rx_context(&state->rxtxcmd, &state->rxctrl);
-	hdlc_rx_init(&state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
+	hdlc_rx_init1(&state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
 			state->cmdbuf, MAXCMD, state, &process_frame);
 	state->got_hdlc = 0;
 	return;
@@ -86,7 +86,7 @@
 	modem_tx_init(&state->rxtxcmd, MODEM_V21, &hdlc_tx, 0);
 	modem_tx_context(&state->rxtxcmd, &state->txctrl);
 /* 40 flags in the preamble, ~1s @ 300bps */
-	hdlc_tx_init(&state->txctrl, 40, state->txcmdbuf, state->txcmdp);
+	hdlc_tx_init1(&state->txctrl, 40, state->txcmdbuf, state->txcmdp);
 	if (state->sysmode != T30_T30) state->clear = 0;
 	return;
 }
@@ -398,7 +398,7 @@
 				return;
 			}
 			get_block(&state->ecm, &block, &bp);
-			hdlc_tx_init(&state->ecmtx, 128, block, *bp);
+			hdlc_tx_init1(&state->ecmtx, 128, block, *bp);
 			init_txdoc_ecm(state);
 			state->txstate = T30_TX_DOC;
 			state->rxstate = T30_RX_IDLE;
@@ -447,7 +447,7 @@
 		return;
 	}
 	get_block(&state->ecm, &block, &bp);
-	hdlc_tx_init(&state->ecmtx, 128, block, *bp);
+	hdlc_tx_init1(&state->ecmtx, 128, block, *bp);
 	init_txdoc_ecm(state);
 	state->txstate = T30_TX_DOC;
 	state->rxstate = T30_RX_IDLE;
@@ -523,7 +523,7 @@
 				return 1;
 			}
 			get_block(&state->ecm, &block, &bp);
-			hdlc_tx_init(&state->ecmtx, 128, block, *bp);
+			hdlc_tx_init1(&state->ecmtx, 128, block, *bp);
 		}
 		init_txpreamble(state);
 		state->txstate = T30_TX_CTRL;
@@ -537,7 +537,7 @@
 			return 1;
 		}
 		get_block(&state->ecm, &block, &bp);
-		hdlc_tx_init(&state->ecmtx, 128, block, *bp);
+		hdlc_tx_init1(&state->ecmtx, 128, block, *bp);
 		init_txdoc_ecm(state);
 		state->txstate = T30_TX_DOC;
 		state->rxstate = T30_RX_IDLE;
--- attrafax-0.9/src/faxing/t38_gate.c	2010-02-10 16:05:26.000000000 +0200
+++ attrafax-0.9/src/faxing/t38_gate.c	2010-08-04 23:42:22.000000000 +0300
@@ -580,7 +580,7 @@
 	actlog(state->log, "init_rxpreamble\n");
 	modem_rx_init(&state->rxtxcmd, MODEM_V21, &hdlc_rx, 1);
 	modem_rx_context(&state->rxtxcmd, &state->rxctrl);
-	hdlc_rx_init(&state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
+	hdlc_rx_init1(&state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
 			state->cmdbuf, MAXCMD, state, &process_frame);
 	hdlc_rx_set_octen_handler(&state->rxctrl, &octet_handler);
 	state->skip_frame = state->dis_detected = 0;
@@ -978,7 +978,7 @@
 			}
 /* we don't care about the prev. state anymore => initialise everything just to be on the safe side */
 			state->v21_preamble = 0;
-			state->hdlc_rx_init = state->hdlc_tx_init = 0;
+			state->hdlc_rx_init = state->hdlc_tx_init1 = 0;
 			state->modem_indicator = -1;
 			state->doc_rx_init = state->doc_tx_init = state->tcf_rx_init = state->tcf_tx_init = 0;
 		}
@@ -995,7 +995,7 @@
 			switch_state(state);
 /* we don't care about the prev. state anymore => initialise everything just to be on the safe side */
 			state->v21_preamble = 0;
-			state->hdlc_rx_init = state->hdlc_tx_init = 0;
+			state->hdlc_rx_init = state->hdlc_tx_init1 = 0;
 			state->modem_indicator = -1;
 			state->doc_rx_init = state->doc_tx_init = state->tcf_rx_init = state->tcf_tx_init = 0;
 		}
@@ -1116,7 +1116,7 @@
 				actlog(state->log, "command received\n");
 				switch_state(state);
 			} else {
-				hdlc_rx_init(&state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
+				hdlc_rx_init1(&state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
 						state->cmdbuf, MAXCMD, state, &process_frame);
 				hdlc_rx_set_octen_handler(&state->rxctrl, &octet_handler);
 				state->skip_frame = state->dis_detected = 0;
@@ -1126,22 +1126,22 @@
 	case T38_GATE_TX_HDLC: /* transmit HDLC/V.21 to the PSTN line */
 		if (!state->v21_preamble) break; /* don't start anything unless a preamble is recv'ed */
 		if (check_timer(state->timer, &state->preamble_timer)) break; /* timer has not expired or has not been scheduled yet*/
-		if (!state->hdlc_tx_init) { /* initialise the transmitter */
+		if (!state->hdlc_tx_init1) { /* initialise the transmitter */
 			init_txpreamble(state);
-			state->hdlc_tx_init = 1;
+			state->hdlc_tx_init1 = 1;
 			actlog(state->log, "V.21 modem initialised for command transmission at %d\n", state->timer);
 			if (state->samples) fprintf(state->samples, "out_del_begin 65536\n");
 		}
 		if (state->ctrl_end) hdlc_dyntx_end(&state->txctrl);
 		if (state->ctrl_end && (!state->ctrl_ready)) { /* this is wrong. wait for the remote end to retransmit */
 			actlog(state->log, "T.38 HDLC error\n");
-			state->v21_preamble = state->hdlc_tx_init = 0;
+			state->v21_preamble = state->hdlc_tx_init1 = 0;
 			break;
 		}
 		if ((l0 = modem_tx(&state->rxtxcmd, out, inlen)) < inlen) { /* command transmitted */
 			actlog(state->log, "command transmission end at %d\n", state->timer);
 			if (state->samples) fprintf(state->samples, "out_del_end 65536\n");
-			state->v21_preamble = state->hdlc_tx_init = 0;
+			state->v21_preamble = state->hdlc_tx_init1 = 0;
 			cancel_timer(&state->preamble_timer);
 			if (state->dcn) {
 				set_next_state(state, T38_GATE_STATE_NULL);
--- attrafax-0.9/src/faxing/t38_iaf.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/faxing/t38_iaf.c	2010-08-04 23:42:22.000000000 +0300
@@ -73,7 +73,7 @@
 	state->v21_preamble = 0;
 	state->from_fcs = 1;
 	state->ifp = (t38_ifp *) ifp;
-	state->hdlc_rx_init = state->hdlc_tx_init = 0;
+	state->hdlc_rx_init = state->hdlc_tx_init1 = 0;
 	state->img_init = 0;
 	linit(&state->img);
 	
--- attrafax-0.9/src/faxing/t38_modem.c	2010-02-10 16:05:26.000000000 +0200
+++ attrafax-0.9/src/faxing/t38_modem.c	2010-08-04 23:42:22.000000000 +0300
@@ -93,7 +93,7 @@
 void t38_modem_rx_reset(modem_t *state) {
 	t38_iaf *t38state = (t38_iaf *) state->t38context;
 
-	t38state->hdlc_tx_init = 0;
+	t38state->hdlc_tx_init1 = 0;
 	return;
 }
 
@@ -201,7 +201,7 @@
 	if (state->modem_mode == MODEM_V21) { /* hdlc transmission */
 		if (!t38state->hdlc_rx_init) {
 			actlog(t38state->log, "t38_modem: t38_modem_tx: HDLC data tx\n");
-			hdlc_rx_init(&t38state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
+			hdlc_rx_init1(&t38state->rxctrl, HDLC_FRAME_BEGIN_THRESHOLD, HDLC_FLAGS_TRESHOLD,
 					t38state->cmdbuf, MAXCMD, state, &process_frame);
 			hdlc_rx_set_octen_handler(&t38state->rxctrl, &octet_handler);
 			t38state->hdlc_rx_init = 1;
@@ -313,10 +313,10 @@
 		}
 		if (!t38state->ctrl_ready) return len;
 		if (t38state->ctrl_end) {
-			if (!t38state->hdlc_tx_init) {
+			if (!t38state->hdlc_tx_init1) {
 /* 40 flags in the preamble, ~1s @ 300bps */
-				hdlc_tx_init(&t38state->txctrl, 40, t38state->txcmdbuf, t38state->txcmdp);
-				t38state->hdlc_tx_init = 1;
+				hdlc_tx_init1(&t38state->txctrl, 40, t38state->txcmdbuf, t38state->txcmdp);
+				t38state->hdlc_tx_init1 = 1;
 			}
 			do {
 				bit = hdlc_tx(&t38state->txctrl);
@@ -324,7 +324,7 @@
 			} while (bit >= 0);
 			t38state->ctrl_end = 0;
 			t38state->ctrl_ready = 0;
-			t38state->hdlc_tx_init = 0;
+			t38state->hdlc_tx_init1 = 0;
 			t38state->v21_preamble = 0;
 			for (t38state->txcmdp = 2, j = 0; j<MAXCMD; j++)
 				t38state->txcmdbuf[j] = HDLC_FLAG;
--- attrafax-0.9/src/modems/v17rx.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v17rx.c	2010-08-04 23:42:22.000000000 +0300
@@ -18,6 +18,11 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
+ *
  */
 
 
@@ -43,6 +48,8 @@
 #include "internal/modems/v17constellation.h"
 #include "internal/modems/v17trellis.h"
 
+#define MAX_INT		2147483647
+
 #define LEVEL_off	-48.0f
 #define LEVEL_on	-43.0f
 
@@ -50,9 +57,10 @@
 #define CONVG_BRI	1
 #define CONVG_ONES	2
 
-static const float convg[2][3] = { /* [state->long_train][CONVG_*] */
-	{ 280.0f, 15.0f, 15.0f }, /* CDBA, BRI, ONES */
-	{ 280.0f, NAN, 15.0f } /* CDBA, invalid, ONES */
+//FxP: scaled 2^10 as the state->err is also scaled
+static const int convg[2][3] = { /* [state->long_train][CONVG_*] */
+	{ 280*1024, 15*1024, 15*1024 }, /* CDBA, BRI, ONES */
+	{ 280*1024, -1, 15*1024 } /* CDBA, invalid, ONES */
 };
 
 static const int distmap_14400[128][8] = {
@@ -317,8 +325,9 @@
 	} \
 } while (0)
 
-static const complex CDBA_seq[4] = {
-	mkz(6.0f, 2.0f), mkz(-2.0f, 6.0f), mkz(2.0f, -6.0f), mkz(-6.0f, -2.0f)
+//FxP: symbols scaled 2^10
+static const complexi CDBA_seq[4] = {
+	mkz(6*1024, 2*1024), mkz(-2*1024, 6*1024), mkz(2*1024, -6*1024), mkz(-6*1024, -2*1024)
 };
 
 static const int diffd[16][2] = {
@@ -335,19 +344,19 @@
 	{ 2, 0, 3, 1 }
 };
 
-static const complex rlattice = mkz(1.0f, 1.0f);
+static const complexi rlattice = mkz(1024, 1024); //FxP: symbols scaled 2^10
 
 #include "internal/modems/v17v29rxfilter.h"
 
-static int ab0(void *_state, complex z0);
-static int ab1(void *_state, complex z0);
-static int ab2(void *_state, complex z0);
-static int cdba(void *_state, complex z0);
-static int bri(void *_state, complex z0);
-static int data(void *_state, complex z0);
+static int ab0(void *_state, complexi z0);
+static int ab1(void *_state, complexi z0);
+static int ab2(void *_state, complexi z0);
+static int cdba(void *_state, complexi z0);
+static int bri(void *_state, complexi z0);
+static int data(void *_state, complexi z0);
 
-static float fb[L][N];
-static float gain[L];
+static int fb[L][N];
+static int gain[L];
 static int fb_init = 0;
 
 static void mkfilterbank(void) {
@@ -357,10 +366,11 @@
 		for (i=0; i<N; i++)
 			for (j=0; j<L; j++)
 				fb[j][N-i-1] = f[L*i+j]; /* prepare the j-th filter for convolution */
+							//FxP matching filter is percomputed scaled	
 		for (i=0; i<L; i++) {
 			gain[i] = 0.0f;
-			for (j=0; j<N; j++)
-				gain[i] += fb[i][j];
+			for (j=0; j<N; j++)		//FxP: all gains ~47988. We can precampute it but	
+				gain[i] += fb[i][j];	//the addition is fast so keep it
 		}
 		fb_init = 1;
 	}
@@ -392,27 +402,32 @@
 	return (bit + b0) & 1;
 }
 
-static void track(v17rx_state *state, complex cp, complex z) {
+static void track(v17rx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
+	float err;
 	con(cp); mul2(cp, z);
-	Re(z) = Arg(cp); /* err */
-	state->pacc -= (int)(Re(z)*state->Kp);
-	state->ph -= (int)(Re(z)*state->Ki);
+	err = Arg(cp); /* err */
+	state->pacc -= (int)(err*state->Kp);
+	state->ph -= (int)(err*state->Ki);
 	return;
 }
 
-static void tune(v17rx_state *state, complex cp, complex z) {
+static void tune(v17rx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
+
 	sub2(cp, z);
-	if (state->ones || (state->stage != &data)) state->err = mag(cp);
+	if (state->ones || (state->stage != &data)) state->err = mag(cp); //FxP state->err 2^10 scaled 
 	eq_update(&state->eq, cp);
 	return;
 }
 
-static void update(v17rx_state *state, complex cp, complex z) {
+static void update(v17rx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
 	float err;
-	complex t0;
+	complexi t0;
 	
 	sub3(t0, cp, z);
-	if (mag(t0) < 0.5f) {
+	if (magsq(t0) < 0.5*0.5*1024*1024) {	//FxP 2^10 scaled
 		track(state, cp, z);
 		tune(state, cp, z);
 		err = (float)_V17CONST_SPS*state->ph/TLEN - (float)_V17CONST_CF;
@@ -422,14 +437,15 @@
 	return;
 }
 
-static int nearestbri(complex z) {
-	complex t0;
-	float len = HUGE_VALF, t;
+static int nearestbri(complexi z) {
+//FxP: z scaled 2^10
+	complexi t0;
+	float len = MAX_INT, t;
 	int j, idx=0;
 
 	for (j=0; j<4; j++) {
 		sub3(t0, CDBA_seq[j], z);
-		t = mag(t0);
+		t = magsq(t0);
 		if (t < len) {
 			len = t;
 			idx = j;
@@ -474,15 +490,17 @@
 #define SEGEND1	32
 #define SEGEND2	48
 
-static int ab0(void *_state, complex z0) {
+static int ab0(void *_state, complexi z0) {
+//FxP: z0 scaled 2^10
 	v17rx_state *state = (v17rx_state *)_state;
 		
-	if (mag(z0) < 1.0f) return 0;
+	if (magsq(z0) < 1024*1024) return 0; //FxP scaled 2^10
 	state->stage = &ab1;
 	return 0;
 }
 
-static int ab1(void *_state, complex z0) {
+static int ab1(void *_state, complexi z0) {
+//FxP: z0 scaled 2^10
 	v17rx_state *state = (v17rx_state *)_state;
 	
 	if (++state->symbol == 150) {
@@ -493,10 +511,11 @@
 	return 0;
 }
 
-static int ab2(void *_state, complex z0) {
+static int ab2(void *_state, complexi z0) {
+//FxP: z0 scaled 2^10
 	v17rx_state *state = (v17rx_state *)_state;
 	float angle, alpha;
-	complex phasor, z;
+	complexi phasor, z;
 	int bit;
 	
 	con2(z, z0);
@@ -530,24 +549,26 @@
 		state->pacc += (int)getunit(angle);
 		state->step = 128;
 		state->symbol = 1;
-		state->err = state->erri = 0.0f;
+		state->err = state->erri = 0;
 		state->stage = &cdba;
 	} else state->symbol++;
 	return 0;
 }
 
-static int cdba(void *_state, complex z0) {
+static int cdba(void *_state, complexi z0) {
+//FxP: z0 scaled 2^10
 	v17rx_state *state = (v17rx_state *)_state;
-	float angle;
-	complex z, consym;
+	complexi consym;
 	int bit;
 
-	con2(z, z0);
-	
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
-	
 #ifdef _DEBUG_
+        float angle;
+	complex z;
+
+	con2(z, z0);
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
 	printf("CDBA\t%f\t%f %f\t%f\n", angle, Re(z0), Im(z0), mag(z0));
 #endif
 	bit = scramble(&state->scr, 1) << 1;
@@ -571,23 +592,25 @@
 		if (state->long_train) state->stage = &bri;
 		else state->stage = &data;
 		printf("ERRI %f\n", state->erri);
-		state->err = state->erri = 0.0f;
+		state->err = state->erri = 0;
 	}
 	return 0;
 }
 
-static int bri(void *_state, complex z0) {
+static int bri(void *_state, complexi z0) {
+//FxP: z0 scaled 2^10
 	v17rx_state *state = (v17rx_state *)_state;
-	float angle;
-	complex z, consym;
+	complexi z, consym;
 	int bit, t;
 
+#ifdef _DEBUG_
+        float angle;
+
 	con2(z, z0);
-	
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 
-#ifdef _DEBUG_
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
 	printf("BRI\t%f\t%f %f\t%f\n", angle, Re(z0), Im(z0), mag(z0));
 #endif
 	if ((t = nearestbri(z)) < 0) return t;
@@ -620,23 +643,24 @@
 		state->gain_save = state->gain;
 		bcopy(&state->eq, &state->eq_save, sizeof (state->eq));
 		printf("ERRI %f\n", state->erri);
-		state->err = state->erri = 0.0f;
+		state->err = state->erri = 0;
 	}
 	return 0;
 }
 
-static int data(void *_state, complex z0) {
+static int data(void *_state, complexi z0) {
+//FxP: z0 scaled 2^10
 	v17rx_state *state = (v17rx_state *)_state;
-	float angle;
-	complex t0, z, consym;
+	complexi t0, z, consym;
 	int bit, t, q1, q2;
 
 	con2(z, z0);
 	
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
-	
 #ifdef _DEBUG_
+	float angle;
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
 	printf("OR\t%f\t%f %f\t%f\n", angle, Re(z0), Im(z0), mag(z0));
 #endif
 	if ((state->rate == 14400) || (state->rate == 9600)) {
@@ -680,7 +704,7 @@
 			state->step = 16;
 			state->ones = 0;
 			printf("ERRI %f\n", state->erri);
-			state->err = state->erri = 0.0f;
+			state->err = state->erri = 0;
 		}
 	} else {
 		diff_dec(&state->diff, bit&1, !!(bit&2), &q1, &q2);
@@ -691,26 +715,32 @@
 	return 0;
 }
 
-static void cput(v17rx_state *state, complex z) {
+static void cput(v17rx_state *state, complexi z) {
+//FxP: z scaled 2^10
+
 	state->fbuf[state->p] = state->fbuf[state->p + N] = z;
 	state->p = (state->p + 1) % N;
 	return;
 }
 
-static complex cfir(v17rx_state *state, int sel) {
-	complex acc, t0;
+static complexi cfir(v17rx_state *state, int sel) {
+	complexi acc, t0;
 	int j;
 
-	for (j=0, acc=_C0; j<N; j++) {
+	for (j=0, acc=_C0i; j<N; j++) {
 		scale2(t0, state->fbuf[j+state->p], fb[sel][j]);
 		add2(acc, t0);
 	}
-	scale(acc, 1.0f/gain[sel]);
-	return acc;
+
+	scale(acc, 1.0f/gain[sel]); //FxP result seems to match the constelation points 2^10 scaled.
+	return acc;		    //gain[sel] ~ 47988. To speed up further we can assume single gain 
+				    //and adjust the filter level so gain become power of two
+
 }
 
-static int synchronise(v17rx_state *state, complex z) {
-	float g;
+static int synchronise(v17rx_state *state, complexi z) {
+//FxP: z scaled 2^10
+	int g;
 	int sel;
 
 	cput(state, z);
@@ -721,8 +751,8 @@
 	state->tn2 = state->tn1; state->tn1 = state->tn0;
 	eq_insert(&state->eq, (state->tn0 = cfir(state, sel)));
 	if ((++state->sample) & 1) return 0;
-	if ((g=gardner(state->tn0, state->tn1, state->tn2)) < 0.0f) state->integrator -= state->step;
-	else if (g > 0.0f) state->integrator += state->step;
+	if ((g=gardner(state->tn0, state->tn1, state->tn2)) < 0) state->integrator -= state->step;
+	else if (g > 0) state->integrator += state->step;
 	if ((state->integrator < -255) || (state->integrator > 255)) {
 		state->selector += (state->integrator/256);
 		state->integrator = 0;
@@ -733,7 +763,7 @@
 int v17rx(v17rx_state *state, const signed short *s, int len) {
 	int j, t1;
 	float power, power_gain;
-	complex t0;
+	complexi t0;
 	
 	if (state->stage == FAILURE) return -2;
 	for (j=0; j<len; j++) {
@@ -763,7 +793,7 @@
 				state->gain = 10.0f/sqrtf(power);
 		}
 		if (state->stage != PARK) {
-			t0 = csynth(state->pacc);
+			t0 = csynth(state->pacc); //FxP t0 is 2^10 scaled
 			state->pacc += state->ph;
 			scale(t0, s[j]*state->gain);
 			if ((t1 = synchronise(state, t0)) < 0) {
@@ -788,7 +818,7 @@
 	state->cons_state = 0;
 	state->sample = 0;
 	state->step = 512;
-	state->tn0 = state->tn1 = state->tn2 = _C0;
+	state->tn0 = state->tn1 = state->tn2 = _C0i;
 	state->diff.y2 = 0;
 	state->pacc = 0;
 	
@@ -810,7 +840,7 @@
 		state->stage = FAILURE;
 	}
 		
-	for (j=0; j<_V17CONST_FLEN; j++) state->fbuf[j] = _C0;
+	for (j=0; j<_V17CONST_FLEN; j++) state->fbuf[j] = _C0i;
 	for (j=0; j<_V17CONST_ALEN; j++) state->ang[j] = 0.0f;
 	state->p = 0;
 	
--- attrafax-0.9/src/modems/v17slicer.c	2010-02-10 16:05:26.000000000 +0200
+++ attrafax-0.9/src/modems/v17slicer.c	2010-08-04 23:42:22.000000000 +0300
@@ -1284,12 +1284,15 @@
 	return data;
 }
 
-int slicer(int rate, complex z) {
+int slicer(int rate, complexi z) {
+//FxP z 2^10 scaled
 	int i, j, data=0;
+	complex z_;
+	scale2_pow2r(z_, z,10); //FxP lets descale z for now. Can be optimized 
 
 /* slicerRATE[row][column] */
-	i = (int)rint((double)Re(z)); /* column */
-	j = (int)rint((double)Im(z)); /* row */
+	i = (int)rint((double)Re(z_)); /* column */
+	j = (int)rint((double)Im(z_)); /* row */
 	switch (rate) {
 	case 14400:
 		if (i < -12) i = -12;
@@ -1299,7 +1302,7 @@
 		i += 12;
 		j += 12;
 		if (slicer14400[j][i] < 0)
-			data = nearest(rate, slicer14400[j][i], z);
+			data = nearest(rate, slicer14400[j][i], z_);
 		else data = slicer14400[j][i];
 		break;
 	case 12000:
@@ -1310,7 +1313,7 @@
 		i += 8;
 		j += 8;
 		if (slicer12000[j][i] < 0)
-			data = nearest(rate, slicer12000[j][i], z);
+			data = nearest(rate, slicer12000[j][i], z_);
 		else data = slicer12000[j][i];
 		break;
 	case 9600:
@@ -1321,7 +1324,7 @@
 		i += 12;
 		j += 12;		
 		if (slicer9600[j][i] < 0)
-			data = nearest(rate, slicer9600[j][i], z);
+			data = nearest(rate, slicer9600[j][i], z_);
 		else data = slicer9600[j][i];
 		break;
 	case 7200:
@@ -1332,7 +1335,7 @@
 		i += 8;
 		j += 8;
 		if (slicer7200[j][i] < 0)
-			data = nearest(rate, slicer7200[j][i], z);
+			data = nearest(rate, slicer7200[j][i], z_);
 		else data = slicer7200[j][i];
 		break;
 	default:
--- attrafax-0.9/src/modems/v17tx.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v17tx.c	2010-08-04 23:42:22.000000000 +0300
@@ -18,7 +18,14 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
- */
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
+ *
+ * Note that V29 transmitter is kept floating point as it is already fast.
+ * Can be optimized later 
+*/
 
 
 
@@ -268,6 +275,7 @@
 int v17tx(v17tx_state *state, signed short *s, int len) {
 	int j, k;
 	complex t0, t1;
+	complexi t1_;
 
 	for (j=0; j<len; j++) {
 		if (state->end) goto eot;
@@ -279,7 +287,8 @@
 			cput(state, state->baud);
 			if (!k) t0 = cfir(state);
 		}
-		t1 = csynth(state->pacc);
+		t1_= csynth(state->pacc); //FxP we get t1_ 2^10 scaled. The transmitter we will 
+		scale2_pow2r(t1,t1_,10);  //keep floating as it is simple enought. //So lets descale	
 		con(t1);
 		state->pacc += state->ph;
 		s[j] = (signed short)(pseudosc(t0, t1) * state->gain);
--- attrafax-0.9/src/modems/v21rx.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v21rx.c	2010-08-04 23:42:22.000000000 +0300
@@ -37,20 +37,38 @@
 #define LEVEL_off	-48.0f
 #define LEVEL_on	-43.0f
 
-static complex f_space1[_V21CONST_FLEN]; 
-static complex f_mark1[_V21CONST_FLEN];
-static complex f_space2[_V21CONST_FLEN];
-static complex f_mark2[_V21CONST_FLEN];
+static complexi f_space1[_V21CONST_FLEN]; 
+static complexi f_mark1[_V21CONST_FLEN];
+static complexi f_space2[_V21CONST_FLEN];
+static complexi f_mark2[_V21CONST_FLEN];
 
 static int fb_init = 0;
 
-static void mkfilter(complex *dst, int len, int sps, int freq) {
+static inline unsigned int cycles(void) {
+  int ret;
+
+   __asm__ __volatile__
+   (
+   "%0 = CYCLES;\n\t"
+   : "=&d" (ret)
+   :
+   : "R1"
+   );
+
+   return ret;
+}
+
+
+static void mkfilter(complexi *dst, int len, int sps, int freq) {
+	complex temp;
 	float ph;
 	int j;
 	
 	for (j=0; j<len; j++) {
 		ph = 2.0f * (float)M_PI * (float) j * (float) freq / (float) sps;
-		expiphiR(dst[j], ph);
+		expiphiR(temp, ph);
+		scale(temp, 1024.0);
+		f2i(dst[j], temp);
 	}
 	return;
 }
@@ -75,7 +93,8 @@
 }
 
 int v21rx(v21rx_state *state, const signed short *s, int len) {
-	complex fs, t;
+	complex fs_;
+	complexi fs, t;
 	int i, j, k, bit, r;
 	float diff[2], power;
 
@@ -85,25 +104,26 @@
 		if (!state->carrier) {
 			if (power > state->level_on) {
 				state->carrier = 1;
-				fprintf(stderr, "CARRIER\n"); fflush(stderr);
+				fprintf(stderr, "V21: CARRIER\n"); fflush(stderr);
 			} else continue;
 		} else {
 			if (power < state->level_off) {
-				fprintf(stderr, "NO CARRIER\n"); fflush(stderr);
+				fprintf(stderr, "V21: NO CARRIER\n"); fflush(stderr);
 				v21rx_init(state, state->putbit, (state->filter[0] == f_space2));
 				r = 0;
 				break;
 			}
 		}
-
 		cput(state, s[j]);
 		for (k=0; k<2; k++) {
-			for (i=0, fs=_C0; i<_V21CONST_FLEN; i++) {
-				scale2(t, state->filter[k][i], (float) CSBUF(i));
+			for (i=0, fs=_C0i; i<_V21CONST_FLEN; i++) {
+				scale2(t, state->filter[k][i], CSBUF(i));
 				add2(fs, t);
 			}
-			diff[k] = magsq(fs);
+			i2f(fs_, fs);
+			diff[k] = magsq(fs_);
 		}
+
 		bit = ((diff[1] - diff[0]) >= 0.0f);
 		if (state->bit != bit) {
 			state->bit = bit;
--- attrafax-0.9/src/modems/v21tx.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v21tx.c	2010-08-04 23:42:22.000000000 +0300
@@ -40,7 +40,7 @@
 			if ((bit = (*(state->getbit))(state->context)) < 0)
 				goto eob;
 		}
-		s[j] = (signed short)(rsynthcos(state->pacc) * 10000.0f);
+		s[j] = (signed short)(rsynthcos(state->pacc) * 10); //Penev
 		state->pacc += state->fph[bit];
 	}
 	state->bit = bit;
--- attrafax-0.9/src/modems/v27terrx4800.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v27terrx4800.c	2010-08-04 23:42:22.000000000 +0300
@@ -18,6 +18,10 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
@@ -42,33 +46,36 @@
 #define LEVEL_off	-48.0f
 #define LEVEL_on	-43.0f
 
-#define CONVG_SCR	200.0f
-#define CONVG_ONES	50.0f
+#define CONVG_SCR	200*1024 //FxP: scaled 2^10 as the
+#define CONVG_ONES	50*1024  //state->err is also scaled
 
-static const complex constellation[8] = {
-	mkz(1.0f, 0.0f),
-	mkz((float)M_SQRT2/2.0f, (float)M_SQRT2/2.0f),
-	mkz(0.0f, 1.0f),
-	mkz(-(float)M_SQRT2/2.0f, (float)M_SQRT2/2.0f),
-	mkz(-1.0f, 0.0f),
-	mkz(-(float)M_SQRT2/2.0f, -(float)M_SQRT2/2.0f),
-	mkz(0.0f, -1.0f),
-	mkz((float)M_SQRT2/2.0f, -(float)M_SQRT2/2.0f)
+#define MAX_INT		2147483647
+
+//FxP constelation scaled 2^10
+static const complexi constellation[8] = {
+	mkz(1024, 0),
+	mkz((float)M_SQRT2/2.0f*1024, (float)M_SQRT2/2.0f*1024),
+	mkz(0, 1024),
+	mkz(-(float)M_SQRT2/2.0f*1024, (float)M_SQRT2/2.0f*1024),
+	mkz(-1024, 0),
+	mkz(-(float)M_SQRT2/2.0f*1024, -(float)M_SQRT2/2.0f*1024),
+	mkz(0, -1024),
+	mkz((float)M_SQRT2/2.0f*1024, -(float)M_SQRT2/2.0f*1024)
 };
 
 static const int revconsidx[8] = { 4, 5, 1, 3, 7, 6, 2, 0 };
 		
 #include "internal/modems/v27ter4800rxfilter.h"
 
-static int ph0(void *_state, complex z);
-static int ph1(void *_state, complex z);
-static int ph2(void *_state, complex z);
-static int scr(void *_state, complex z);
-static int ones(void *_state, complex z);
-static int running(void *_state, complex z);
+static int ph0(void *_state, complexi z);
+static int ph1(void *_state, complexi z);
+static int ph2(void *_state, complexi z);
+static int scr(void *_state, complexi z);
+static int ones(void *_state, complexi z);
+static int running(void *_state, complexi z);
 
-static float fb[L][N];
-static float gain[L];
+static int fb[L][N];
+static int gain[L];
 static int fb_init = 0;
 
 static void mkfilterbank(void) {
@@ -78,10 +85,12 @@
 		for (i=0; i<N; i++)
 			for (j=0; j<L; j++)
 				fb[j][N-i-1] = f[L*i+j]; /* prepare the j-th filter for convolution */
+							 //FxP matching filter is percomputed scaled
 		for (i=0; i<L; i++) {
-			gain[i] = 0.0f;
+			gain[i] = 0;
 			for (j=0; j<N; j++)
-				gain[i] += fb[i][j];
+				gain[i] += fb[i][j];	//FxP: all gains ~47988. We can precampute it but 
+							//the addition is fast so keep it 
 		}
 		fb_init = 1;
 	}
@@ -114,27 +123,33 @@
 	return t0 & 1;
 }
 
-static void track(v27terrx_state *state, complex cp, complex z) {
+static void track(v27terrx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
+	float err;
+
 	con(cp); mul2(cp, z);
-	Re(z) = Arg(cp); /* err */
-	state->pacc -= (int)(Re(z)*state->Kp);
-	state->ph -= (int)(Re(z)*state->Ki);
+	err = Arg(cp); /* err */
+	state->pacc -= (int)(err*state->Kp);
+	state->ph -= (int)(err*state->Ki);
 	return;
 }
 
-static void tune(v27terrx_state *state, complex cp, complex z) {
+static void tune(v27terrx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
+
 	sub2(cp, z);
-	if (state->stage != &running) state->err = mag(cp);
+	if (state->stage != &running) state->err = mag(cp); //FxP state->err 2^10 scaled
 	eq_update(&state->eq, cp);
 	return;
 }
 
-static void update(v27terrx_state *state, complex cp, complex z) {
+static void update(v27terrx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
 	float err;
-	complex t0;
+	complexi t0;
 	
 	sub3(t0, cp, z);
-	if (mag(t0) < 0.3f) {
+	if (magsq(t0) < 0.3*0.3*1024*1024) { //FxP 2^10 scaled
 		track(state, cp, z);
 		tune(state, cp, z);
 		err = (float)_V27TERCONST_SPS*state->ph/TLEN - (float)_V27TERCONST_CF;
@@ -144,9 +159,10 @@
 	return;
 }
 
-static int nearest(v27terrx_state *state, complex z) {
-	complex t0;
-	float len = HUGE_VALF, t;
+static int nearest(v27terrx_state *state, complexi z) {
+//FxP: z scaled 2^10
+	complexi t0;
+	float len = MAX_INT, t;
 	int j, idx=0;
 
 	for (j=0; j<8; j++) {
@@ -160,7 +176,8 @@
 	return idx;
 }
 
-static int putbits(v27terrx_state *state, complex z) {
+static int putbits(v27terrx_state *state, complexi z) {
+//FxP: z scaled 2^10
 	int j, tribit, d = 0;
 	
 	j = nearest(state, z);
@@ -185,30 +202,34 @@
 #define SEG4LEN		1074
 #define SEG5LEN		8
 
-static int ph0(void *_state, complex z) {
+static int ph0(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
-
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("P0\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("P0\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
-	if (mag(z) < 0.5f) return 0;
+	if (magsq(z) < 0.5*0.5*1024*1024) return 0; //FxP: z scaled 2^10
 	state->stage = &ph1;
 	return 0;
 }
 
-static int ph1(void *_state, complex z) {
+static int ph1(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
-
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("P1\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+       float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("P1\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	if (++state->symbol == 30) {
 		state->step = 32;
@@ -218,7 +239,8 @@
 	return 0;
 }
 
-static int ph2(void *_state, complex z) {
+static int ph2(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
 	float angle, alpha;
 
@@ -226,7 +248,7 @@
 	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("P2\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+	printf("P2\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	state->ang[(state->symbol) & (_V27TERCONST_ALEN-1)] = angle;
 	if (state->symbol < 3) {
@@ -244,21 +266,23 @@
 		state->symbol = 1;
 		state->step = 16;
 		state->stage = &scr;
-		state->err = state->erri = 0.0f;
+		state->err = state->erri = 0;
 	} else state->symbol++;
 	return 0;
 }
 
-static int scr(void *_state, complex z) {
+static int scr(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
 	int bit;
 
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
-	
 #ifdef _DEBUG_
-	printf("SC\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("SC\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	bit = scramble(&state->scr, 1)<<2;
 	(void)scramble(&state->scr, 1);
@@ -281,7 +305,7 @@
 			state->symbol = 0;
 			state->step = 8;
 			state->stage = &ones;
-			state->err = state->erri = 0.0f;
+			state->err = state->erri = 0;
 		} else {
 			state->stage = FAILURE;
 			return -2;
@@ -290,16 +314,18 @@
 	return 0;
 }
 
-static int ones(void *_state, complex z) {
+static int ones(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
 	int bit;
 
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
-	
 #ifdef _DEBUG_
-	printf("O\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("O\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	if ((bit = putbits(state, z)) < 0) {
 		state->stage = FAILURE;
@@ -322,39 +348,47 @@
 	return 0;
 }
 
-static int running(void *_state, complex z) {
+static int running(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
-
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("R\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("R\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	return putbits(state, z);
 }
 
-static void cput(v27terrx_state *state, complex z) {
+static void cput(v27terrx_state *state, complexi z) {
+//FxP: z scaled 2^10
+
 	state->fbuf[state->p] = state->fbuf[state->p + N] = z;
 	state->p = (state->p + 1) % N;
 	return;
 }
 
-static complex cfir(v27terrx_state *state, int sel) {
-	complex acc, t0;
+static complexi cfir(v27terrx_state *state, int sel) {
+//FxP: z scaled 2^10
+	complexi acc, t0;
 	int j;
 
-	for (j=0, acc=_C0; j<N; j++) {
+	for (j=0, acc=_C0i; j<N; j++) {
 		scale2(t0, state->fbuf[j+state->p], fb[sel][j]);
 		add2(acc, t0);
 	}
-	scale(acc, 1.0f/gain[sel]);
-	return acc;
+	scale(acc, 1.0f/gain[sel]); //FxP result seems to match the constelation points 2^10 scaled.
+	return acc;		    //gain[sel] ~ . To speed up further we can assume single gain 
+				    //and adjust the filter level so gain become power of two
+
 }
 
-static int synchronise(v27terrx_state *state, complex z) {
-	float g;
+static int synchronise(v27terrx_state *state, complexi z) {
+//FxP: z scaled 2^10
+	int g;
 	int sel;
 
 	cput(state, z);
@@ -377,7 +411,7 @@
 int v27terrx(v27terrx_state *state, const signed short *s, int len) {
 	int j, t1;
 	float power, power_gain;
-	complex t0;
+	complexi t0;
 	
 	if (state->stage == FAILURE) return -2;
 	for (j=0; j<len; j++) {
@@ -414,7 +448,7 @@
 				state->gain = 2.5f/sqrtf(power_gain);
 		}
 		if (state->stage != PARK) {
-			t0 = csynth(state->pacc);
+			t0 = csynth(state->pacc); //FxP t0 is 2^10 scaled
 			state->pacc += state->ph;
 			scale(t0, s[j]*state->gain);
 			if ((t1 = synchronise(state, t0)) < 0) {
@@ -446,14 +480,14 @@
 	state->integrator = 0;
 	state->step = 256;
 	state->selector = -_V27TERCONST_SEL4800;
-	state->tn0 = state->tn1 = state->tn2 = _C0;
+	state->tn0 = state->tn1 = state->tn2 = _C0i;
 	
 	meter_init(&state->m_gain, 0.02f);
 	meter_init(&state->m, 0.25f);
 	eq_init(&state->eq, 16, 7, 0.04f);
 	
-	for (j=0; j<_V27TERCONST_FLEN; j++) state->fbuf[j] = _C0;
-	for (j=0; j<_V27TERCONST_ALEN; j++) state->ang[j] = 0.0f;
+	for (j=0; j<_V27TERCONST_FLEN; j++) state->fbuf[j] = _C0i;
+	for (j=0; j<_V27TERCONST_ALEN; j++) state->ang[j] = 0;
 	state->p = 0;
 	
 	state->scr.sreg = state->dscr.sreg = 0x3cu;
--- attrafax-0.9/src/modems/v27tertx2400.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v27tertx2400.c	2010-08-04 23:42:22.000000000 +0300
@@ -18,7 +18,15 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
- */
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
+ *
+ * Note that V29 transmitter is kept floating point as it is already fast.
+ * Can be optimized later
+	 
+*/
 
 
 
@@ -186,6 +194,7 @@
 int v27tertx2400(v27tertx_state *state, signed short *s, int len) {
 	int j, k;
 	complex t0, t1;
+	complexi t1_;
 	
 	for (j=0; j<len; j++) {
 		if (state->end) goto eot;
@@ -197,7 +206,9 @@
 			cput(state, state->baud);
 			if (!k) t0 = cfir(state);
 		}
-		t1 = csynth(state->pacc);
+
+                t1_= csynth(state->pacc); //FxP we get t1_ 2^10 scaled. The transmitter we will
+                scale2_pow2r(t1,t1_,10);  //keep floating as it is simple enought. So lets descale
 		state->pacc += state->ph;
 		con(t1);
 		s[j] = (signed short)(pseudosc(t0, t1) * state->gain);
--- attrafax-0.9/src/modems/v27tertx4800.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v27tertx4800.c	2010-08-04 23:42:22.000000000 +0300
@@ -18,6 +18,13 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
+ *
+ * Note that V29 transmitter is kept floating point as it is already fast.
+ * Can be optimized later
  */
 
 
@@ -187,7 +194,7 @@
 int v27tertx(v27tertx_state *state, signed short *s, int len) {
 	int j;
 	complex t0, t1;
-	
+	complexi t1_;	
 	for (j=0; j<len; j++) {
 		if (state->end) goto eot;
 		if ((state->ploop += 1) >= 5) {
@@ -195,7 +202,8 @@
 			state->ploop -= 5;
 		}
 		t0 = cfilter(state, state->baud);
-		t1 = csynth(state->pacc);
+                t1_= csynth(state->pacc); //FxP we get t1_ 2^10 scaled. The transmitter we will
+                scale2_pow2r(t1,t1_,10);  //keep floating as it is simple enought. So lets descale
 		state->pacc += state->ph;
 		con(t1);
 		s[j] = (signed short)(pseudosc(t0, t1) * state->gain);
--- attrafax-0.9/src/modems/v29rx.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v29rx.c	2010-08-04 23:42:22.000000000 +0300
@@ -18,6 +18,10 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
@@ -42,71 +46,75 @@
 #define LEVEL_off	-31.0f
 #define LEVEL_on	-26.0f
 
-#define CONVG_CDCD	80.0f
-#define CONVG_ONES	25.0f
+#define CONVG_CDCD	80*1024 //FxP: scaled 2^10 as the 
+#define CONVG_ONES	25*1024 //state->err is also scaled
 
-static const complex constellation[16] = {
-	mkz(3.0f, 0.0f),
-	mkz(1.0f, -1.0f),
-	mkz(0.0f, -3.0f),
-	mkz(-1.0f, -1.0f),
-	mkz(-3.0f, 0.0f),
-	mkz(-1.0f, 1.0f),
-	mkz(0.0f, 3.0f),
-	mkz(1.0f, 1.0f),
-	mkz(5.0f, 0.0f),
-	mkz(3.0f, -3.0f),
-	mkz(0.0f, -5.0f),
-	mkz(-3.0f, -3.0f),
-	mkz(-5.0f, 0.0f),
-	mkz(-3.0f, 3.0f),
-	mkz(0.0f, 5.0f),
-	mkz(3.0f, 3.0f)
+#define MAX_INT		2147483647
+
+//FxP constelation scaled 2^10
+static const complexi constellation[16] = {
+	mkz(3*1024, 	0),
+	mkz(1024, 	-1024),
+	mkz(0, 		-3*1024),
+	mkz(-1024, 	-1024),
+	mkz(-3*1024, 	0),
+	mkz(-1024, 	1024),
+	mkz(0, 		3*1024),
+	mkz(1024, 	1024),
+	mkz(5*1024, 	0),
+	mkz(3*1024, 	-3*1024),
+	mkz(0, 		-5*1024),
+	mkz(-3*1024, 	-3*1024),
+	mkz(-5*1024, 	0),
+	mkz(-3*1024, 	3*1024),
+	mkz(0, 		5*1024),
+	mkz(3*1024, 	3*1024)
 };
 
 static const int revconsidx[8] = { 4, 0, 2, 6, 7, 3, 1, 5 };
 
+//FxP: symbols scaled 2^10
 /* A con(B) C con(D) @ 9600bps */
-static const complex AB9600[2] = {
-	mkz(-3.0f, 0.0f),
-	mkz(3.0f, 3.0f)
+static const complexi AB9600[2] = {
+	mkz(-3*1024, 0),
+	mkz(3*1024, 3*1024)
 };
-static const complex CD9600[2] = {
-	mkz(3.0f, 0.0f),
-	mkz(-3.0f, -3.0f)
+static const complexi CD9600[2] = {
+	mkz(3*1024, 0),
+	mkz(-3*1024, -3*1024)
 };
 
 /* A con(B) C con(D) @ 7200bps */
-static const complex AB7200[2] = {
-	mkz(-3.0f, 0.0f),
-	mkz(1.0f, 1.0f)
+static const complexi AB7200[2] = {
+	mkz(-3*1024, 0),
+	mkz(1024, 1024)
 };
-static const complex CD7200[2] = {
-	mkz(3.0f, 0.0f),
-	mkz(-1.0f, -1.0f)
+static const complexi CD7200[2] = {
+	mkz(3*1024, 0),
+	mkz(-1024, -1024)
 };
 
 /* A con(B) C con(D) @ 4800bps */
-static const complex AB4800[2] = {
-	mkz(-3.0f, 0.0f),
-	mkz(0.0f, 3.0f)
+static const complexi AB4800[2] = {
+	mkz(-3*1024, 0),
+	mkz(0, 3*1024)
 };
-static const complex CD4800[2] = {
-	mkz(3.0f, 0.0f),
-	mkz(0.0f, -3.0f)
+static const complexi CD4800[2] = {
+	mkz(3*1024, 0),
+	mkz(0, -3*1024)
 };
 
 #include "internal/modems/v17v29rxfilter.h"
 
-static int ab0(void *_state, complex z);
-static int ab1(void *_state, complex z);
-static int ab2(void *_state, complex z);
-static int cdcd(void *_state, complex z);
-static int ones(void *_state, complex z);
-static int running(void *_state, complex z);
+static int ab0(void *_state, complexi z);
+static int ab1(void *_state, complexi z);
+static int ab2(void *_state, complexi z);
+static int cdcd(void *_state, complexi z);
+static int ones(void *_state, complexi z);
+static int running(void *_state, complexi z);
 
-static float fb[L][N];
-static float gain[L];
+static int fb[L][N];
+static int gain[L];
 static int fb_init = 0;
 
 static void mkfilterbank(void) {
@@ -116,10 +124,12 @@
 		for (i=0; i<N; i++)
 			for (j=0; j<L; j++)
 				fb[j][N-i-1] = f[L*i+j]; /* prepare the j-th filter for convolution */
+							 //FxP matching filter is percomputed scaled
 		for (i=0; i<L; i++) {
-			gain[i] = 0.0f;
+			gain[i] = 0;
 			for (j=0; j<N; j++)
-				gain[i] += fb[i][j];
+				gain[i] += fb[i][j];	//FxP: all gains ~47988. We can precampute it but 
+							//the addition is fast so keep it 		 
 		}
 		fb_init = 1;
 	}
@@ -142,27 +152,34 @@
 	return b0;
 }
 
-static void track(v29rx_state *state, complex cp, complex z) {
+static void track(v29rx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
+	float err;
+		
 	con(cp); mul2(cp, z);
-	Re(z) = Arg(cp); /* err */
-	state->pacc -= (int)(Re(z)*state->Kp);
-	state->ph -= (int)(Re(z)*state->Ki);
+	err = Arg(cp); /* err */
+	state->pacc -= (int)(err*state->Kp);
+	state->ph -= (int)(err*state->Ki);
 	return;
 }
 
-static void tune(v29rx_state *state, complex cp, complex z) {
+static void tune(v29rx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
+
 	sub2(cp, z);
-	if (state->stage != &running) state->err = mag(cp);
+	if (state->stage != &running) state->err = mag(cp); //FxP state->err 2^10 scaled 
 	eq_update(&state->eq, cp);
 	return;
 }
 
-static void update(v29rx_state *state, complex cp, complex z) {
+static void update(v29rx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
 	float err;
-	complex t0;
+	complexi t0;
 
 	sub3(t0, cp, z);
-	if (mag(t0) < 0.6f) tune(state, cp, z);
+	if (magsq(t0) < 0.6*0.6*1024*1024) tune(state, cp, z); //FxP 2^10 scaled
+
 	con2(t0, cp);
 	mul2(t0, z);
 	if (fabsf(Arg(t0)) < (float)M_PI / 16.0f) {
@@ -174,9 +191,10 @@
 	return;
 }
 
-static int nearest(int clen, complex z) {
-	complex t0;
-	float len = HUGE_VALF, t;
+static int nearest(int clen, complexi z) {
+//FxP: z scaled 2^10	
+	complexi t0;
+	int len = MAX_INT, t;
 	int j, idx=0;
 
 	for (j=0; j<clen; j++) {
@@ -190,9 +208,10 @@
 	return idx;
 }
 
-static int demodv29(v29rx_state *state, complex z) {
+static int demodv29(v29rx_state *state, complexi z) {
+//FxP: z scaled 2^10
 	int quadbit, r = 0;
-		
+	
 	if (state->rate == 9600) quadbit = nearest(16, z);
 	else quadbit = nearest(8, z);
 	if (quadbit < 0) {
@@ -206,7 +225,8 @@
 	return r;
 }
 
-static int putbits(v29rx_state *state, complex z) {
+static int putbits(v29rx_state *state, complexi z) {
+//FxP: z scaled 2^10
 	int quadbit, d = 0;
 	
 	quadbit = demodv29(state, z);
@@ -280,17 +300,19 @@
 #define SEG3LEN		384
 #define SEG4LEN		48
 
-static int ab0(void *_state, complex z) {
+static int ab0(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v29rx_state *state = (v29rx_state *)_state;
-	float angle;
-	
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("ABAB0\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("ABAB0\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
-	if (mag(z) < 0.5f) return 0;
+	if (magsq(z) < 0.5*0.5*1024*1024) return 0; //FxP scaled 2^10
 	state->stage = &ab1;
 #ifdef _DEBUG_
 	printf("SWAB1\t%d\n", state->scnt);
@@ -298,15 +320,17 @@
 	return 0;
 }
 
-static int ab1(void *_state, complex z) {
+static int ab1(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v29rx_state *state = (v29rx_state *)_state;
-	float angle;
-	
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("ABAB1\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("ABAB1\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	if (++state->symbol == 30) {
 		state->step = 256;
@@ -323,7 +347,8 @@
 	return 0;
 }
 
-static int ab2(void *_state, complex z) {
+static int ab2(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v29rx_state *state = (v29rx_state *)_state;
 	float angle, alpha;
 	
@@ -331,7 +356,7 @@
 	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("ABAB2\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+	printf("ABAB2\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	state->ang[(state->symbol) & (_V29CONST_ALEN-1)] = angle;
 	if (state->symbol < 3) {
@@ -350,7 +375,7 @@
 		state->step = 128;
 		state->symbol = 1;
 		state->stage = &cdcd;
-		state->err = state->erri = 0.0f;
+		state->err = state->erri = 0;
 #ifdef _DEBUG_
 		printf("SWCD\t%d\t%f\n", state->scnt, alpha);
 #endif
@@ -358,16 +383,18 @@
 	return 0;
 }
 
-static int cdcd(void *_state, complex z) {
+static int cdcd(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v29rx_state *state = (v29rx_state *)_state;
-	float angle;
 	int bit;
 	
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
-	
 #ifdef _DEBUG_
-	printf("CDCD\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("CDCD\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	bit = rnd(&state->rnd);
 	track(state, state->CD[bit], z);
@@ -384,7 +411,7 @@
 			state->symbol = 0;
 			state->step = 128;
 			state->stage = &ones;
-			state->err = state->erri = 0.0f;
+			state->err = state->erri = 0;
 			eq_setd(&state->eq, 0.015f); /* damp the eq_update */
 		} else {
 			state->stage = FAILURE;
@@ -394,16 +421,18 @@
 	return 0;
 }
 
-static int ones(void *_state, complex z) {
+static int ones(void *_state, complexi z) {
+//xP: z scaled 2^10
 	v29rx_state *state = (v29rx_state *)_state;
-	float angle;
 	int bit;
 	
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
-	
 #ifdef _DEBUG_
-	printf("O\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("O\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	if ((bit = putbits(state, z)) < 0) {
 		state->stage = FAILURE;
@@ -430,41 +459,46 @@
 	return 0;
 }
 
-static int running(void *_state, complex z) {
+static int running(void *_state, complexi z) {
+//FxP: z scaled 2^10
 	v29rx_state *state = (v29rx_state *)_state;
-	float angle;
-	
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("R\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("R\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	return putbits(state, z);
 }
 
-static void cput(v29rx_state *state, complex z) {
+static void cput(v29rx_state *state, complexi z) {
+//FxP: z scaled 2^10	
 	state->fbuf[state->p] = state->fbuf[state->p + N] = z;
 	state->p = (state->p + 1) % N;
 	return;
 }
 
-static complex cfir(v29rx_state *state, int sel) {
-	complex acc, t0;
+static complexi cfir(v29rx_state *state, int sel) {
+	complexi acc, t0;
 	int j;
 
-	for (j=0, acc=_C0; j<N; j++) {
+	for (j=0, acc=_C0i; j<N; j++) {
 		scale2(t0, state->fbuf[j+state->p], fb[sel][j]);
 		add2(acc, t0);
 	}
-	scale(acc, 1.0f/gain[sel]);
-	return acc;
+		scale(acc, 1.0f/gain[sel]); //FxP result seems to match the constelation points 2^10 scaled.
+	return acc;			   //gain[sel] ~ 47988. To speed up further we can assume single gain 
+
 }
 
-static int synchronise(v29rx_state *state, complex z) {
-	float g;
+static int synchronise(v29rx_state *state, complexi z) {
+//FxP: z scaled 2^10
+	int g; 
 	int sel;
-	
+
 	cput(state, z);
 	state->selector += L;
 	if (state->selector < 0) return 0;
@@ -474,13 +508,14 @@
 	state->tn2 = state->tn1; /* best interpolated sample from the prev. baud */
 	state->tn1 = state->tn0; /* prev. interpolated sample from the baud */
 	state->tn0 = cfir(state, sel); /* best interpolated sample from the baud */
+
 	eq_insert(&state->eq, state->tn0);
 	if ((++state->sample) & 1) return 0;
 #ifdef _DEBUG_
 	printf("SEL\t%d\n", sel);
 #endif
-	if ((g = gardner(state->tn0, state->tn1, state->tn2)) < 0.0f) state->integrator -= state->step;
-	else if (g > 0.0f) state->integrator += state->step;
+	if ((g = gardner(state->tn0, state->tn1, state->tn2)) < 0) state->integrator -= state->step;
+	else if (g > 0) state->integrator += state->step;
 #ifdef _DEBUG_
 	printf("INT\t%d\n", state->integrator);
 #endif
@@ -488,14 +523,15 @@
 		state->selector += state->integrator/256;
 		state->integrator %= 256;
 	}
+
 	return (*(state->stage))(state, eq_get(&state->eq));
 }
 
 int v29rx(v29rx_state *state, const signed short *s, int len) {
 	int j, t1;
 	float power, power_gain;
-	complex t0;
-	
+	complexi t0;
+
 	if (state->stage == FAILURE) return -2;
 	for (j=0; j<len; j++, state->scnt++) {
 		meter_update(&state->m, s[j]);
@@ -530,10 +566,12 @@
 			if ((state->stage == &ab0) || (state->stage == &ab1) || (state->stage == &ab2))
 				state->gain = 0.01f*5.0f/sqrtf(power_gain) + 0.99*state->gain;
 		}
+
 		if (state->stage != PARK) {
-			t0 = csynth(state->pacc);
+			t0 = csynth(state->pacc); //FxP t0 is 2^10 scaled
 			state->pacc += state->ph;
 			scale(t0, s[j]*state->gain);
+			
 			if ((t1 = synchronise(state, t0)) < 0) {
 				state->stage = FAILURE;
 				return t1;
@@ -581,13 +619,13 @@
 	state->integrator = 0;
 	state->step = 512;
 	state->selector = -_V29CONST_SEL;
-	state->tn0 = state->tn1 = state->tn2 = _C0;
+	state->tn0 = state->tn1 = state->tn2 = _C0i;
 	
 	meter_init(&state->m_gain, 0.01f);
 	meter_init(&state->m, 0.25f);
 	eq_init(&state->eq, 16, 7, 0.03f);
 	
-	for (j=0; j<_V29CONST_FLEN; j++) state->fbuf[j] = _C0;
+	for (j=0; j<_V29CONST_FLEN; j++) state->fbuf[j] = _C0i;
 	for (j=0; j<_V29CONST_ALEN; j++) state->ang[j] = 0.0f;
 	state->p = 0;
 	
@@ -603,7 +641,7 @@
 	state->rate = rate;
 	state->level_on = meter_level(LEVEL_on);
 	state->level_off = meter_level(LEVEL_off);
-	state->Ki = 20.525f;
+	state->Ki = 20.525f; 
 	state->Kp = 1000.175f;
 	state->scnt = 0;
 	v29rx_reset(state, echo);
--- attrafax-0.9/src/modems/v29tx.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v29tx.c	2010-08-04 23:42:22.000000000 +0300
@@ -18,6 +18,13 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
+ *
+ * Note that V29 transmitter is kept floating point as it is already fast.
+ * Can be optimized later
  */
 
 
@@ -253,7 +260,7 @@
 int v29tx(v29tx_state *state, signed short *s, int len) {
 	int j, k;
 	complex t0, t1;
-
+	complexi t1_;
 	for (j=0; j<len; j++) {
 		if (state->end) goto eot;
 		for (k=2; k>=0; k--) {
@@ -264,7 +271,8 @@
 			cput(state, state->baud);
 			if (!k) t0 = cfir(state);
 		}
-		t1 = csynth(state->pacc);
+		t1_= csynth(state->pacc); //FxP we get t1_ 2^10 scaled. The transmitter we will 
+		scale2_pow2r(t1,t1_,10);  //keep floating as it is simple enought. //So lets descale	
 		state->pacc += state->ph;
 		con(t1);
 		s[j] = (signed short)(pseudosc(t0, t1) * state->gain);
--- attrafax-0.9/src/modules/Makefile	2008-08-28 12:25:49.000000000 +0300
+++ attrafax-0.9/src/modules/Makefile	2010-08-04 23:42:22.000000000 +0300
@@ -12,10 +12,10 @@
 
 
 CC?=cc
-INCLUDES=-I${IDIR}/usr/include -I../asterisk/include -I../../include  -I/usr/local/include
+INCLUDES=-I${STAGING_INC} -I${ASTERISK_INC} -I../../include 
 CCOPTS=-Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -O6 -fPIC -pthread -pipe -shared $(ARCH)
 CFLAGS=-D_GNU_SOURCE -DOLD_DSP_ROUTINES
-LIBS=-L/usr/local/lib -lt30 -lm -lssl -lpthread -lssl -lcrypto
+LIBS=-L${STAGING_LIB} -L../../bin/ -lt30 -lm -lssl -lpthread -lssl -lcrypto
 CMPL=$(CC) $(INCLUDES) $(CCOPTS) $(CFLAGS)
 
 
--- attrafax-0.9/include/internal/common/fastmath.h	1970-01-01 02:00:00.000000000 +0200
+++ attrafax-0.9/include/internal/common/fastmath.h	2010-08-04 23:42:22.000000000 +0300
@@ -0,0 +1,22 @@
+/* #########################################################################
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# The Free Software Foundation; version 3 of the License.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# Primary Authors: Dimitar Penev dpn@switchfin.org
+# Copyright @ 2010 SwitchFin www.switchfin.org
+######################################################################### */
+
+inline unsigned short fast_sqrti(unsigned short);
+inline float fast_sqrtf(float);
+inline double fast_expf(double);
+inline float fast_atan2f(float, float);
+inline float fast_sinf(float);
+inline float fast_cosf(float);
+inline void  fast_sincosf(float, float *, float *);
+
--- attrafax-0.9/src/common/fastmath.c	1970-01-01 02:00:00.000000000 +0200
+++ attrafax-0.9/src/common/fastmath.c	2010-08-04 23:42:22.000000000 +0300
@@ -0,0 +1,257 @@
+/* #########################################################################
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# The Free Software Foundation; version 3 of the License.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# Primary Authors: Dimitar Penev dpn@switchfin.org
+# Copyright @ 2010 Switchfin www.switchfin.org
+######################################################################### */
+
+
+/*
+In this file there are some fast BUT NOT ACURATE routines. 
+They may be usefull for Atrafax application but probably 
+useless for your application. Check the acurracy before !    
+*/
+
+#include "internal/common/fastmath.h"
+#define PI (3.14159265)
+
+//=======================================================================
+// sqrt calculation using int calculations
+//=======================================================================
+inline unsigned short fast_sqrti(unsigned short x){
+
+    	unsigned short l2, u, v, u2, n;
+
+    	if (x<2) return(x);
+
+    	u  = x;
+    	l2 = 0;
+    	while( u >>= 2 ) l2++;
+    	u  = 1L << l2;
+    	v  = u;
+    	u2 = u << l2;
+
+    	while( l2-- ){
+        	v >>= 1;
+        	n   = (u + u + v) << l2;
+        	n  += u2;
+        	if( n <= x ){
+            		u += v;
+            		u2 = n;
+        	}
+    	}
+
+    	return(u);
+}
+
+//=======================================================================
+// Method using Log Base 2 Approximation
+// The maximum error is around 6%, 3 x sqrtf speed up
+//=======================================================================
+inline float fast_sqrtf(const float x) {
+  	union
+  	{
+    		int i;
+    		float x;
+  	} u;
+  	
+	u.x = x;
+  	u.i = (1<<29) + (u.i >> 1) - (1<<22); 
+  	
+	return u.x;
+}
+//=======================================================================
+// Fast exp() the maximum error seems to be  around 6%
+//=======================================================================
+inline double fast_expf(double val)
+{
+   	int    e;
+   	double ret;
+
+	val=val*1.44269504088; //log2e
+   	if (val >= 0) {
+      		e = (int)val;
+      		ret = val - (e - 1);
+      		(*(1 + (int *) &ret)) &= ~(2047 << 20); 
+		(*(1 + (int *) &ret)) += (e + 1023) << 20;
+   	} else {
+      		e = (int)val + 1023;
+      		ret = val - (e - 1024);
+      		(*(1 + (int *) &ret)) &= ~(2047 << 20);
+		(*(1 + (int *) &ret)) += e << 20;
+   	}
+
+   	return (ret);
+}
+
+//=======================================================================
+// arctan2 calculation with self normalization
+// The algo uses fast polinomial series for arctan
+// The max error is a little less than 0.07 rads  
+// The error tends to be small at 0, 45, 90, etc deg 
+// so probably will be OK for the V29 constelation  
+//=======================================================================
+inline float fast_atan2f(float  y, float x)
+{
+        float r, angle;
+
+	if (x==0 && y==0) return 0;
+
+	if(y<0) {
+        	if (x>=0) {
+                	r = (x+y)/(x-y);
+                	angle = PI/4.0-PI/4.0*r;
+        	}
+        	else {
+                	r = (y-x)/(x+y);
+                	angle = 3.0/4.0*PI - PI/4.0*r;
+        	}
+
+		return(-angle);     // negate if in quad III or IV
+	}
+	else {
+        	if (x>=0) {
+                	r = (x-y)/(x+y);
+                	angle = PI/4 - PI/4*r;
+        	}
+        	else {
+                	r = (x+y)/(y-x);
+                	angle = 3.0/4.0*PI - PI/4.0*r;
+        	}
+
+		return(angle);	
+	}
+}
+
+
+//=======================================================================
+//#define C 0.7035  	//optimized for minimum maximum absolute difference to sin.
+//#define C 0.71256755058 //optimized for minimum maximum absolute difference of sqrt(sinapprox(x)^2+cosapprox(x)^2) to 1
+			//good for rotations where you want the dimensions to stretch as little as possible from the original
+#define C 0.7071067812  //sqrt(2)/2 as previous one but never lets sqrt(sinapprox(x)^2+cosapprox(x)^2) exceed 1
+//#define C 0.75 	  //optimized for continuous differential, which reduces high harmonics
+
+//When you need both sin and cos at once, and you need 'em fast, 
+//and using multiplications and parabolic approximation is OK, try this. 
+//Possible applications are audio panning, mixing fader, maybe even 
+//realtime filter coefficient calculations and 2D/3D rotation transformations.
+//=======================================================================
+inline float fast_sinf(float x) {
+	float t;
+
+        while(x>PI) x=x-2*PI;
+        while(x<-PI) x=2*PI+x;
+
+	if(x>=0 && x<PI/2) { 	     // I quadrant
+    		x=(2/PI)*x-0.5;
+    		t=(2-4*C)*x*x+C;
+    		return(t+x);
+	} else if (x>=PI/2 && x<PI) { // II quadrant
+    		x=(2/PI)*x-1.5;
+    		t=-(2-4*C)*x*x-C;
+    		return(-t-x);
+	} else if (x<0 && x>=-PI/2) { // IV quadrant
+    		x=(2/PI)*x+0.5;
+    		t=(2-4*C)*x*x+C;
+    		return(x-t);
+	} else {  		     // III quadrant
+    		x=(2/PI)*x+1.5;
+    		t=-(2-4*C)*x*x-C;
+    		return(t-x);
+	}
+}
+//=======================================================================
+inline float fast_cosf(float x) {
+        float t;
+
+        while(x>PI) x=x-2*PI;
+        while(x<-PI) x=2*PI+x;
+
+        if(x>=0 && x<PI/2) { 	     // I quadrant
+                x=(2/PI)*x-0.5;
+                t=(2-4*C)*x*x+C;
+                return(t-x);
+        } else if (x>=PI/2 && x<PI) { // II quadrant
+                x=(2/PI)*x-1.5;
+                t=-(2-4*C)*x*x-C;
+                return(t-x);
+        } else if (x<0 && x>=-PI/2) { // IV quadrant
+                x=(2/PI)*x+0.5;
+                t=(2-4*C)*x*x+C;
+                return(x+t);
+        } else {                     // III quadrant
+                x=(2/PI)*x+1.5;
+                t=-(2-4*C)*x*x-C;
+                return(t+x);
+        }
+}
+//=======================================================================
+inline void  fast_sincosf(float x, float *si, float *co) {
+        float t;
+
+        while(x>PI) x=x-2*PI;
+        while(x<-PI) x=2*PI+x;
+
+        if(x>=0 && x<PI/2) {         // I quadrant
+                x=(2/PI)*x-0.5;
+                t=(2-4*C)*x*x+C;
+		*si=t+x;
+                *co=t-x;
+        } else if (x>=PI/2 && x<PI) { // II quadrant
+                x=(2/PI)*x-1.5;
+                t=-(2-4*C)*x*x-C;
+                *si=-x-t;
+		*co=-x+t;
+        } else if (x<0 && x>=-PI/2) { // IV quadrant
+                x=(2/PI)*x+0.5;
+                t=(2-4*C)*x*x+C;
+		*si=x-t;
+                *co=x+t;
+        } else {                     // III quadrant
+                x=(2/PI)*x+1.5;
+                t=-(2-4*C)*x*x-C;
+                *si=t-x;
+		*co=t+x;
+        }
+}
+
+//=======================================================================
+// sin aproximation using a quadratic curve
+//=======================================================================
+inline float fast1_sinf(float x) {
+	
+	//always wrap input angle to -PI..PI
+	if (x < -3.14159265) x += 6.28318531;
+	else
+		if (x >  3.14159265) x -= 6.28318531;
+
+	if (x < 0)
+    		return (1.27323954*x + 0.405284735*x*x);
+	else
+    		return (1.27323954*x - 0.405284735*x*x);
+}
+
+//=======================================================================
+// sin aproximation using a quadratic curve
+// sin(x + PI/2) = cos(x)
+//=======================================================================
+inline float fast1_cosf(float x) {
+
+	x += 1.57079632; //sin(x + PI/2) = cos(x)
+        if (x < -3.14159265) x += 6.28318531;
+        else
+                if (x >  3.14159265) x -= 6.28318531;
+
+	if (x < 0)
+    		return (1.27323954*x + 0.405284735*x*x);
+	else
+    		return (1.27323954*x - 0.405284735*x*x);
+}
+
--- attrafax-0.9/include/internal/common/complex.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/common/complex.h	2010-08-05 00:25:18.000000000 +0300
@@ -18,7 +18,11 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
- */
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
+*/
 
 
 
@@ -30,15 +34,26 @@
 #ifndef _COMPLEX_
 #define _COMPLEX_
 
+#include "fastmath.h"
+
 typedef struct {
 	float re;
 	float im;
 } complex;
 
+
+//Added integer complex type so we 
+//optimize some criticle code sections
+typedef struct {
+        int re;
+        int im;
+} complexi;
+
 #define mkz(Re, Im)		{ (Re), (Im) }
 #define Re1			mkz(1.0f, 0.0f)
 #define Im1			mkz(0.0f, 1.0f)
 #define C0			mkz(0.0f, 0.0f)
+#define C0i			mkz(0, 0)
 #define Re(X)			((X).re)
 #define Im(X)			((X).im)
 
@@ -46,6 +61,17 @@
 #include "internal/common/cval.h"
 #endif
 
+#define f2i(Ci, Cf) do { \
+        Re(Ci)=(int)(Re(Cf)); \
+        Im(Ci)=(int)(Im(Cf)); \
+} while (0)
+
+#define i2f(Cf, Ci) do { \
+        Re(Cf)=(float)(Re(Ci)); \
+        Im(Cf)=(float)(Im(Ci)); \
+} while (0)
+
+
 #define printc(X) do { \
 	printf("%.10f %.10f\n", Re(X), Im(X)); \
 } while (0)
@@ -63,7 +89,27 @@
 #define scale2(C, X, m) { \
 	Re(C) = (Re(X) * m); \
 	Im(C) = (Im(X) * m); \
-}
+} while (0)
+
+#define scale_pow2r(C, m) do { \
+        Re(C) >>= m; \
+        Im(C) >>= m; \
+} while (0)
+
+#define scale_pow2l(C, m) do { \
+        Re(C) <<= m; \
+        Im(C) <<= m; \
+} while (0)
+
+#define scale2_pow2r(C, X, m) { \
+        Re(C) = (Re(X) >> m); \
+        Im(C) = (Im(X) >> m); \
+} while (0)
+
+#define scale2_pow2l(C, X, m) { \
+        Re(C) = (Re(X) << m); \
+        Im(C) = (Im(X) << m); \
+} while (0)
 
 #define con(X) do { \
 	Im(X) = -Im(X); \
@@ -74,15 +120,15 @@
 	Im(C) = -Im(X); \
 } while (0)
 
-#define mag(X) (sqrtf(Re(X) * Re(X) + Im(X) * Im(X)))
+#define mag(X) (fast_sqrtf(Re(X) * Re(X) + Im(X) * Im(X)))
 
 #define magsq(X) (Re(X) * Re(X) + Im(X) * Im(X))
 
-#define Arg(C) (atan2f(Im(C), Re(C)))
+#define Arg(C) (fast_atan2f(Im(C), Re(C)))
 
 #define dist(C0,C1) \
-	(sqrtf((Re(C0) - Re(C1)) * (Re(C0) - Re(C1)) + \
-	(Im(C0) - Im(C1)) * (Im(C0) - Im(C1))))
+        (fast_sqrtf((Re(C0) - Re(C1)) * (Re(C0) - Re(C1)) + \
+        (Im(C0) - Im(C1)) * (Im(C0) - Im(C1))))
 
 #define distsq(C0,C1) \
 	((Re(C0) - Re(C1)) * (Re(C0) - Re(C1)) + \
@@ -145,55 +191,66 @@
 } while (0)
 
 #define expiphiR(C,phi) do { \
-	Re(C) = cosf(phi); \
-	Im(C) = sinf(phi); \
+        fast_sincosf(phi, &(Im(C)), &(Re(C))); \
 } while (0)
 
 #define expiphiC(C,X) do { \
-	Re(C) = expf(-Im(X)) * cosf(Re(X)); \
-	Im(C) = expf(-Im(X)) * sinf(Re(X)); \
+        float ___si, ___co; \
+        fast_sincosf(Re(X), &___si, &___co); \
+        Re(C) = fast_expf(-Im(X)) * ___co; \
+        Im(C) = fast_expf(-Im(X)) * ___si; \
 } while (0)
 
 #define expC(C) do { \
-	register float ___t = Re(C); \
-	Re(C) = expf(___t) * cosf(Im(C)); \
-	Im(C) = expf(___t) * sinf(Im(C)); \
+        register float ___t = Re(C); \
+        float ___si, ___co; \
+        fast_sincosf(Im(C), &___si, &___co); \
+        Re(C) = fast_expf(___t) * ___co; \
+        Im(C) = fast_expf(___t) * ___si; \
 } while (0)
 
 #define expC2(C,X) do { \
-	Re(C) = expf(Re(X)) * cosf(Im(X)); \
-	Im(C) = expf(Re(X)) * sinf(Im(X)); \
+        float ___si, ___co; \
+        fast_sincosf(Im(X), &___si, &___co); \
+        Re(C) = fast_expf(Re(X)) * ___co; \
+        Im(C) = fast_expf(Re(X)) * ___si; \
 } while (0)
 
 #define sinC(C) do { \
-	register float ___t0 = expf(Im(C)); \
-	register float ___t1 = Re(C); \
-	Re(C) = 0.5f * (1.0f / ___t0 + ___t0) * sinf(___t1); \
-	Im(C) = -0.5f * (1.0f / ___t0 - ___t0) * cosf(___t1); \
+        register float ___t0 = fast_expf(Im(C)); \
+        float ___si, ___co; \
+        fast_sincosf(Re(C), &___si, &___co); \
+        Re(C) = 0.5f * (1.0f / ___t0 + ___t0) * ___si; \
+        Im(C) = -0.5f * (1.0f / ___t0 - ___t0) * ___co; \
 } while (0)
 
 #define sinC2(C,X) do { \
-	register float ___t0 = expf(Im(X)); \
-	register float ___t1 = Re(X); \
-	Re(C) = 0.5f * (1.0f / ___t0 + ___t0) * sinf(___t1); \
-	Im(C) = -0.5f * (1.0f / ___t0 - ___t0) * cosf(___t1); \
+        register float ___t0 = fast_expf(Im(X)); \
+        float ___si, ___co; \
+        fast_sincosf(Re(X), &___si, &___co); \
+        Re(C) = 0.5f * (1.0f / ___t0 + ___t0) * ___si; \
+        Im(C) = -0.5f * (1.0f / ___t0 - ___t0) * ___co; \
 } while (0)
 
 #define cosC(C) do { \
-	register float ___t0 = expf(Im(C)); \
-	register float ___t1 = Re(C); \
-	Re(C) = 0.5f * (1.0f / ___t0 + ___t0) * cosf(___t1); \
-	Im(C) = 0.5f * (1.0f / ___t0 - ___t0) * sinf(___t1); \
+        register float ___t0 = fast_expf(Im(C)); \
+        float ___si, ___co; \
+        fast_sincosf(Re(C), &___si, &___co); \
+        Re(C) = 0.5f * (1.0f / ___t0 + ___t0) * ___co; \
+        Im(C) = 0.5f * (1.0f / ___t0 - ___t0) * ___si; \
 } while (0)
 
 #define cosC2(C,X) do { \
-	register float ___t0 = expf(Im(X)); \
-	register float ___t1 = Re(X); \
-	Re(C) = 0.5f * (1.0f / ___t0 + ___t0) * cosf(___t1); \
-	Im(C) = 0.5f * (1.0f / ___t0 - ___t0) * sinf(___t1); \
+        register float ___t0 = fast_expf(Im(X)); \
+        float ___si, ___co; \
+        fast_sincosf(Re(X), &___si, &___co); \
+        Re(C) = 0.5f * (1.0f / ___t0 + ___t0) * ___co; \
+        Im(C) = 0.5f * (1.0f / ___t0 - ___t0) * ___si; \
 } while (0)
 
 #define gardner(z0, z1, z2) \
 	(((Re(z0) - Re(z2)) * Re(z1)) + ((Im(z0) - Im(z2)) * Im(z1)))
 
+
 #endif
+
--- attrafax-0.9/src/modems/v27terrx2400.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modems/v27terrx2400.c	2010-08-05 00:33:05.000000000 +0300
@@ -18,6 +18,10 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
@@ -42,29 +46,32 @@
 #define LEVEL_off	-48.0f
 #define LEVEL_on	-43.0f
 
-#define CONVG_SCR	200.0f
-#define CONVG_ONES	50.0f
+#define CONVG_SCR	200*1024 //FxP: scaled 2^10 as the 
+#define CONVG_ONES	50*1024  //state->err is also scaled
 
-static const complex constellation[4] = {
-	mkz(1.0f, 0.0f),
-	mkz(0.0f, 1.0f),
-	mkz(-1.0f, 0.0f),
-	mkz(0.0f, -1.0f),
+#define MAX_INT		2147483647
+
+//FxP constelation scaled 2^10
+static const complexi constellation[4] = {
+	mkz(1024, 0),
+	mkz(0, 1024),
+	mkz(-1024, 0),
+	mkz(0, -1024),
 };
 
 static const int revconsidx[4] = { 0, 1, 3, 2 };
 		
 #include "internal/modems/v27ter2400rxfilter.h"
 
-static int ph0(void *_state, complex z);
-static int ph1(void *_state, complex z);
-static int ph2(void *_state, complex z);
-static int scr(void *_state, complex z);
-static int ones(void *_state, complex z);
-static int running(void *_state, complex z);
+static int ph0(void *_state, complexi z);
+static int ph1(void *_state, complexi z);
+static int ph2(void *_state, complexi z);
+static int scr(void *_state, complexi z);
+static int ones(void *_state, complexi z);
+static int running(void *_state, complexi z);
 
-static float fb[L][N];
-static float gain[L];
+static int fb[L][N];
+static int gain[L];
 static int fb_init = 0;
 
 static void mkfilterbank(void) {
@@ -74,10 +81,12 @@
 		for (i=0; i<N; i++)
 			for (j=0; j<L; j++)
 				fb[j][N-i-1] = f[L*i+j]; /* prepare the j-th filter for convolution */
+							 //FxP matching filter is percomputed scaled
 		for (i=0; i<L; i++) {
 			gain[i] = 0.0f;
 			for (j=0; j<N; j++)
-				gain[i] += fb[i][j];
+				gain[i] += fb[i][j];	//FxP: all gains ~. We can precampute it but 
+							//the addition is fast so keep it 	
 		}
 		fb_init = 1;
 	}
@@ -110,27 +119,33 @@
 	return t0 & 1;
 }
 
-static void track(v27terrx_state *state, complex cp, complex z) {
+static void track(v27terrx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
+	float err;
+
 	con(cp); mul2(cp, z);
-	Re(z) = Arg(cp); /* err */
-	state->pacc -= (int)(Re(z)*state->Kp);
-	state->ph -= (int)(Re(z)*state->Ki);
+	err = Arg(cp); /* err */
+	state->pacc -= (int)(err*state->Kp);
+	state->ph -= (int)(err*state->Ki);
 	return;
 }
 
-static void tune(v27terrx_state *state, complex cp, complex z) {
+static void tune(v27terrx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
+
 	sub2(cp, z);
-	if (state->stage != &running) state->err = mag(cp);
+	if (state->stage != &running) state->err = mag(cp); //FxP state->err 2^10 scaled 
 	eq_update(&state->eq, cp);
 	return;
 }
 
-static void update(v27terrx_state *state, complex cp, complex z) {
+static void update(v27terrx_state *state, complexi cp, complexi z) {
+//FxP: cp and z scaled 2^10
 	float err;
-	complex t0;
+	complexi t0;
 	
 	sub3(t0, cp, z);
-	if (mag(t0) < 0.5f) {
+	if (magsq(t0) < 0.5*0.5*1024*1024) { //FxP 2^10 scaled
 		track(state, cp, z);
 		tune(state, cp, z);
 		err = (float)_V27TERCONST_SPS*state->ph/TLEN - (float)_V27TERCONST_CF;
@@ -140,9 +155,10 @@
 	return;
 }
 
-static int nearest(v27terrx_state *state, complex z) {
-	complex t0;
-	float len = HUGE_VALF, t;
+static int nearest(v27terrx_state *state, complexi z) {
+//FxP: cp and z scaled 2^10
+	complexi t0;
+	float len = MAX_INT, t;
 	int j, idx=0;
 
 	for (j=0; j<4; j++) {
@@ -156,7 +172,8 @@
 	return idx;
 }
 
-static int putbits(v27terrx_state *state, complex z) {
+static int putbits(v27terrx_state *state, complexi z) {
+//FxP: cp and z scaled 2^10
 	int j, tribit, d = 0;
 	
 	j = nearest(state, z);
@@ -179,30 +196,34 @@
 #define SEG4LEN		1074
 #define SEG5LEN		8
 
-static int ph0(void *_state, complex z) {
+static int ph0(void *_state, complexi z) {
+//FxP: cp and z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
-
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("P0\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("P0\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
-	if (mag(z) < 0.5f) return 0;
+	if (magsq(z) < 0.5*0.5*1024*1024) return 0; //FxP 2^10 scaled
 	state->stage = &ph1;
 	return 0;
 }
 
-static int ph1(void *_state, complex z) {
+static int ph1(void *_state, complexi z) {
+//FxP: cp and z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
-
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("P1\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("P1\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	if (++state->symbol == 30) {
 		state->step = 32;
@@ -212,7 +233,8 @@
 	return 0;
 }
 
-static int ph2(void *_state, complex z) {
+static int ph2(void *_state, complexi z) {
+//FxP: cp and z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
 	float angle, alpha;
 
@@ -220,7 +242,7 @@
 	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-	printf("P2\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+	printf("P2\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	state->ang[(state->symbol) & (_V27TERCONST_ALEN-1)] = angle;
 	if (state->symbol < 3) {
@@ -238,21 +260,23 @@
 		state->symbol = 1;
 		state->step = 16;
 		state->stage = &scr;
-		state->err = state->erri = 0.0f;
+		state->err = state->erri = 0;
 	} else state->symbol++;	
 	return 0;
 }
 
-static int scr(void *_state, complex z) {
+static int scr(void *_state, complexi z) {
+//FxP: cp and z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
 	int bit;
 
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
-	
 #ifdef _DEBUG_
-	printf("SC\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("SC\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	bit = scramble(&state->scr, 1)<<1;
 	(void)scramble(&state->scr, 1);
@@ -284,16 +308,18 @@
 	return 0;
 }
 
-static int ones(void *_state, complex z) {
+static int ones(void *_state, complexi z) {
+//FxP: cp and z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
 	int bit;
 
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
-	
 #ifdef _DEBUG_
-	printf("O\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+        float angle;
+
+        angle = Arg(z);
+        if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+	printf("O\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 	if ((bit = putbits(state, z)) < 0) {
 		state->stage = FAILURE;
@@ -316,39 +342,45 @@
 	return 0;
 }
 
-static int running(void *_state, complex z) {
+static int running(void *_state, complexi z) {
+//FxP: cp and z scaled 2^10
 	v27terrx_state *state = (v27terrx_state *)_state;
-	float angle;
-
-	angle = Arg(z);
-	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
 	
 #ifdef _DEBUG_
-		printf("R\t%f\t%f %f\t%f\n", angle, Re(z), Im(z), mag(z));
+		float angle;
+	        angle = Arg(z);
+        	if (angle < 0.0f) angle += 2*(float)M_PI; /* absolute angle */
+
+		printf("R\t%f\t%d %d\t%f\n", angle, Re(z), Im(z), mag(z));
 #endif
 		return putbits(state, z);
 }
 
-static void cput(v27terrx_state *state, complex z) {
+static void cput(v27terrx_state *state, complexi z) {
+//FxP: cp and z scaled 2^10
+
 	state->fbuf[state->p] = state->fbuf[state->p + N] = z;
 	state->p = (state->p + 1) % N;
 	return;
 }
 
-static complex cfir(v27terrx_state *state, int sel) {
-	complex acc, t0;
+static complexi cfir(v27terrx_state *state, int sel) {
+//FxP: cp and z scaled 2^10
+	complexi acc, t0;
 	int j;
 
-	for (j=0, acc=_C0; j<N; j++) {
+	for (j=0, acc=_C0i; j<N; j++) {
 		scale2(t0, state->fbuf[j+state->p], fb[sel][j]);
 		add2(acc, t0);
 	}
-	scale(acc, 1.0f/gain[sel]);
-	return acc;
+	scale(acc, 1.0f/gain[sel]); //FxP result seems to match the constelation points 2^10 scaled.
+	return acc;		    //gain[sel] ~ 47988. To speed up further we can assume single gain 
+				    //and adjust the filter level so gain become power of two
 }
 
-static int synchronise(v27terrx_state *state, complex z) {
-	float g;
+static int synchronise(v27terrx_state *state, complexi z) {
+//FxP: cp and z scaled 2^10
+	int g;
 	int sel;
 
 	cput(state, z);
@@ -359,8 +391,8 @@
 	state->tn2 = state->tn1; state->tn1 = state->tn0;
 	eq_insert(&state->eq, (state->tn0 = cfir(state, sel)));
 	if ((++state->sample) & 1) return 0;
-	if ((g=gardner(state->tn0, state->tn1, state->tn2)) < 0.0f) state->integrator -= state->step;
-	else if (g > 0.0f) state->integrator += state->step;
+	if ((g=gardner(state->tn0, state->tn1, state->tn2)) < 0) state->integrator -= state->step;
+	else if (g > 0) state->integrator += state->step;
 	if ((state->integrator < -255) || (state->integrator > 255)) {
 		state->selector += (state->integrator/256);
 		state->integrator = 0;
@@ -371,7 +403,7 @@
 int v27terrx2400(v27terrx_state *state, const signed short *s, int len) {
 	int j, t1;
 	float power, power_gain;
-	complex t0;
+	complexi t0;
 	
 	if (state->stage == FAILURE) return -2;
 	for (j=0; j<len; j++) {
@@ -408,7 +440,7 @@
 				state->gain = 1.182f/sqrtf(power_gain);
 		}
 		if (state->stage != PARK) {
-			t0 = csynth(state->pacc);
+			t0 = csynth(state->pacc); //FxP t0 is 2^10 scaled
 			state->pacc += state->ph;
 			scale(t0, s[j]*state->gain);
 			if ((t1 = synchronise(state, t0)) < 0) {
@@ -440,13 +472,13 @@
 	state->integrator = 0;
 	state->step = 512;
 	state->selector = -_V27TERCONST_SEL2400;
-	state->tn0 = state->tn1 = state->tn2 = _C0;
+	state->tn0 = state->tn1 = state->tn2 = _C0i;
 	
 	meter_init(&state->m_gain, 0.02f);
 	meter_init(&state->m, 0.25f);
 	eq_init(&state->eq, 16, 7, 0.04f);
 	
-	for (j=0; j<_V27TERCONST_FLEN; j++) state->fbuf[j] = _C0;
+	for (j=0; j<_V27TERCONST_FLEN; j++) state->fbuf[j] = _C0i;
 	for (j=0; j<_V27TERCONST_ALEN; j++) state->ang[j] = 0.0f;
 	state->p = 0;
 	
--- attrafax-0.9/include/internal/common/complex.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/common/complex.h	2010-08-14 11:17:32.000000000 +0300
@@ -51,6 +51,7 @@
 
 #define mkz(Re, Im)		{ (Re), (Im) }
 #define Re1			mkz(1.0f, 0.0f)
+#define Re1i                    mkz(1024, 1024)
 #define Im1			mkz(0.0f, 1.0f)
 #define C0			mkz(0.0f, 0.0f)
 #define C0i			mkz(0, 0)
--- attrafax-0.9/include/internal/common/cval.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/common/cval.h	2010-08-14 11:19:25.000000000 +0300
@@ -32,6 +32,7 @@
 
 #ifdef _USE_CVAL_R1
 static complex _Cr1 = Re1;
+static complexi _Cr1i = Re1i;
 #endif
 
 #ifdef _USE_CVAL_C0
--- attrafax-0.9/include/internal/modems/stage.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/modems/stage.h	2010-08-14 12:46:07.000000000 +0300
@@ -18,6 +18,10 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
@@ -28,7 +32,7 @@
 
 #include "internal/common/complex.h"
 
-typedef complex (*txstage_f)(void *);
+typedef complexi (*txstage_f)(void *);
 typedef int (*rxstage_f)(void *, complexi);
 
 static const rxstage_f FAILURE = (rxstage_f)-1;
--- attrafax-0.9/include/internal/modems/v17constellation.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/modems/v17constellation.h	2010-08-14 12:46:42.000000000 +0300
@@ -18,265 +18,269 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
-
 #ifndef _V17CONSTELLATION_
 #define _V17CONSTELLATION_
 
 #include "internal/common/complex.h"
 
-static const complex constellation14400[128] = {
-	mkz(-8.0f, -3.0f),
-	mkz(9.0f, 2.0f),
-	mkz(2.0f, -9.0f),
-	mkz(-3.0f, 8.0f),
-	mkz(8.0f, 3.0f),
-	mkz(-9.0f, -2.0f),
-	mkz(-2.0f, 9.0f),
-	mkz(3.0f, -8.0f),
-	mkz(-8.0f, 1.0f),
-	mkz(9.0f, -2.0f),
-	mkz(-2.0f, -9.0f),
-	mkz(1.0f, 8.0f),
-	mkz(8.0f, -1.0f),
-	mkz(-9.0f, 2.0f),
-	mkz(2.0f, 9.0f),
-	mkz(-1.0f, -8.0f),
-	mkz(-4.0f, -3.0f),
-	mkz(5.0f, 2.0f),
-	mkz(2.0f, -5.0f),
-	mkz(-3.0f, 4.0f),
-	mkz(4.0f, 3.0f),
-	mkz(-5.0f, -2.0f),
-	mkz(-2.0f, 5.0f),
-	mkz(3.0f, -4.0f),
-	mkz(-4.0f, 1.0f),
-	mkz(5.0f, -2.0f),
-	mkz(-2.0f, -5.0f),
-	mkz(1.0f, 4.0f),
-	mkz(4.0f, -1.0f),
-	mkz(-5.0f, 2.0f),
-	mkz(2.0f, 5.0f),
-	mkz(-1.0f, -4.0f),
-	mkz(4.0f, -3.0f),
-	mkz(-3.0f, 2.0f),
-	mkz(2.0f, 3.0f),
-	mkz(-3.0f, -4.0f),
-	mkz(-4.0f, 3.0f),
-	mkz(3.0f, -2.0f),
-	mkz(-2.0f, -3.0f),
-	mkz(3.0f, 4.0f),
-	mkz(4.0f, 1.0f),
-	mkz(-3.0f, -2.0f),
-	mkz(-2.0f, 3.0f),
-	mkz(1.0f, -4.0f),
-	mkz(-4.0f, -1.0f),
-	mkz(3.0f, 2.0f),
-	mkz(2.0f, -3.0f),
-	mkz(-1.0f, 4.0f),
-	mkz(0.0f, -3.0f),
-	mkz(1.0f, 2.0f),
-	mkz(2.0f, -1.0f),
-	mkz(-3.0f, 0.0f),
-	mkz(0.0f, 3.0f),
-	mkz(-1.0f, -2.0f),
-	mkz(-2.0f, 1.0f),
-	mkz(3.0f, 0.0f),
-	mkz(0.0f, 1.0f),
-	mkz(1.0f, -2.0f),
-	mkz(-2.0f, -1.0f),
-	mkz(1.0f, 0.0f),
-	mkz(0.0f, -1.0f),
-	mkz(-1.0f, 2.0f),
-	mkz(2.0f, 1.0f),
-	mkz(-1.0f, 0.0f),
-	mkz(8.0f, -3.0f),
-	mkz(-7.0f, 2.0f),
-	mkz(2.0f, 7.0f),
-	mkz(-3.0f, -8.0f),
-	mkz(-8.0f, 3.0f),
-	mkz(7.0f, -2.0f),
-	mkz(-2.0f, -7.0f),
-	mkz(3.0f, 8.0f),
-	mkz(8.0f, 1.0f),
-	mkz(-7.0f, -2.0f),
-	mkz(-2.0f, 7.0f),
-	mkz(1.0f, -8.0f),
-	mkz(-8.0f, -1.0f),
-	mkz(7.0f, 2.0f),
-	mkz(2.0f, -7.0f),
-	mkz(-1.0f, 8.0f),
-	mkz(-4.0f, -7.0f),
-	mkz(5.0f, 6.0f),
-	mkz(6.0f, -5.0f),
-	mkz(-7.0f, 4.0f),
-	mkz(4.0f, 7.0f),
-	mkz(-5.0f, -6.0f),
-	mkz(-6.0f, 5.0f),
-	mkz(7.0f, -4.0f),
-	mkz(-4.0f, 5.0f),
-	mkz(5.0f, -6.0f),
-	mkz(-6.0f, -5.0f),
-	mkz(5.0f, 4.0f),
-	mkz(4.0f, -5.0f),
-	mkz(-5.0f, 6.0f),
-	mkz(6.0f, 5.0f),
-	mkz(-5.0f, -4.0f),
-	mkz(4.0f, -7.0f),
-	mkz(-3.0f, 6.0f),
-	mkz(6.0f, 3.0f),
-	mkz(-7.0f, -4.0f),
-	mkz(-4.0f, 7.0f),
-	mkz(3.0f, -6.0f),
-	mkz(-6.0f, -3.0f),
-	mkz(7.0f, 4.0f),
-	mkz(4.0f, 5.0f),
-	mkz(-3.0f, -6.0f),
-	mkz(-6.0f, 3.0f),
-	mkz(5.0f, -4.0f),
-	mkz(-4.0f, -5.0f),
-	mkz(3.0f, 6.0f),
-	mkz(6.0f, -3.0f),
-	mkz(-5.0f, 4.0f),
-	mkz(0.0f, -7.0f),
-	mkz(1.0f, 6.0f),
-	mkz(6.0f, -1.0f),
-	mkz(-7.0f, 0.0f),
-	mkz(0.0f, 7.0f),
-	mkz(-1.0f, -6.0f),
-	mkz(-6.0f, 1.0f),
-	mkz(7.0f, 0.0f),
-	mkz(0.0f, 5.0f),
-	mkz(1.0f, -6.0f),
-	mkz(-6.0f, -1.0f),
-	mkz(5.0f, 0.0f),
-	mkz(0.0f, -5.0f),
-	mkz(-1.0f, 6.0f),
-	mkz(6.0f, 1.0f),
-	mkz(-5.0f, 0.0f)
+//FxP: constelations scaled 2^10
+static const complexi constellation14400[128] = {
+	mkz(-8.0*1024, -3.0*1024),
+	mkz(9.0*1024, 2.0*1024),
+	mkz(2.0*1024, -9.0*1024),
+	mkz(-3.0*1024, 8.0*1024),
+	mkz(8.0*1024, 3.0*1024),
+	mkz(-9.0*1024, -2.0*1024),
+	mkz(-2.0*1024, 9.0*1024),
+	mkz(3.0*1024, -8.0*1024),
+	mkz(-8.0*1024, 1.0*1024),
+	mkz(9.0*1024, -2.0*1024),
+	mkz(-2.0*1024, -9.0*1024),
+	mkz(1.0*1024, 8.0*1024),
+	mkz(8.0*1024, -1.0*1024),
+	mkz(-9.0*1024, 2.0*1024),
+	mkz(2.0*1024, 9.0*1024),
+	mkz(-1.0*1024, -8.0*1024),
+	mkz(-4.0*1024, -3.0*1024),
+	mkz(5.0*1024, 2.0*1024),
+	mkz(2.0*1024, -5.0*1024),
+	mkz(-3.0*1024, 4.0*1024),
+	mkz(4.0*1024, 3.0*1024),
+	mkz(-5.0*1024, -2.0*1024),
+	mkz(-2.0*1024, 5.0*1024),
+	mkz(3.0*1024, -4.0*1024),
+	mkz(-4.0*1024, 1.0*1024),
+	mkz(5.0*1024, -2.0*1024),
+	mkz(-2.0*1024, -5.0*1024),
+	mkz(1.0*1024, 4.0*1024),
+	mkz(4.0*1024, -1.0*1024),
+	mkz(-5.0*1024, 2.0*1024),
+	mkz(2.0*1024, 5.0*1024),
+	mkz(-1.0*1024, -4.0*1024),
+	mkz(4.0*1024, -3.0*1024),
+	mkz(-3.0*1024, 2.0*1024),
+	mkz(2.0*1024, 3.0*1024),
+	mkz(-3.0*1024, -4.0*1024),
+	mkz(-4.0*1024, 3.0*1024),
+	mkz(3.0*1024, -2.0*1024),
+	mkz(-2.0*1024, -3.0*1024),
+	mkz(3.0*1024, 4.0*1024),
+	mkz(4.0*1024, 1.0*1024),
+	mkz(-3.0*1024, -2.0*1024),
+	mkz(-2.0*1024, 3.0*1024),
+	mkz(1.0*1024, -4.0*1024),
+	mkz(-4.0*1024, -1.0*1024),
+	mkz(3.0*1024, 2.0*1024),
+	mkz(2.0*1024, -3.0*1024),
+	mkz(-1.0*1024, 4.0*1024),
+	mkz(0.0*1024, -3.0*1024),
+	mkz(1.0*1024, 2.0*1024),
+	mkz(2.0*1024, -1.0*1024),
+	mkz(-3.0*1024, 0.0*1024),
+	mkz(0.0*1024, 3.0*1024),
+	mkz(-1.0*1024, -2.0*1024),
+	mkz(-2.0*1024, 1.0*1024),
+	mkz(3.0*1024, 0.0*1024),
+	mkz(0.0*1024, 1.0*1024),
+	mkz(1.0*1024, -2.0*1024),
+	mkz(-2.0*1024, -1.0*1024),
+	mkz(1.0*1024, 0.0*1024),
+	mkz(0.0*1024, -1.0*1024),
+	mkz(-1.0*1024, 2.0*1024),
+	mkz(2.0*1024, 1.0*1024),
+	mkz(-1.0*1024, 0.0*1024),
+	mkz(8.0*1024, -3.0*1024),
+	mkz(-7.0*1024, 2.0*1024),
+	mkz(2.0*1024, 7.0*1024),
+	mkz(-3.0*1024, -8.0*1024),
+	mkz(-8.0*1024, 3.0*1024),
+	mkz(7.0*1024, -2.0*1024),
+	mkz(-2.0*1024, -7.0*1024),
+	mkz(3.0*1024, 8.0*1024),
+	mkz(8.0*1024, 1.0*1024),
+	mkz(-7.0*1024, -2.0*1024),
+	mkz(-2.0*1024, 7.0*1024),
+	mkz(1.0*1024, -8.0*1024),
+	mkz(-8.0*1024, -1.0*1024),
+	mkz(7.0*1024, 2.0*1024),
+	mkz(2.0*1024, -7.0*1024),
+	mkz(-1.0*1024, 8.0*1024),
+	mkz(-4.0*1024, -7.0*1024),
+	mkz(5.0*1024, 6.0*1024),
+	mkz(6.0*1024, -5.0*1024),
+	mkz(-7.0*1024, 4.0*1024),
+	mkz(4.0*1024, 7.0*1024),
+	mkz(-5.0*1024, -6.0*1024),
+	mkz(-6.0*1024, 5.0*1024),
+	mkz(7.0*1024, -4.0*1024),
+	mkz(-4.0*1024, 5.0*1024),
+	mkz(5.0*1024, -6.0*1024),
+	mkz(-6.0*1024, -5.0*1024),
+	mkz(5.0*1024, 4.0*1024),
+	mkz(4.0*1024, -5.0*1024),
+	mkz(-5.0*1024, 6.0*1024),
+	mkz(6.0*1024, 5.0*1024),
+	mkz(-5.0*1024, -4.0*1024),
+	mkz(4.0*1024, -7.0*1024),
+	mkz(-3.0*1024, 6.0*1024),
+	mkz(6.0*1024, 3.0*1024),
+	mkz(-7.0*1024, -4.0*1024),
+	mkz(-4.0*1024, 7.0*1024),
+	mkz(3.0*1024, -6.0*1024),
+	mkz(-6.0*1024, -3.0*1024),
+	mkz(7.0*1024, 4.0*1024),
+	mkz(4.0*1024, 5.0*1024),
+	mkz(-3.0*1024, -6.0*1024),
+	mkz(-6.0*1024, 3.0*1024),
+	mkz(5.0*1024, -4.0*1024),
+	mkz(-4.0*1024, -5.0*1024),
+	mkz(3.0*1024, 6.0*1024),
+	mkz(6.0*1024, -3.0*1024),
+	mkz(-5.0*1024, 4.0*1024),
+	mkz(0.0*1024, -7.0*1024),
+	mkz(1.0*1024, 6.0*1024),
+	mkz(6.0*1024, -1.0*1024),
+	mkz(-7.0*1024, 0.0*1024),
+	mkz(0.0*1024, 7.0*1024),
+	mkz(-1.0*1024, -6.0*1024),
+	mkz(-6.0*1024, 1.0*1024),
+	mkz(7.0*1024, 0.0*1024),
+	mkz(0.0*1024, 5.0*1024),
+	mkz(1.0*1024, -6.0*1024),
+	mkz(-6.0*1024, -1.0*1024),
+	mkz(5.0*1024, 0.0*1024),
+	mkz(0.0*1024, -5.0*1024),
+	mkz(-1.0*1024, 6.0*1024),
+	mkz(6.0*1024, 1.0*1024),
+	mkz(-5.0*1024, 0.0*1024)
 };
 
-static const complex constellation12000[64] = {
-	mkz(7.0f, 1.0f),
-	mkz(-5.0f, -1.0f),
-	mkz(-1.0f, 5.0f),
-	mkz(1.0f, -7.0f),
-	mkz(-7.0f, -1.0f),
-	mkz(5.0f, 1.0f),
-	mkz(1.0f, -5.0f),
-	mkz(-1.0f, 7.0f),
-	mkz(3.0f, -3.0f),
-	mkz(-1.0f, 3.0f),
-	mkz(3.0f, 1.0f),
-	mkz(-3.0f, -3.0f),
-	mkz(-3.0f, 3.0f),
-	mkz(1.0f, -3.0f),
-	mkz(-3.0f, -1.0f),
-	mkz(3.0f, 3.0f),
-	mkz(7.0f, -7.0f),
-	mkz(-5.0f, 7.0f),
-	mkz(7.0f, 5.0f),
-	mkz(-7.0f, -7.0f),
-	mkz(-7.0f, 7.0f),
-	mkz(5.0f, -7.0f),
-	mkz(-7.0f, -5.0f),
-	mkz(7.0f, 7.0f),
-	mkz(-1.0f, -7.0f),
-	mkz(3.0f, 7.0f),
-	mkz(7.0f, -3.0f),
-	mkz(-7.0f, 1.0f),
-	mkz(1.0f, 7.0f),
-	mkz(-3.0f, -7.0f),
-	mkz(-7.0f, 3.0f),
-	mkz(7.0f, -1.0f),
-	mkz(3.0f, 5.0f),
-	mkz(-1.0f, -5.0f),
-	mkz(-5.0f, 1.0f),
-	mkz(5.0f, -3.0f),
-	mkz(-3.0f, -5.0f),
-	mkz(1.0f, 5.0f),
-	mkz(5.0f, -1.0f),
-	mkz(-5.0f, 3.0f),
-	mkz(-1.0f, 1.0f),
-	mkz(3.0f, -1.0f),
-	mkz(-1.0f, -3.0f),
-	mkz(1.0f, 1.0f),
-	mkz(1.0f, -1.0f),
-	mkz(-3.0f, 1.0f),
-	mkz(1.0f, 3.0f),
-	mkz(-1.0f, -1.0f),
-	mkz(-5.0f, 5.0f),
-	mkz(7.0f, -5.0f),
-	mkz(-5.0f, -7.0f),
-	mkz(5.0f, 5.0f),
-	mkz(5.0f, -5.0f),
-	mkz(-7.0f, 5.0f),
-	mkz(5.0f, 7.0f),
-	mkz(-5.0f, -5.0f),
-	mkz(-5.0f, -3.0f),
-	mkz(7.0f, 3.0f),
-	mkz(3.0f, -7.0f),
-	mkz(-3.0f, 5.0f),
-	mkz(5.0f, 3.0f),
-	mkz(-7.0f, -3.0f),
-	mkz(-3.0f, 7.0f),
-	mkz(3.0f, -5.0f),
+static const complexi constellation12000[64] = {
+	mkz(7.0*1024, 1.0*1024),
+	mkz(-5.0*1024, -1.0*1024),
+	mkz(-1.0*1024, 5.0*1024),
+	mkz(1.0*1024, -7.0*1024),
+	mkz(-7.0*1024, -1.0*1024),
+	mkz(5.0*1024, 1.0*1024),
+	mkz(1.0*1024, -5.0*1024),
+	mkz(-1.0*1024, 7.0*1024),
+	mkz(3.0*1024, -3.0*1024),
+	mkz(-1.0*1024, 3.0*1024),
+	mkz(3.0*1024, 1.0*1024),
+	mkz(-3.0*1024, -3.0*1024),
+	mkz(-3.0*1024, 3.0*1024),
+	mkz(1.0*1024, -3.0*1024),
+	mkz(-3.0*1024, -1.0*1024),
+	mkz(3.0*1024, 3.0*1024),
+	mkz(7.0*1024, -7.0*1024),
+	mkz(-5.0*1024, 7.0*1024),
+	mkz(7.0*1024, 5.0*1024),
+	mkz(-7.0*1024, -7.0*1024),
+	mkz(-7.0*1024, 7.0*1024),
+	mkz(5.0*1024, -7.0*1024),
+	mkz(-7.0*1024, -5.0*1024),
+	mkz(7.0*1024, 7.0*1024),
+	mkz(-1.0*1024, -7.0*1024),
+	mkz(3.0*1024, 7.0*1024),
+	mkz(7.0*1024, -3.0*1024),
+	mkz(-7.0*1024, 1.0*1024),
+	mkz(1.0*1024, 7.0*1024),
+	mkz(-3.0*1024, -7.0*1024),
+	mkz(-7.0*1024, 3.0*1024),
+	mkz(7.0*1024, -1.0*1024),
+	mkz(3.0*1024, 5.0*1024),
+	mkz(-1.0*1024, -5.0*1024),
+	mkz(-5.0*1024, 1.0*1024),
+	mkz(5.0*1024, -3.0*1024),
+	mkz(-3.0*1024, -5.0*1024),
+	mkz(1.0*1024, 5.0*1024),
+	mkz(5.0*1024, -1.0*1024),
+	mkz(-5.0*1024, 3.0*1024),
+	mkz(-1.0*1024, 1.0*1024),
+	mkz(3.0*1024, -1.0*1024),
+	mkz(-1.0*1024, -3.0*1024),
+	mkz(1.0*1024, 1.0*1024),
+	mkz(1.0*1024, -1.0*1024),
+	mkz(-3.0*1024, 1.0*1024),
+	mkz(1.0*1024, 3.0*1024),
+	mkz(-1.0*1024, -1.0*1024),
+	mkz(-5.0*1024, 5.0*1024),
+	mkz(7.0*1024, -5.0*1024),
+	mkz(-5.0*1024, -7.0*1024),
+	mkz(5.0*1024, 5.0*1024),
+	mkz(5.0*1024, -5.0*1024),
+	mkz(-7.0*1024, 5.0*1024),
+	mkz(5.0*1024, 7.0*1024),
+	mkz(-5.0*1024, -5.0*1024),
+	mkz(-5.0*1024, -3.0*1024),
+	mkz(7.0*1024, 3.0*1024),
+	mkz(3.0*1024, -7.0*1024),
+	mkz(-3.0*1024, 5.0*1024),
+	mkz(5.0*1024, 3.0*1024),
+	mkz(-7.0*1024, -3.0*1024),
+	mkz(-3.0*1024, 7.0*1024),
+	mkz(3.0*1024, -5.0*1024),
 };
 
-static const complex constellation9600[32] = {
-	mkz(-8.0f, 2.0f),
-	mkz(-6.0f, -4.0f),
-	mkz(-4.0f, 6.0f),
-	mkz(2.0f, 8.0f),
-	mkz(8.0f, -2.0f),
-	mkz(6.0f, 4.0f),
-	mkz(4.0f, -6.0f),
-	mkz(-2.0f, -8.0f),
-	mkz(0.0f, 2.0f),
-	mkz(-6.0f, 4.0f),
-	mkz(4.0f, 6.0f),
-	mkz(2.0f, 0.0f),
-	mkz(0.0f, -2.0f),
-	mkz(6.0f, -4.0f),
-	mkz(-4.0f, -6.0f),
-	mkz(-2.0f, 0.0f),
-	mkz(0.0f, -6.0f),
-	mkz(2.0f, -4.0f),
-	mkz(-4.0f, -2.0f),
-	mkz(-6.0f, 0.0f),
-	mkz(0.0f, 6.0f),
-	mkz(-2.0f, 4.0f),
-	mkz(4.0f, 2.0f),
-	mkz(6.0f, 0.0f),
-	mkz(8.0f, 2.0f),
-	mkz(2.0f, 4.0f),
-	mkz(4.0f, -2.0f),
-	mkz(2.0f, -8.0f),
-	mkz(-8.0f, -2.0f),
-	mkz(-2.0f, -4.0f),
-	mkz(-4.0f, 2.0f),
-	mkz(-2.0f, 8.0f)
+static const complexi constellation9600[32] = {
+	mkz(-8.0*1024, 2.0*1024),
+	mkz(-6.0*1024, -4.0*1024),
+	mkz(-4.0*1024, 6.0*1024),
+	mkz(2.0*1024, 8.0*1024),
+	mkz(8.0*1024, -2.0*1024),
+	mkz(6.0*1024, 4.0*1024),
+	mkz(4.0*1024, -6.0*1024),
+	mkz(-2.0*1024, -8.0*1024),
+	mkz(0.0*1024, 2.0*1024),
+	mkz(-6.0*1024, 4.0*1024),
+	mkz(4.0*1024, 6.0*1024),
+	mkz(2.0*1024, 0.0*1024),
+	mkz(0.0*1024, -2.0*1024),
+	mkz(6.0*1024, -4.0*1024),
+	mkz(-4.0*1024, -6.0*1024),
+	mkz(-2.0*1024, 0.0*1024),
+	mkz(0.0*1024, -6.0*1024),
+	mkz(2.0*1024, -4.0*1024),
+	mkz(-4.0*1024, -2.0*1024),
+	mkz(-6.0*1024, 0.0*1024),
+	mkz(0.0*1024, 6.0*1024),
+	mkz(-2.0*1024, 4.0*1024),
+	mkz(4.0*1024, 2.0*1024),
+	mkz(6.0*1024, 0.0*1024),
+	mkz(8.0*1024, 2.0*1024),
+	mkz(2.0*1024, 4.0*1024),
+	mkz(4.0*1024, -2.0*1024),
+	mkz(2.0*1024, -8.0*1024),
+	mkz(-8.0*1024, -2.0*1024),
+	mkz(-2.0*1024, -4.0*1024),
+	mkz(-4.0*1024, 2.0*1024),
+	mkz(-2.0*1024, 8.0*1024)
 };
 
-static const complex constellation7200[16] = {
-	mkz(6.0f, -6.0f),
-	mkz(-2.0f, 6.0f),
-	mkz(6.0f, 2.0f),
-	mkz(-6.0f, -6.0f),
-	mkz(-6.0f, 6.0f),
-	mkz(2.0f, -6.0f),
-	mkz(-6.0f, -2.0f),
-	mkz(6.0f, 6.0f),
-	mkz(-2.0f, 2.0f),
-	mkz(6.0f, -2.0f),
-	mkz(-2.0f, -6.0f),
-	mkz(2.0f, 2.0f),
-	mkz(2.0f, -2.0f),
-	mkz(-6.0f, 2.0f),
-	mkz(2.0f, 6.0f),
-	mkz(-2.0f, -2.0f)
+static const complexi constellation7200[16] = {
+	mkz(6.0*1024, -6.0*1024),
+	mkz(-2.0*1024, 6.0*1024),
+	mkz(6.0*1024, 2.0*1024),
+	mkz(-6.0*1024, -6.0*1024),
+	mkz(-6.0*1024, 6.0*1024),
+	mkz(2.0*1024, -6.0*1024),
+	mkz(-6.0*1024, -2.0*1024),
+	mkz(6.0*1024, 6.0*1024),
+	mkz(-2.0*1024, 2.0*1024),
+	mkz(6.0*1024, -2.0*1024),
+	mkz(-2.0*1024, -6.0*1024),
+	mkz(2.0*1024, 2.0*1024),
+	mkz(2.0*1024, -2.0*1024),
+	mkz(-6.0*1024, 2.0*1024),
+	mkz(2.0*1024, 6.0*1024),
+	mkz(-2.0*1024, -2.0*1024)
 };
 
 #endif
--- attrafax-0.9/include/internal/modems/v17slicer.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/modems/v17slicer.h	2010-08-14 12:47:23.000000000 +0300
@@ -18,10 +18,13 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
-
 #ifndef _V17SLICER_
 #define _V17SLICER_
 
--- attrafax-0.9/include/internal/modems/v17txrx.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/modems/v17txrx.h	2010-08-14 12:43:08.000000000 +0300
@@ -18,6 +18,10 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
@@ -58,9 +62,9 @@
 	v17_dstate diff;
 	int pacc, ph, ploop;
 	float gain;
-	complex fbuf[_V17CONST_FLEN];
+	complexi fbuf[_V17CONST_FLEN]; //FxP: values scaled 2^10
 	int p;
-	complex baud;
+	complexi baud; //FxP: value scaled 2^10
 	getbit_f getbit;
 	void *context;
 } v17tx_state;
--- attrafax-0.9/include/internal/modems/v17v29rxfilter.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/modems/v17v29rxfilter.h	2010-08-14 14:02:33.000000000 +0300
@@ -34,7 +34,7 @@
 #define L       144
 
 //FxP filter scaled to fit in 2^14
-static const float f[N*L+1] = {
+static const int f[N*L+1] = {
 35,
 34,
 33,
--- attrafax-0.9/include/internal/modems/v17v29txfilter.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/modems/v17v29txfilter.h	2010-08-14 12:43:54.000000000 +0300
@@ -17,54 +17,59 @@
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ * Foundation, Inc, 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
 
 #define DN	41
-#define dfGAIN	9.9302558521e+00f
+#define dfGAIN	162697 //FxP: scaled 2^14
 
-static float df[DN] = {
-	4.2441325942e-02f,
-	4.0254818594e-02f,
-	2.6718191327e-02f,
-	1.3810230973e-03f,
-	-3.3946159035e-02f,
-	-7.5026365057e-02f,
-	-1.1540978635e-01f,
-	-1.4703962978e-01f,
-	-1.6119996251e-01f,
-	-1.4969513265e-01f,
-	-1.0610329554e-01f,
-	-2.6921409040e-02f,
-	8.7578756558e-02f,
-	2.3293328640e-01f,
-	4.0060122847e-01f,
-	5.7863247521e-01f,
-	7.5282865047e-01f,
-	9.0826274029e-01f,
-	1.0309661086e+00f,
-	1.1095611787e+00f,
-	1.1366197646e+00f,
-	1.1095611787e+00f,
-	1.0309661086e+00f,
-	9.0826274029e-01f,
-	7.5282865047e-01f,
-	5.7863247521e-01f,
-	4.0060122847e-01f,
-	2.3293328640e-01f,
-	8.7578756558e-02f,
-	-2.6921409040e-02f,
-	-1.0610329554e-01f,
-	-1.4969513265e-01f,
-	-1.6119996251e-01f,
-	-1.4703962978e-01f,
-	-1.1540978635e-01f,
-	-7.5026365057e-02f,
-	-3.3946159035e-02f,
-	1.3810230973e-03f,
-	2.6718191327e-02f,
-	4.0254818594e-02f,
-	4.2441325942e-02f
+//FxP: filter scaled 2^14
+static int df[DN] = {
+	695,
+	660,
+	438,
+	23,
+	-556,
+	-1229,
+	-1891,
+	-2409,
+	-2641,
+	-2453,
+	-1738,
+	-441,
+	1435,
+	3816,
+	6563,
+	9480,
+	12334,
+	14881,
+	16891,
+	18179,
+	18622,
+	18179,
+	16891,
+	14881,
+	12334,
+	9480,
+	6563,
+	3816,
+	1435,
+	-441,
+	-1738,
+	-2453,
+	-2641,
+	-2409,
+	-1891,
+	-1229,
+	-556,
+	23,
+	438,
+	660,
+	695
 };
--- attrafax-0.9/include/internal/modems/v21txrx.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/modems/v21txrx.h	2010-08-14 12:49:12.000000000 +0300
@@ -18,10 +18,13 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
-
 #ifndef _V21TXRX_
 #define _V21TXRX_
 
--- attrafax-0.9/include/internal/modems/v27ter2400rxfilter.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/modems/v27ter2400rxfilter.h	2010-08-14 14:03:47.000000000 +0300
@@ -33,7 +33,7 @@
 #define N	27
 #define L	12
 
-static const float f[N*L+1] = {
+static const int f[N*L+1] = {
 679	,
 688	,
 695	,
--- attrafax-0.9/include/internal/modems/v27ter2400txfilter.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/modems/v27ter2400txfilter.h	2010-08-14 14:01:22.000000000 +0300
@@ -18,94 +18,99 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
 
 #define DN	81
-#define dfGAIN	1.9818800716e+01f
+#define dfGAIN	162355 //FxP gain scaled 2^13
 
+//FxP filter scaled 2^13
 /* -r `echo '1200/(2*24000)' | bc -l` 0.5 81 -l */
-static float df[DN] = {
-	4.2440974566e-02f,
-	4.2661353251e-02f,
-	4.0254504871e-02f,
-	3.4981850192e-02f,
-	2.6717983650e-02f,
-	1.5468047722e-02f,
-	1.3809667269e-03f,
-	-1.5242286226e-02f,
-	-3.3946051848e-02f,
-	-5.4123440516e-02f,
-	-7.5026117741e-02f,
-	-9.5780408547e-02f,
-	-1.1540945289e-01f,
-	-1.3286088742e-01f,
-	-1.4703928298e-01f,
-	-1.5684234338e-01f,
-	-1.6119967804e-01f,
-	-1.5911280948e-01f,
-	-1.4969497259e-01f,
-	-1.3220921245e-01f,
-	-1.0610329482e-01f,
-	-7.1040009153e-02f,
-	-2.6921567819e-02f,
-	2.6093017258e-02f,
-	8.7578472932e-02f,
-	1.5684234382e-01f,
-	2.3293293982e-01f,
-	3.1465616239e-01f,
-	4.0060089458e-01f,
-	4.8917231921e-01f,
-	5.7863222688e-01f,
-	6.6714510188e-01f,
-	7.5282854192e-01f,
-	8.3380638535e-01f,
-	9.0826279524e-01f,
-	9.7449548991e-01f,
-	1.0309663151e+00f,
-	1.0763474269e+00f,
-	1.1095614918e+00f,
-	1.1298145099e+00f,
-	1.1366201160e+00f,
-	1.1298145099e+00f,
-	1.1095614918e+00f,
-	1.0763474269e+00f,
-	1.0309663151e+00f,
-	9.7449548991e-01f,
-	9.0826279524e-01f,
-	8.3380638535e-01f,
-	7.5282854192e-01f,
-	6.6714510188e-01f,
-	5.7863222688e-01f,
-	4.8917231921e-01f,
-	4.0060089458e-01f,
-	3.1465616239e-01f,
-	2.3293293982e-01f,
-	1.5684234382e-01f,
-	8.7578472932e-02f,
-	2.6093017258e-02f,
-	-2.6921567819e-02f,
-	-7.1040009153e-02f,
-	-1.0610329482e-01f,
-	-1.3220921245e-01f,
-	-1.4969497259e-01f,
-	-1.5911280948e-01f,
-	-1.6119967804e-01f,
-	-1.5684234338e-01f,
-	-1.4703928298e-01f,
-	-1.3286088742e-01f,
-	-1.1540945289e-01f,
-	-9.5780408547e-02f,
-	-7.5026117741e-02f,
-	-5.4123440516e-02f,
-	-3.3946051848e-02f,
-	-1.5242286226e-02f,
-	1.3809667269e-03f,
-	1.5468047722e-02f,
-	2.6717983650e-02f,
-	3.4981850192e-02f,
-	4.0254504871e-02f,
-	4.2661353251e-02f,
-	4.2440974566e-02f
+static int df[DN] = {
+	348,
+	349,
+	330,
+	287,
+	219,	
+	127,
+	11,
+	-125,
+	-278,
+	-443,
+	-615,
+	-785,
+	-945,
+	-1088,
+	-1205,
+	-1285,
+	-1321,
+	-1303,
+	-1226,
+	-1083,
+	-869,
+	-582,
+	-221,
+	214,
+	717,
+	1285,
+	1908,
+	2578,
+	3282,
+	4007,
+	4740,
+	5465,
+	6167,
+	6831,
+	7440,
+	7983,
+	8446,
+	8817,
+	9090,
+	9255,
+	9311,
+	9255,
+	9090,
+	8817,
+	8446,
+	7983,
+	7440,
+	6831,
+	6167,
+	5465,
+	4740,
+	4007,
+	3282,
+	2578,
+	1908,
+	1285,
+	717,
+	214,
+	-221,
+	-582,
+	-869,
+	-1083,
+	-1226,
+	-1303,
+	-1321,
+	-1285,
+	-1205,
+	-1088,
+	-945,
+	-785,
+	-615,
+	-443,
+	-278,
+	-125,
+	11,
+	127,
+	219,
+	287,
+	330,
+	349,
+	348
 };
--- attrafax-0.9/include/internal/modems/v27ter4800rxfilter.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/modems/v27ter4800rxfilter.h	2010-08-14 14:04:25.000000000 +0300
@@ -33,7 +33,7 @@
 #define N	27
 #define L	8
 
-static const float f[N*L+1] = {
+static const int f[N*L+1] = {
 -303	,
 -314	,
 -320	,
--- attrafax-0.9/include/internal/modems/v27ter4800txfilter.h	2010-01-29 16:18:03.000000000 +0200
+++ attrafax-0.9/include/internal/modems/v27ter4800txfilter.h	2010-08-14 14:01:31.000000000 +0300
@@ -18,43 +18,48 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
-
-#define sfGAIN	4.9607861256f
+#define sfGAIN	81278 //FxP gain scaled 2^14
 #define SN	31
 
-static float sf[SN] = {
-	3.0314951873e-03f,
-	-1.3403215613e-02f,
-	-1.9447728088e-02f,
-	-5.3888046965e-03f,
-	2.2816335022e-02f,
-	4.2441444177e-02f,
-	2.6718247641e-02f,
-	-3.3946208482e-02f,
-	-1.1540990104e-01f,
-	-1.6120005028e-01f,
-	-1.0610328622e-01f,
-	8.7578855264e-02f,
-	4.0060133736e-01f,
-	7.5282868214e-01f,
-	1.0309660372e+00f,
-	1.1366196464e+00f,
-	1.0309660372e+00f,
-	7.5282868214e-01f,
-	4.0060133736e-01f,
-	8.7578855264e-02f,
-	-1.0610328622e-01f,
-	-1.6120005028e-01f,
-	-1.1540990104e-01f,
-	-3.3946208482e-02f,
-	2.6718247641e-02f,
-	4.2441444177e-02f,
-	2.2816335022e-02f,
-	-5.3888046965e-03f,
-	-1.9447728088e-02f,
-	-1.3403215613e-02f,
-	3.0314951873e-03f
+
+//FxP filter scaled 2^14
+static int sf[SN] = {
+	50,
+	-220,
+	-319,
+	-88,
+	374,
+	695,
+	438,
+	-556,
+	-1891,
+	-2641,
+	-1738,
+	1435,
+	6563,
+	12334,
+	16891,
+	18622,
+	16891,
+	12334,
+	6563,
+	1435,
+	-1738,
+	-2641,
+	-1891,
+	-556,
+	438,
+	695,
+	374,
+	-88,
+	-319,
+	-220,
+	50
 };
--- attrafax-0.9/include/internal/modems/v27tertxrx.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/modems/v27tertxrx.h	2010-08-14 13:31:20.000000000 +0300
@@ -18,10 +18,13 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
-
 #ifndef _V27TERTXRX_
 #define _V27TERTXRX_
 
@@ -44,9 +47,9 @@
 	v27ter_sstate scr;
 	int pacc, ph;
 	float gain;
-	complex fbuf[_V27TERCONST_FLEN];
+	complexi fbuf[_V27TERCONST_FLEN];
 	int p;
-	complex baud;
+	complexi baud;
 	getbit_f getbit;
 	void *context;
 } v27tertx_state;
--- attrafax-0.9/include/internal/modems/v29txrx.h	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/include/internal/modems/v29txrx.h	2010-08-14 14:12:04.000000000 +0300
@@ -18,10 +18,13 @@
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111-1301  USA
+ *
+ * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
+ * The modem is much faster on the CPU without floating point support now.
+ * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  */
 
 
-
 #ifndef _V29TXRX_
 #define _V29TXRX_
 
@@ -42,13 +45,13 @@
 	int cons_state, symbol, end;
 	txstage_f stage;
 	int rate;
-	const complex *AB, *CD;
+	const complexi *AB, *CD;
 	v29_sstate scr, rnd;
 	int pacc, ph, ploop;
 	float gain;
-	complex fbuf[_V29CONST_FLEN];
+	complexi fbuf[_V29CONST_FLEN]; //FxP: values scaled 2^10
 	int p;
-	complex baud;
+	complexi baud;		       //FxP: value scaled 2^10
 	getbit_f getbit;
 	void *context;
 } v29tx_state;
--- attrafax-0.9/src/modems/v17tx.c	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/src/modems/v17tx.c	2010-08-14 13:15:58.000000000 +0300
@@ -23,7 +23,6 @@
  * The modem is much faster on the CPU without floating point support now.
  * Copyright @ 2010 Switchfin <dpn@switchfin.org>
  *
- * Note that V29 transmitter is kept floating point as it is already fast.
  * Can be optimized later 
 */
 
@@ -42,12 +41,13 @@
 #include "internal/modems/v17txrx.h"
 #include "internal/modems/v17constellation.h"
 
-static const complex ABCD_seq[4] = {
-	mkz(-6.0f, -2.0f), mkz(2.0f, -6.0f), mkz(6.0f, 2.0f), mkz(-2.0f, 6.0f)
+//FxP: constelations scaled 2^10
+static const complexi ABCD_seq[4] = {
+	mkz(-6.0*1024, -2.0*1024), mkz(2.0*1024, -6.0*1024), mkz(6.0*1024, 2.0*1024), mkz(-2.0*1024, 6.0*1024)
 };
 
-static const complex CDBA_seq[4] = {
-	mkz(6.0f, 2.0f), mkz(-2.0f, 6.0f), mkz(2.0f, -6.0f), mkz(-6.0f, -2.0f)
+static const complexi CDBA_seq[4] = {
+	mkz(6.0*1024, 2.0*1024), mkz(-2.0*1024, 6.0*1024), mkz(2.0*1024, -6.0*1024), mkz(-6.0*1024, -2.0*1024)
 };
 
 static const int diffe[16][2] = {
@@ -64,15 +64,15 @@
 	{ 2, 0, 3, 1 }
 };
 
-static complex tep(void *_state);
-static complex silence(void *_state);
-static complex abcd(void *_state);
-static complex cdba(void *_state);
-static complex bri(void *_state);
-static complex ones(void *_state);
-static complex running(void *_state);
-static complex end1(void *_state);
-static complex end2(void *_state);
+static complexi tep(void *_state);
+static complexi silence(void *_state);
+static complexi abcd(void *_state);
+static complexi cdba(void *_state);
+static complexi bri(void *_state);
+static complexi ones(void *_state);
+static complexi running(void *_state);
+static complexi end1(void *_state);
+static complexi end2(void *_state);
 
 static void diff_enc(v17_dstate *state, int q1, int q2, int *y1, int *y2) {
 	q1 = ((q1 << 3) | (q2 << 2) | (state->y1 << 1) | state->y2) & 15;
@@ -136,7 +136,7 @@
 	default: \
 		fprintf(stderr, "Bad rate - %d\n", state->rate); \
 		fflush(stderr); \
-		return _C0; \
+		return _C0i; \
 	}
 
 #define SEGtep1	468
@@ -148,7 +148,8 @@
 #define SEGEND1	32 
 #define SEGEND2	48
 
-static complex tep(void *_state) {
+static complexi tep(void *_state) {
+//FxP: return value scaled 2^10
 	v17tx_state *state = (v17tx_state *)_state;
 	
 	state->symbol++;
@@ -156,10 +157,11 @@
 		state->stage = &silence;
 		state->symbol = 0;
 	}
-	return _Cr1;
+	return _Cr1i;
 }
 
-static complex silence(void *_state) {
+static complexi silence(void *_state) {
+//FxP: return value scaled 2^10
 	v17tx_state *state = (v17tx_state *)_state;
 	
 	state->symbol++;
@@ -167,10 +169,11 @@
 		state->stage = &abcd;
 		state->symbol = 0;
 	}
-	return _C0;
+	return _C0i;
 }
 
-static complex abcd(void *_state) {
+static complexi abcd(void *_state) {
+//FxP: return value scaled 2^10
 	v17tx_state *state = (v17tx_state *)_state;
 	
 	state->symbol++;
@@ -181,7 +184,8 @@
 	return ABCD_seq[(state->bpABABp++) & 1];
 }
 
-static complex cdba(void *_state) {
+static complexi cdba(void *_state) {
+//FxP: return value scaled 2^10
 	v17tx_state *state = (v17tx_state *)_state;
 	
 	state->symbol++;
@@ -195,7 +199,8 @@
 	return CDBA_seq[state->bpABABp];
 }
 
-static complex bri(void *_state) {
+static complexi bri(void *_state) {
+//FxP: return value scaled 2^10
 	v17tx_state *state = (v17tx_state *)_state;
 	int t0;
 	
@@ -213,7 +218,8 @@
 	return CDBA_seq[state->bpABABp];
 }
 
-static complex ones(void *_state) {
+static complexi ones(void *_state) {
+//FxP: return value scaled 2^10
 	v17tx_state *state = (v17tx_state *)_state;
 	int t0, q1, q2, y0, y1, y2;
 	
@@ -225,14 +231,16 @@
 	GENERATE(scramble(&state->scr, 1));
 }
 
-static complex running(void *_state) {
+static complexi running(void *_state) {
+//FxP: return value scaled 2^10
 	v17tx_state *state = (v17tx_state *)_state;
 	int t0, q1, q2, y0, y1, y2;
 	
 	GENERATE(getbit(state));
 }
 
-static complex end1(void *_state) {
+static complexi end1(void *_state) {
+//FxP: return value scaled 2^10
 	v17tx_state *state = (v17tx_state *)_state;
 	int t0, q1, q2, y0, y1, y2;
 	
@@ -244,38 +252,40 @@
 	GENERATE(scramble(&state->scr, 1));
 }
 
-static complex end2(void *_state) {
+static complexi end2(void *_state) {
+//FxP: return value scaled 2^10
 	v17tx_state *state = (v17tx_state *)_state;
 	
 	state->symbol++;
 	if (state->symbol == SEGEND2) state->end = 1;
-	return _C0;
+	return _C0i;
 }
 
 #include "internal/modems/v17v29txfilter.h"
 
-static void cput(v17tx_state *state, complex z) {
+static void cput(v17tx_state *state, complexi z) {
+//FxP: z scaled 2^10
 	state->fbuf[state->p] = state->fbuf[state->p + DN] = z;
 	state->p = (state->p + 1) % DN;
 	return;
 }
 
-static complex cfir(v17tx_state *state) {
-	complex acc, t0;
+static complexi cfir(v17tx_state *state) {
+//FxP: return value scaled 2^10
+	complexi acc, t0;
 	int j;
 
-	for (j=0, acc=_C0; j<DN; j++) {
+	for (j=0, acc=_C0i; j<DN; j++) {
 		scale2(t0, state->fbuf[j+state->p], df[j]);
 		add2(acc, t0);
 	}
 	scale(acc, 1.0f/dfGAIN);
-	return acc;
+	return acc;			//FxP result seems to match the constelation points 2^10 scaled.
 }
 
 int v17tx(v17tx_state *state, signed short *s, int len) {
 	int j, k;
-	complex t0, t1;
-	complexi t1_;
+	complexi t0, t1;
 
 	for (j=0; j<len; j++) {
 		if (state->end) goto eot;
@@ -287,11 +297,10 @@
 			cput(state, state->baud);
 			if (!k) t0 = cfir(state);
 		}
-		t1_= csynth(state->pacc); //FxP we get t1_ 2^10 scaled. The transmitter we will 
-		scale2_pow2r(t1,t1_,10);  //keep floating as it is simple enought. //So lets descale	
+		t1= csynth(state->pacc); //FxP we get t1 2^10 scaled.
 		con(t1);
 		state->pacc += state->ph;
-		s[j] = (signed short)(pseudosc(t0, t1) * state->gain);
+		s[j] = (signed short)(pseudosc(t0, t1) * state->gain); //FxP state->gain is 2^-20 scaled so s is not scaled.
 	}
 	return len;
 eot:
@@ -316,11 +325,11 @@
 	state->scr.sreg = 3067349u;
 	state->pacc = 0;
 	state->ph = getrate(_V17CONST_CF)/_V17CONST_SPS;
-	state->baud = _C0;
+	state->baud = _C0i;
 	for (j=0; j<_V17CONST_FLEN; j++)
-		state->fbuf[j] = _C0;
+		state->fbuf[j] = _C0i;
 	state->p = 0;
-	state->gain = 1260.0f;
+	state->gain = 1260.0f/1048576.0f; //FxP state->gain is 2^-20 scaled
 	state->tcm.t0 = state->tcm.t1 = state->tcm.t2 = 0U;
 	state->bpABABp = state->shc = 0U;
 	return;
--- attrafax-0.9/src/modems/v21tx.c	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/src/modems/v21tx.c	2010-08-14 13:22:11.000000000 +0300
@@ -40,7 +40,7 @@
 			if ((bit = (*(state->getbit))(state->context)) < 0)
 				goto eob;
 		}
-		s[j] = (signed short)(rsynthcos(state->pacc) * 10); //Penev
+		s[j] = (signed short)(rsynthcos(state->pacc) * 10); //FxP rsynthcos is already 2^10 scaled
 		state->pacc += state->fph[bit];
 	}
 	state->bit = bit;
--- attrafax-0.9/src/modems/v27tertx2400.c	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/src/modems/v27tertx2400.c	2010-08-14 14:09:12.000000000 +0300
@@ -42,22 +42,23 @@
 
 #include "internal/modems/v27tertxrx.h"
 
-static const complex constellation[4] = {
-	mkz(1.0f, 0.0f),
-	mkz(0.0f, 1.0f),
-	mkz(-1.0f, 0.0f),
-	mkz(0.0f, -1.0f),
+//FxP: constelations scaled 2^10
+static const complexi constellation[4] = {
+	mkz(1024, 0),
+	mkz(0, 1024),
+	mkz(-1024, 0),
+	mkz(0, -1024),
 };
 
 static const int considx[4] = { 0, 1, 3, 2 };
 
-static complex tep(void *_state);
-static complex silence(void *_state);
-static complex ph0(void *_state);
-static complex scr(void *_state);
-static complex ones(void *_state);
-static complex running(void *_state);
-static complex end(void *_state);
+static complexi tep(void *_state);
+static complexi silence(void *_state);
+static complexi ph0(void *_state);
+static complexi scr(void *_state);
+static complexi ones(void *_state);
+static complexi running(void *_state);
+static complexi end(void *_state);
 
 static int scramble(v27ter_sstate *state, int bit) {
 	int t0;
@@ -97,7 +98,8 @@
 #define SEG5	8
 #define SEGEND	128
 
-static complex tep(void *_state) {
+static complexi tep(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	
 	state->symbol++;
@@ -105,10 +107,11 @@
 		state->stage = &silence;
 		state->symbol = 0;
 	}
-	return _Cr1;
+	return _Cr1i;
 }
 
-static complex silence(void *_state) {
+static complexi silence(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	
 	state->symbol++;
@@ -116,10 +119,11 @@
 		state->stage = &ph0;
 		state->symbol = 0;
 	}
-	return _C0;
+	return _C0i;
 }
 
-static complex ph0(void *_state) {
+static complexi ph0(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	
 	state->symbol++;
@@ -130,7 +134,8 @@
 	return constellation[state->cons_state = (state->cons_state + 2) & 3];
 }
 
-static complex scr(void *_state) {
+static complexi scr(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	int bit;
 	
@@ -143,7 +148,8 @@
 	return constellation[state->cons_state = (state->cons_state + bit) & 3];
 }
 
-static complex ones(void *_state) {
+static complexi ones(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	int bit;
 	
@@ -155,14 +161,16 @@
 	GENERATE(scramble(&state->scr, 1));
 }
 
-static complex running(void *_state) {
+static complexi running(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	int bit;
 	
 	GENERATE(getbit(state));
 }
 
-static complex end(void *_state) {
+static complexi end(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	int bit;
 	
@@ -173,28 +181,29 @@
 
 #include "internal/modems/v27ter2400txfilter.h"
 
-static void cput(v27tertx_state *state, complex z) {
+static void cput(v27tertx_state *state, complexi z) {
+//FxP: z is scaled 2^10
 	state->fbuf[state->p] = state->fbuf[state->p + DN] = z;
 	state->p = (state->p + 1) % DN;
 	return;
 }
 
-static complex cfir(v27tertx_state *state) {
-	complex acc, t0;
+static complexi cfir(v27tertx_state *state) {
+//FxP: return value scaled 2^10
+	complexi acc, t0;
 	int j;
 
-	for (j=0, acc=_C0; j<DN; j++) {
+	for (j=0, acc=_C0i; j<DN; j++) {
 		scale2(t0, state->fbuf[j+state->p], df[j]);
 		add2(acc, t0);
 	}
 	scale(acc, 1.0f/dfGAIN);
-	return acc;
+	return acc;		//FxP result seems to match the constelation points 2^10 scaled.
 }
 
 int v27tertx2400(v27tertx_state *state, signed short *s, int len) {
 	int j, k;
-	complex t0, t1;
-	complexi t1_;
+	complexi t0, t1;
 	
 	for (j=0; j<len; j++) {
 		if (state->end) goto eot;
@@ -207,11 +216,10 @@
 			if (!k) t0 = cfir(state);
 		}
 
-                t1_= csynth(state->pacc); //FxP we get t1_ 2^10 scaled. The transmitter we will
-                scale2_pow2r(t1,t1_,10);  //keep floating as it is simple enought. So lets descale
+                t1= csynth(state->pacc); //FxP we get t1 2^10 scaled.
 		state->pacc += state->ph;
 		con(t1);
-		s[j] = (signed short)(pseudosc(t0, t1) * state->gain);
+		s[j] = (signed short)(pseudosc(t0, t1) * state->gain); //FxP state->gain is 2^-20 scaled so s is not scaled.
 	}
 	return len;
 eot:
@@ -232,11 +240,11 @@
 	state->scr.scnt32 = 0u;
 	state->pacc = 0;
 	state->ph = getrate(_V27TERCONST_CF)/_V27TERCONST_SPS;
-	state->baud = _C0;
+	state->baud = _C0i;
 	for (j=0; j<_V27TERCONST_FLEN; j++)
-		state->fbuf[j] = _C0;
+		state->fbuf[j] = _C0i;
 	state->p = 0;
-	state->gain = 6486.0f;
+	state->gain = 6486.0f/1048576.0f; //FxP state->gain is 2^-20 scaled
 	return;
 }
 
--- attrafax-0.9/src/modems/v27tertx4800.c	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/src/modems/v27tertx4800.c	2010-08-14 14:10:02.000000000 +0300
@@ -41,26 +41,27 @@
 
 #include "internal/modems/v27tertxrx.h"
 
-static const complex constellation[8] = {
-	mkz(1.0f, 0.0f),
-	mkz((float)M_SQRT2/2.0f, (float)M_SQRT2/2.0f),
-	mkz(0.0f, 1.0f),
-	mkz(-(float)M_SQRT2/2.0f, (float)M_SQRT2/2.0f),
-	mkz(-1.0f, 0.0f),
-	mkz(-(float)M_SQRT2/2.0f, -(float)M_SQRT2/2.0f),
-	mkz(0.0f, -1.0f),
-	mkz((float)M_SQRT2/2.0f, -(float)M_SQRT2/2.0f)
+//FxP: constelations scaled 2^10
+static const complexi constellation[8] = {
+	mkz(1024, 0),
+	mkz((float)M_SQRT2/2.0f*1024, (float)M_SQRT2/2.0f*1024),
+	mkz(0, 1024),
+	mkz(-(float)M_SQRT2/2.0f*1024, (float)M_SQRT2/2.0f*1024),
+	mkz(-1024, 0),
+	mkz(-(float)M_SQRT2/2.0f*1024, -(float)M_SQRT2/2.0f*1024),
+	mkz(0, -1024),
+	mkz((float)M_SQRT2/2.0f*1024, -(float)M_SQRT2/2.0f*1024)
 };
 
 static const int considx[8] = { 1, 0, 2, 3, 6, 7, 5, 4 };
 
-static complex tep(void *_state);
-static complex silence(void *_state);
-static complex ph0(void *_state);
-static complex scr(void *_state);
-static complex ones(void *_state);
-static complex running(void *_state);
-static complex end(void *_state);
+static complexi tep(void *_state);
+static complexi silence(void *_state);
+static complexi ph0(void *_state);
+static complexi scr(void *_state);
+static complexi ones(void *_state);
+static complexi running(void *_state);
+static complexi end(void *_state);
 
 static int scramble(v27ter_sstate *state, int bit) {
 	int t0;
@@ -101,7 +102,8 @@
 #define SEG5	8
 #define SEGEND	128
 
-static complex tep(void *_state) {
+static complexi tep(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	
 	state->symbol++;
@@ -109,10 +111,11 @@
 		state->stage = &silence;
 		state->symbol = 0;
 	}
-	return _Cr1;
+	return _Cr1i;
 }
 
-static complex silence(void *_state) {
+static complexi silence(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	
 	state->symbol++;
@@ -120,10 +123,11 @@
 		state->stage = &ph0;
 		state->symbol = 0;
 	}
-	return _C0;
+	return _C0i;
 }
 
-static complex ph0(void *_state) {
+static complexi ph0(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	
 	state->symbol++;
@@ -134,7 +138,8 @@
 	return constellation[state->cons_state = (state->cons_state + 4) & 7];
 }
 
-static complex scr(void *_state) {
+static complexi scr(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	int bit;
 	
@@ -147,7 +152,8 @@
 	return constellation[state->cons_state = (state->cons_state + bit) & 7];
 }
 
-static complex ones(void *_state) {
+static complexi ones(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	int bit;
 	
@@ -159,14 +165,16 @@
 	GENERATE(scramble(&state->scr, 1));
 }
 
-static complex running(void *_state) {
+static complexi running(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	int bit;
 	
 	GENERATE(getbit(state));
 }
 
-static complex end(void *_state) {
+static complexi end(void *_state) {
+//FxP: return value scaled 2^10
 	v27tertx_state *state = (v27tertx_state *)_state;
 	int bit;
 	
@@ -177,24 +185,25 @@
 
 #include "internal/modems/v27ter4800txfilter.h"
 
-static complex cfilter(v27tertx_state *state, complex z) {
-	complex acc, t0;
+static complexi cfilter(v27tertx_state *state, complexi z) {
+//FxP: z and return value scaled 2^10
+	complexi acc, t0;
 	int j;
 
 	state->fbuf[state->p] = state->fbuf[state->p + SN] = z;
 	state->p = (state->p + 1) % SN;
-	for (j=0, acc=_C0; j<SN; j++) {
+	for (j=0, acc=_C0i; j<SN; j++) {
 		scale2(t0, state->fbuf[j+state->p], sf[j]);
 		add2(acc, t0);
 	}
-	scale(acc, 1.0f/sfGAIN);
+	scale(acc, 1.0f/sfGAIN); 	//FxP result seems to match the constelation points 2^10 scaled.
 	return acc;
 }
 
 int v27tertx(v27tertx_state *state, signed short *s, int len) {
 	int j;
-	complex t0, t1;
-	complexi t1_;	
+	complexi t0, t1;
+	
 	for (j=0; j<len; j++) {
 		if (state->end) goto eot;
 		if ((state->ploop += 1) >= 5) {
@@ -202,11 +211,10 @@
 			state->ploop -= 5;
 		}
 		t0 = cfilter(state, state->baud);
-                t1_= csynth(state->pacc); //FxP we get t1_ 2^10 scaled. The transmitter we will
-                scale2_pow2r(t1,t1_,10);  //keep floating as it is simple enought. So lets descale
+                t1= csynth(state->pacc); //FxP we get t1_ 2^10 scaled.
 		state->pacc += state->ph;
 		con(t1);
-		s[j] = (signed short)(pseudosc(t0, t1) * state->gain);
+		s[j] = (signed short)(pseudosc(t0, t1) * state->gain); 	//FxP state->gain is 2^-20 scaled so s is not scaled.
 	}
 	return len;
 eot:
@@ -227,11 +235,11 @@
 	state->scr.scnt32 = 0u;
 	state->pacc = 0;
 	state->ph = getrate(_V27TERCONST_CF)/_V27TERCONST_SPS;
-	state->baud = _C0;
+	state->baud = _C0i;
 	for (j=0; j<_V27TERCONST_FLEN; j++)
-		state->fbuf[j] = _C0;
+		state->fbuf[j] = _C0i;
 	state->p = 0;
-	state->gain = 6486.0f;
+	state->gain = 6486.0f/1048576.0f; //FxP state->gain is 2^-20 scaled
 	return;
 }
 
--- attrafax-0.9/src/modems/v29tx.c	2010-08-14 14:29:38.000000000 +0300
+++ attrafax-0.9/src/modems/v29tx.c	2010-08-14 14:14:37.000000000 +0300
@@ -22,9 +22,6 @@
  * Dimitar Penev: 4 Aug. 2010 modified to integer arythmetic.
  * The modem is much faster on the CPU without floating point support now.
  * Copyright @ 2010 Switchfin <dpn@switchfin.org>
- *
- * Note that V29 transmitter is kept floating point as it is already fast.
- * Can be optimized later
  */
 
 
@@ -41,85 +38,88 @@
 
 #include "internal/modems/v29txrx.h"
 
-static const complex constellations[4][8] = {
+//FxP: constelations scaled 2^10
+static const complexi constellations[4][8] = {
 	{
-		mkz(3.0f, 0.0f),
-		mkz(1.5f*(float)M_SQRT2, 1.5f*(float)M_SQRT2),
-		mkz(0.0f, 3.0f),
-		mkz(-1.5f*(float)M_SQRT2, 1.5f*(float)M_SQRT2),
-		mkz(-3.0f, 0.0f),
-		mkz(-1.5f*(float)M_SQRT2, -1.5f*(float)M_SQRT2),
-		mkz(0.0f, -3.0f),
-		mkz(1.5f*(float)M_SQRT2, -1.5f*(float)M_SQRT2)
+		mkz(3*1024, 0),
+		mkz(1.5f*(float)M_SQRT2*1024, 1.5f*(float)M_SQRT2*1024),
+		mkz(0, 3*1024),
+		mkz(-1.5f*(float)M_SQRT2*1024, 1.5f*(float)M_SQRT2*1024),
+		mkz(-3*1024, 0),
+		mkz(-1.5f*(float)M_SQRT2*1024, -1.5f*(float)M_SQRT2*1024),
+		mkz(0, -3*1024),
+		mkz(1.5f*(float)M_SQRT2*1024, -1.5f*(float)M_SQRT2*1024)
 	}, {
-		mkz((float)M_SQRT2, 0.0f),
-		mkz(1.0f, 1.0f),
-		mkz(0.0f, (float)M_SQRT2),
-		mkz(-1.0f, 1.0f),
-		mkz(-(float)M_SQRT2, 0.0f),
-		mkz(-1.0f, -1.0f),
-		mkz(0.0f, (float)-M_SQRT2),
-		mkz(1.0f, -1.0f)
+		mkz((float)M_SQRT2*1024, 0),
+		mkz(1024, 1024),
+		mkz(0, (float)M_SQRT2*1024),
+		mkz(-1024, 1024),
+		mkz(-(float)M_SQRT2*1024, 0),
+		mkz(-1024, -1024),
+		mkz(0, (float)-M_SQRT2*1024),
+		mkz(1024, -1024)
 	}, {
-		mkz(5.0f, 0.0f),
-		mkz(2.5f*(float)M_SQRT2, 2.5f*(float)M_SQRT2),
-		mkz(0.0f, 5.0f),
-		mkz(-2.5f*(float)M_SQRT2, 2.5f*(float)M_SQRT2),
-		mkz(-5.0f, 0.0f),
-		mkz(-2.5f*(float)M_SQRT2, -2.5f*(float)M_SQRT2),
-		mkz(0.0f, -5.0f),
-		mkz(2.5f*(float)M_SQRT2, -2.5f*(float)M_SQRT2)
+		mkz(5*1024, 0),
+		mkz(2.5f*(float)M_SQRT2*1024, 2.5f*(float)M_SQRT2*1024),
+		mkz(0, 5*1024),
+		mkz(-2.5f*(float)M_SQRT2*1024, 2.5f*(float)M_SQRT2*1024),
+		mkz(-5*1024, 0),
+		mkz(-2.5f*(float)M_SQRT2*1024, -2.5f*(float)M_SQRT2*1024),
+		mkz(0, -5*1024),
+		mkz(2.5f*(float)M_SQRT2*1024, -2.5f*(float)M_SQRT2*1024)
 	}, {
-		mkz(3.0f*(float)M_SQRT2, 0.0f),
-		mkz(3.0f, 3.0f),
-		mkz(0.0f, 3.0f*(float)M_SQRT2),
-		mkz(-3.0f, 3.0f),
-		mkz(-3.0f*(float)M_SQRT2, 0.0f),
-		mkz(-3.0f, -3.0f),
-		mkz(0.0f, -3.0f*(float)M_SQRT2),
-		mkz(3.0f, -3.0f)
+		mkz(3.0f*(float)M_SQRT2*1024, 0),
+		mkz(3*1024, 3*1024),
+		mkz(0, 3.0f*(float)M_SQRT2*1024),
+		mkz(-3*1024, 3*1024),
+		mkz(-3.0f*(float)M_SQRT2*1024, 0),
+		mkz(-3*1024, -3*1024),
+		mkz(0, -3.0f*(float)M_SQRT2*1024),
+		mkz(3*1024, -3*1024)
 	}
 };
 
 static const int considx[8] = { 1, 0, 2, 3, 6, 7, 5, 4 };
 
+//FxP: constelations scaled 2^10
+
 /* ABCD @ 9600bps */
-static const complex AB9600[2] = {
-	mkz(-3.0f, 0.0f),
-	mkz(3.0f, -3.0f)
+static const complexi AB9600[2] = {
+	mkz(-3*1024, 0),
+	mkz(3*1024, -3*1024)
 };
-static const complex CD9600[2] = {
-	mkz(3.0f, 0.0f),
-	mkz(-3.0f, 3.0f)
+static const complexi CD9600[2] = {
+	mkz(3*1024, 0),
+	mkz(-3*1024, 3*1024)
 };
 
 /* ABCD @ 7200bps */
-static const complex AB7200[2] = {
-	mkz(-3.0f, 0.0f),
-	mkz(1.0f, -1.0f)
+static const complexi AB7200[2] = {
+	mkz(-3*1024, 0),
+	mkz(1024, -1024)
 };
-static const complex CD7200[2] = {
-	mkz(3.0f, 0.0f),
-	mkz(-1.0f, 1.0f)
+static const complexi CD7200[2] = {
+	mkz(3*1024, 0),
+	mkz(-1024, 1024)
 };
 
 /* ABCD @ 4800bps */
-static const complex AB4800[2] = {
-	mkz(-3.0f, 0.0f),
-	mkz(0.0f, -3.0f)
+static const complexi AB4800[2] = {
+	mkz(-3*1024, 0),
+	mkz(0, -3*1024)
 };
-static const complex CD4800[2] = {
-	mkz(3.0f, 0.0f),
-	mkz(0.0f, 3.0f)
+static const complexi CD4800[2] = {
+	mkz(3*1024, 0),
+	mkz(0, 3*1024)
 };
 
-static complex tep(void *_state);
-static complex silence(void *_state);
-static complex ab(void *_state);
-static complex cdcd(void *_state);
-static complex ones(void *_state);
-static complex running(void *_state);
-static complex end(void *_state);
+static complexi tep(void *_state);
+static complexi silence(void *_state);
+static complexi ab(void *_state);
+static complexi cdcd(void *_state);
+static complexi ones(void *_state);
+static complexi running(void *_state);
+static complexi end(void *_state);
 
 static int scramble(v29_sstate *state, int bit) {
 	int b0;
@@ -165,7 +165,8 @@
 #define SEG4	48
 #define SEGEND	128
 
-static complex tep(void *_state) {
+static complexi tep(void *_state) {
+//FxP: return value scaled 2^10
 	v29tx_state *state = (v29tx_state *)_state;
 	
 	state->symbol++;
@@ -173,10 +174,11 @@
 		state->stage = &silence;
 		state->symbol = 0;
 	}
-	return _Cr1;
+	return _Cr1i;
 }
 
-static complex silence(void *_state) {
+static complexi silence(void *_state) {
+//FxP: return value scaled 2^10
 	v29tx_state *state = (v29tx_state *)_state;
 	
 	state->symbol++;
@@ -184,10 +186,11 @@
 		state->stage = &ab;
 		state->symbol = 0;
 	}
-	return _C0;
+	return _C0i;
 }
 
-static complex ab(void *_state) {
+static complexi ab(void *_state) {
+//FxP: return value scaled 2^10
 	v29tx_state *state = (v29tx_state *)_state;
 	
 	state->symbol++;
@@ -198,7 +201,8 @@
 	return state->AB[(state->symbol-1) & 1];
 }
 
-static complex cdcd(void *_state) {
+static complexi cdcd(void *_state) {
+//FxP: return value scaled 2^10
 	v29tx_state *state = (v29tx_state *)_state;
 	
 	state->symbol++;
@@ -209,7 +213,8 @@
 	return state->CD[rnd(&state->rnd)];
 }
 
-static complex ones(void *_state) {
+static complexi ones(void *_state) {
+//FxP: return value scaled 2^10
 	v29tx_state *state = (v29tx_state *)_state;
 	int q1, q2, q3, q4;
 	
@@ -221,14 +226,16 @@
 	GENERATE(scramble(&state->scr, 1));
 }
 
-static complex running(void *_state) {
+static complexi running(void *_state) {
+//FxP: return value scaled 2^10
 	v29tx_state *state = (v29tx_state *)_state;
 	int q1, q2, q3, q4;
 	
 	GENERATE(getbit(state));
 }
 
-static complex end(void *_state) {
+static complexi end(void *_state) {
+//FxP: return value scaled 2^10
 	v29tx_state *state = (v29tx_state *)_state;
 	int q1, q2, q3, q4;
 	
@@ -239,28 +246,29 @@
 
 #include "internal/modems/v17v29txfilter.h"
 
-static void cput(v29tx_state *state, complex z) {
+static void cput(v29tx_state *state, complexi z) {
+//FxP: z  scaled 2^10
 	state->fbuf[state->p] = state->fbuf[state->p + DN] = z;
 	state->p = (state->p + 1) % DN;
 	return;
 }
 
-static complex cfir(v29tx_state *state) {
-	complex acc, t0;
+static complexi cfir(v29tx_state *state) {
+//FxP: return value scaled 2^10
+	complexi acc, t0;
 	int j;
 
-	for (j=0, acc=_C0; j<DN; j++) {
+	for (j=0, acc=_C0i; j<DN; j++) {
 		scale2(t0, state->fbuf[j+state->p], df[j]);
 		add2(acc, t0);
 	}
 	scale(acc, 1.0f/dfGAIN);
-	return acc;
+	return acc;			//FxP result seems to match the constelation points 2^10 scaled.
 }
 
 int v29tx(v29tx_state *state, signed short *s, int len) {
 	int j, k;
-	complex t0, t1;
-	complexi t1_;
+	complexi t0, t1;
 	for (j=0; j<len; j++) {
 		if (state->end) goto eot;
 		for (k=2; k>=0; k--) {
@@ -271,8 +279,7 @@
 			cput(state, state->baud);
 			if (!k) t0 = cfir(state);
 		}
-		t1_= csynth(state->pacc); //FxP we get t1_ 2^10 scaled. The transmitter we will 
-		scale2_pow2r(t1,t1_,10);  //keep floating as it is simple enought. //So lets descale	
+		t1= csynth(state->pacc); //FxP we get t1_ 2^10 scaled.
 		state->pacc += state->ph;
 		con(t1);
 		s[j] = (signed short)(pseudosc(t0, t1) * state->gain);
@@ -313,11 +320,11 @@
 	state->rnd.sreg = 0x2au;
 	state->pacc = 0;
 	state->ph = getrate(_V29CONST_CF)/_V29CONST_SPS;
-	state->baud = _C0;
+	state->baud = _C0i;
 	for (j=0; j<_V29CONST_FLEN; j++)
-		state->fbuf[j] = _C0;
+		state->fbuf[j] = _C0i;
 	state->p = 0;
-	state->gain = 2000.0f;
+	state->gain = 2000.0f/1048576.0f; //FxP state->gain is 2^-20 scaled
 	return;
 }
 
--- attrafax-0.9/src/modules/app_t30txfax.c	2010-01-29 16:14:12.000000000 +0200
+++ attrafax-0.9/src/modules/app_t30txfax.c	2010-08-14 14:20:04.000000000 +0300
@@ -61,6 +61,8 @@
 	int argc;
 	int txok, page_num;
 	char buf[16];
+	unsigned int cycles_start;
+	
 		
 	u = ast_module_user_add(chan);
 
