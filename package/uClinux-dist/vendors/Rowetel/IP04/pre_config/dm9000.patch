--- blackfin-linux-dist/linux-2.6.x/drivers/net/dm9000.c	2009-01-08 10:58:03.000000000 +0200
+++ blackfin-linux-dist/linux-2.6.x/drivers/net/dm9000.c	2010-08-12 15:51:32.000000000 +0300
@@ -33,6 +33,7 @@
 #include <linux/platform_device.h>
 #include <linux/irq.h>
 #include <linux/slab.h>
+#include <linux/string.h>
 
 #include <asm/delay.h>
 #include <asm/irq.h>
@@ -1184,6 +1195,9 @@
 	int iosize;
 	int i;
 	u32 id_val;
+	char *ptr = NULL;
+	char *ptr_end;
+	char ethaddr[17];
 
 	/* Init network device */
 	ndev = alloc_etherdev(sizeof(struct board_info));
@@ -1378,6 +1392,29 @@
 			ndev->dev_addr[i] = ior(db, i+DM9000_PAR);
 	}
 
+
+        if (!is_valid_ether_addr(ndev->dev_addr)) {
+                /* try reading from boot command line */
+		
+                mac_src = "command line";
+		
+		if(pdev->id==0)
+			ptr = strstr(boot_command_line, "ethaddr=");
+		else
+			ptr = strstr(boot_command_line, "thaddr1=");
+
+		if(ptr){	
+			memcpy(ethaddr, ptr + 8, 17 * sizeof(char));
+               		printk(KERN_INFO "ethaddr parsed from commandline: %s\n", ethaddr);
+               		ptr_end = ethaddr;
+               		for (i = 0; i < 6; i++) {
+                       		ndev->dev_addr[i] = simple_strtol(ptr_end, &ptr_end, 16) |  
+					  simple_strtol(ptr_end, &ptr_end, 16) <<4;
+				ptr_end++; /* skip ":" in  ethaddr */
+			}
+        	}
+	}
+
 	if (!is_valid_ether_addr(ndev->dev_addr))
 		dev_warn(db->dev, "%s: Invalid ethernet MAC address. Please "
 			 "set using ifconfig\n", ndev->name);
--- blackfin-linux-dist/linux-2.6.x/drivers/net/dm9000.c        2011-04-10 12:07:18.000000000 +0300
+++ blackfin-linux-dist/linux-2.6.x/drivers/net/dm9000.c        2011-04-10 12:06:44.000000000 +0300
@@ -672,6 +672,8 @@
 	spin_unlock_irqrestore(&db->lock, flags);
 }
 
+static void dm9000_phy_write(struct net_device *, int , int, int);
+
 /*
  * Initilize dm9000 board
  */
@@ -688,8 +690,10 @@
 
 	/* GPIO0 on pre-activate PHY */
 	iow(db, DM9000_GPR, 0);	/* REG_1F bit0 activate phyxcer */
+	mdelay(20); //Penev Wait for PHY power on ready
 	iow(db, DM9000_GPCR, GPCR_GEP_CNTL);	/* Let GPIO0 output */
 	iow(db, DM9000_GPR, 0);	/* Enable PHY */
+	mdelay(20); //Penev, probably not needed!!!  Wait for PHY power on ready
 
 	if (db->flags & DM9000_PLATF_EXT_PHY)
 		iow(db, DM9000_NCR, NCR_EXT_PHY);
@@ -719,6 +723,13 @@
 	db->tx_pkt_cnt = 0;
 	db->queue_pkt_len = 0;
 	dev->trans_start = 0;
+
+        if (db->type == TYPE_DM9000B){
+                iow(db, 0x38, 0x01);                    //Penev: default 2mA, eliminate 2ns IOR spike
+                                                        //as defined in the migration document
+
+                dm9000_phy_write(dev, 0, 0x1b, 0xe100); //Penev: Set DSP _Control as per migration document 
+        }
 }
 
 /* Our watchdog timed out. Called by the networking layer */
@@ -1036,6 +1047,8 @@
 	
 	dm9000_schedule_poll(db);
 
+	dm9000_timeout(dev); //Penev, This fixes the driver in case of DM9000B !?!?  
+
 	return 0;
 }
 
