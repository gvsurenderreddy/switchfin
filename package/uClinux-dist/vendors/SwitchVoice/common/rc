#!/bin/hush
#
#/etc/rc
#
## The Switchfin main rc file

mount /proc
mount /sys
mount /dev/pts
mount -t ramfs ramfs /var/log
mount -t ramfs ramfs /var/tmp

#mount ubifs on /persistent
pr1=`cat /etc/issue | grep PR1-Appliance`
if [ -z "$pr1" ]; then
	vidhdroffset="512"
else
	vidhdroffset="2048"
fi
mknod /dev/ubi_ctrl c 10 63
ubiattach /dev/ubi_ctrl --mtdn=3 --devn=0 --vid-hdr-offset=$vidhdroffset
mknod /dev/ubi0 c 254 0
ubivol=`ubinfo -a | grep "Volumes count:" | grep 1`
if [ -z "$ubivol" ]; then
	ubidetach /dev/ubi_ctrl --mtdn=3
	ubiformat /dev/mtd3 -y --vid-hdr-offset=$vidhdroffset			 #format
	ubiattach /dev/ubi_ctrl --mtdn=3 --devn=0 --vid-hdr-offset=$vidhdroffset #attach it
	ubimkvol /dev/ubi0 -m -N persistent					 #make volume	
fi
mount /persistent

##### Following looks for an image to burn into FLASH before starting asterisk.
echo "Checking for upload image to program"
if [ -d "/persistent/imageupdate" ]; then
        if [ -f "/persistent/imageupdate/uImage" ]; then
                echo 3 > /proc/sys/vm/drop_caches       # Force cache memory cleanup 
                flashupdate file /persistent/imageupdate/uImage
                if [ "$?" = "0" ] ; then
                        rm -f /persistent/imageupdate/uImage >/dev/null 2>/dev/null
                        echo "**************************************" > /persistent/imageupdate/flashresult
                        echo "**************************************" >> /persistent/imageupdate/flashresult
                        echo "SUCCESS - updating binary image success" >> /persistent/imageupdate/flashresult
                        if [ -f "/persistent/imageupdate/.clear_persistent" ]; then
                                rm -rf /persistent/.unpacked
                                echo "Full factory default will be executed!" >> /persistent/imageupdate/flashresult
                        else
                                echo "Your configurations will be kept!!!" >> /persistent/imageupdate/flashresult

                        fi
                        echo "**************************************" >> /persistent/imageupdate/flashresult
                        echo "**************************************" >> /persistent/imageupdate/flashresult
                        cat /persistent/imageupdate/flashresult
			cp -r /defaults.tgz /persistent/
                        sleep 2 
                        reboot
                else
                        echo "??????????????????????????????????????" > /persistent/imageupdate/flashresult
                        echo "ERROR - updating binary image uImage " >> /persistent/imageupdate/flashresult
                        echo "??????????????????????????????????????" >> /persistent/imageupdate/flashresult
                        cat /persistent/imageupdate/flashresult
                        sleep 5
                fi
        fi
else
        mkdir -p /persistent/imageupdate
fi
### Guarantee that image file does not exist
rm -f /persistent/imageupdate/uImage >/dev/null 2>/dev/null
rm -f /persistent/imageupdate/.clear_persistent >/dev/null 2>/dev/null

# start checking restore
modprobe restore
if [ -f /proc/rs ]
then
    if [ -n "`grep "s1" /proc/rs`" ]
    then
        rm -rf /persistent/.unpacked
        echo 1 > /proc/rsc
    fi
fi

if [ -f /persistent/.unpacked ]; then
	echo "We already have unpacked default configuration..."
else
	echo "Can not find persistent configuration files"
	echo "We are going to unpack default configuration!!!"
	if [ -f /persistent/.netbackup ]
	then
		echo "Network settings will be kept"
		cp /persistent/etc/network.conf /persistent/etc/network.conf~
		cp /persistent/etc/asterisk/rc_org.conf /persistent/etc/asterisk/rc_org.conf~
	fi
	gzip -dc defaults.tgz |  tar xvf - 
	touch /persistent/.unpacked
	if [ -f /persistent/.netbackup ]
	then
		cp /persistent/etc/network.conf~ /persistent/etc/network.conf
		cp /persistent/etc/asterisk/rc_org.conf~ /persistent/etc/asterisk/rc_org.conf
		rm /persistent/etc/network.conf~ /persistent/etc/asterisk/rc_org.conf~
		rm /persistent/.netbackup
	fi
fi

#We will link all files/folders for /etc/persistent back to /etc
for filename in `ls /persistent/etc/`; do
        ln -sf /persistent/etc/$filename /etc/
done

# Mount Asterisk var/lib/asterisk/ as persistent
for dirname in `ls /persistent/var/lib/asterisk/`; do
        ln -sf /persistent/var/lib/asterisk/$dirname /var/lib/asterisk/
done


# write the log files to sd/mmc card
if [ -n "$pr1" ]; then
	#PR1
        modprobe mmc_spi
	sleep 1
	sdcard=`dmesg | grep "new SD card on SPI"`
	if [ -n "$sdcard" ]; then
		echo "mmc/sd detected"
		modprobe mmc_block	
		[ ! -d /mnt/sd ] && mkdir /mnt/sd 
		mount -t vfat /dev/mmcblk0p1 /mnt/sd/ #mount the first partition
		if [ ! -f /mnt/sd/.format ]; then
            		echo "Found new mmc/sd card, trying to format it..."
            		umount /mnt/sd
            		/bin/mkdosfs /dev/mmcblk0p1
            		mount -t vfat /dev/mmcblk0p1 /mnt/sd/
            		touch /mnt/sd/.format
        	else
           		echo "The mmc/sd card has been already formatted"
        	fi
        	[ ! -d /mnt/sd/asterisk ] && mkdir /mnt/sd/asterisk
        	echo "[directories]" > /etc/asterisk/asterisk.conf
        	echo "astlogdir => /mnt/sd/asterisk" >> /etc/asterisk/asterisk.conf
        	[ ! -d /mnt/sd/asterisk/cdr-csv ] && mkdir /mnt/sd/asterisk/cdr-csv
        	[ ! -d /mnt/sd/asterisk/cdr-custom ] && mkdir /mnt/sd/asterisk/cdr-custom
        	ln -sf /mnt/sd/asterisk/cdr-csv/ /var/lib/asterisk/static-http/config
	else
    		echo "No SD Card Detected!"
    		echo "[directories]" > /etc/asterisk/asterisk.conf
    		echo "astlogdir => /persistent/var/log/asterisk" >> /etc/asterisk/asterisk.conf
    		ln -sf /persistent/var/log/asterisk/cdr-csv/ /var/lib/asterisk/static-http/config
		rmmod mmc_spi
	fi
fi

if [ -d /persistent/var/log/asterisk ]; then
	ln -sf /persistent/var/log/asterisk/ /var/log/
fi

if [ -d /etc/scripts ]; then
ln -sf /etc/scripts /etc/asterisk/
fi

#Bring up lo interface
ifconfig lo 127.0.0.1

# setup persistent for tftpd
if [ -f /bin/in.tftpd ]; then
echo "tftp    dgram  udp wait   root /bin/in.tftpd /persistent/tftp" >> /etc/inetd.conf
fi

# start up services linked to rc.d
for i in /persistent/etc/rc.d/S*; do
        $i start
done

if [ ! -f /etc/asterisk/extensions_custom.conf ]
then
	mv /etc/asterisk/extensions.conf /etc/asterisk/extensions_custom.conf
	echo "#include extensions_custom.conf" > /etc/asterisk/extensions.conf
	echo "#include custom.conf" >> /etc/asterisk/extensions.conf
	touch /etc/asterisk/custom.conf
fi

inetd &

# setting up localtime for asterisk timezone
[ -d /persistent/usr/share/zoneinfo ] && ln -sf /persistent/usr/share/zoneinfo /usr/share/
[ -f /persistent/usr/share/zoneinfo/.setlocaltime ] && . /persistent/usr/share/zoneinfo/.setlocaltime


if [ -d /persistent/sounds/digits ];then
rm -rf /var/lib/asterisk/sounds
ln -sf /persistent/sounds /var/lib/asterisk/
else
sleep 3
if test `ping -c 1 downloads.digium.com |grep "ttl" |wc -l` -gt 0
then
/bin/create_sounds
fi
fi
ln -sf /persistent/sounds/moh /var/lib/asterisk/
ln -sf /persistent/sounds/meetme /var/spool/asterisk/
ln -sf /persistent/sounds/voicemail /var/spool/asterisk/
ln -sf /persistent/sounds/monitor /var/spool/asterisk/
if [ -d /persistent/mem ]; then
        ln -sf /persistent/mem/ /tmp/
fi

rm /defaults.tgz
