Without this, threaded rsync often crashes, mangles data or goes wrong
in other ways on our humble no-MMU uClinux systems, because the stack
size is too small.

rsync uses a surprisingly large amount of stack, due multiple local
arrays of size MAXPATHLEN which is 4096, or even
MAXPATHLEN*sizeof(int) in one case.  I haven't attempted to work out
exactly how much stack is needed, but 256kbytes seems a safe bet.

Setting the stack larger with -Wl,-elf2flt=-s262144 is essential, but
it only increases the stack for the first (main) thread.  The other
thread gets the default stack of 16k, which is too small.

This patch sets the stack size to 256k for the receiver thread only.
Use this in conjunction with -Wl,-elf2flt=-s262144 in LDFLAGS (not set
by this patch), so that both threads get a 256k stack.

-- Jamie Lokier <jamie@jlokier.co.uk>, June 2006

diff -ur rsync.old/main.c rsync.new/main.c
--- rsync.old/main.c	2006-06-30 02:20:55.000000000 +0100
+++ rsync.new/main.c	2006-06-30 02:20:37.000000000 +0100
@@ -566,6 +566,7 @@
 {
 	void *value_ptr;
 	struct thread_args args;
+	pthread_attr_t attr;
 	int err;
 
 	/* The receiving side mustn't obey this, or an existing symlink that
@@ -584,11 +585,22 @@
 	   some old pthread draft specification, so there are old
 	   implementations which use -1 and errno.  The code below
 	   will work with either. */
-	if ((err = pthread_create(&receiver_tid, NULL, start_receiver_thread, &args)) != 0) {
+	if ((err = pthread_attr_init(&attr)) != 0) {
+		rsyserr(FERROR, err != -1 ? err : errno,
+			"pthread_attr_init failed in do_recv");
+		exit_cleanup(RERR_IPC);
+	}
+	if ((err = pthread_attr_setstacksize(&attr, 262144)) != 0) {
+		rsyserr(FERROR, err != -1 ? err : errno,
+			"pthread_attr_setstacksize failed in do_recv");
+		exit_cleanup(RERR_IPC);
+	}
+	if ((err = pthread_create(&receiver_tid, &attr, start_receiver_thread, &args)) != 0) {
 		rsyserr(FERROR, err != -1 ? err : errno,
 			"pthread_create failed in do_recv");
 		exit_cleanup(RERR_IPC);
 	}
+	pthread_attr_destroy(&attr);
 
 	io_start_buffering_out();
 
